プロダクトオーナー兼EMとしての資質について考えてみた。
Go to the profile of i35_267
i35_267
Nov 30
この記事は、Engineering Manager Advent Calendar 2018の1日目のエントリーです。

Engineering Manager Advent Calendar 2018 - Qiita

エンジニアリングマネージャのためのアドベントカレンダーです。 + チーム運営の方法 + プロジェクトマネジメント/プロダクトマネジメントのノウハウ + 心理的安全性のハック + エンジニアリング組織運営のプラクティス…
qiita.com
普段は、DMM.comのプラットフォーム事業本部というところでプロダクトオーナーとエンジニアをマネジメント・採用する立場をしております@i35_267です。

今回は、プロダクトオーナー兼EMとしての資質を自分の経験から自分なりにのべてみたいとおもいます。

■ Overview
ここでは、プロダクトオーナーとして普段行っている中で必要そうになる資質 = 能力について3つほど上げさせていただきます。

まず、プロダクトオーナーの責務とは何でしょうか。Scrum Guideから引用してみます。

プロダクトオーナーは、開発チームから生み出されるプロダクトの価値の最大化に責任を持つ。組 織・スクラムチーム・個人によって、その方法はさまざまである。 プロダクトオーナーは、プロダクトバックログの管理に責任を持つ 1 人の人間である。プロダクトバ ックログの管理には、以下のようなものがある。
• プロダクトバックログアイテムを明確に表現する。
• ゴールとミッションを達成できるようにプロダクトバックログアイテムを並び替える。
• 開発チームが行う作業の価値を最適化する。

そんな中で、今回は大事な点として今回以下の3つを上げていました。

抽象的なものを具現化する能力
開発プロセスを作る能力
プロダクトの状態を数値データで見る能力
メンバーが開発しやすい環境を作れる能力
ひとつずつ説明していきます。

1. 抽象的なものを具現化する能力
プロダクトオーナーとして一番大事な点は、上で引用した『ScrumGuide』からもわかるとおり『プロダクトバックログアイテム』の最適化です。

そして、そのプロダクトバックログアイテムを作るための能力とは何かを考えると抽象的なもの(=ストーリーベース)を具現化(プロダクトバックログアイテム)だと思います。


例えば、会員登録機能にSNS認証を加えたいといったざっくりといったストーリーがあったとして、それをプロダクトオーナーは徐々に抽象度をさげていきながら、認証用Back-end APIの作成、Front-endの作成、etc…

開発メンバーが作業できる範囲、Readyの定義が整うまで細かくプロダクトバックログアイテムへ落とし込まないといけません。なので、やはりエンジニアリングの能力が少なくとも必要になってくると思います。

意外にここの部分を開発メンバーにまるっと投げているケースが多いように見受けられます。特にエンジニア出身ではないと簡単なストーリーだけ決めてあとは丸投げといった形が多いと思いますが、個人的にはSBI(スプリントバックログアイテム)までは落とし込まなくとも、ストーリーからある程度の粒度までは落とし込み、SBIも何をしているか理解するまでは必要だと思います。

2. 開発プロセスを作る能力
こちらは、プロダクトバックログアイテムをいくら最適化しても、それを開発してリリースするまでのプロセス、リードタイムが長ければリリース回数が減り、Product Market Fitが遅くなります。

いわばプロダクトバックログアイテムは開発をはじめる準備 = アイテムなので良い開発プロセスを設計するのは、とても重要なことです。

スクラム定義をメンバーに浸透させるのはスクラムマスターですが、もうちょっと抽象度高くスクラムでは補えない部分をどうするかもプロダクトオーナーは意識しなければいけません。

始めから、理想の開発プロセスがある人はそのプロセスを適応してもよいですが、現状の開発プロセスを見直す手段も有効です。

見直すツールとして、『VSM(ValueStreamMapping)』があります。


VSMとは、アイディア(要求)から価値(バリュー)が出るまでの開発プロセスを可視化する手法です。以下は実例です。


このような図を開発からリリースに関わった人皆で書きます。

そして、『ここは意味がなさそうだからなくてもよいのではないか』『ここの工程とここの工程は一緒にできるのではないか』などを議論します。ポイントとしては、まずは改善方法を考えるのではなく、ムダを徹底的に見つけることです。

ちなみに一度、VSMを書きチームで議論することでリリースまでのリードタイムがこのくらい削減できます。


詳しい説明は、以下のスライドにありますので興味がある方はぜひご覧ください。


3. プロダクトの状態を数値データで見る能力
プロダクトを成長させるには、さまざまな数値およびデータを見ていかなければなりません。つまりデータ駆動に基づいてプロダクト戦略を立てるべきだと感じています。

まずは、プロダクト戦略を考える上で、なぜ『データ』というものが必要なのでしょうか？
逆に考えると、仮にデータに基づかない状態でプロダクトをGrowthさせる場合、頼るのは直感です。
もちろん、直感で仮説を決めて検証してもよいでしょう。ただし、その仮説を検証した後に効果があったかはデータがないとわからない部分が大きいです。
いずれにしても、データがあるということはプロダクトの状態を見ていく上で大きな根拠になります。

プロダクトオーナーとしては、最低限KPIツリーがあるならばそのツリーの数値(CTRやCVR,CV,etc…)が出せる簡単なSQL程度なら書けること。そして、コホート分析なりでユーザーの行動を常に追えていること。が必要になって来るかなと思います。


Redashによるコホート分析の例
■ メンバーが開発しやすい環境を作れる能力
最後にプロダクトオーナーの話をしてきましたが、チーム内の環境について整備できることも重要でしょう。

ここでは、ひとつだけ必ず隔週で1on1をしましょう。そこで個人のキャリアとチームの方向性をきちんとすり合わせしましょう。はじめから目指している姿が固まっているメンバーは少ないです。そのためいかに1on1を通してコミュニケーションのなかで固めていけるかが大事です。

■ まとめ
以上がプロダクトオーナーとして必要になりそうな知識になります。

抽象的なものを具現化する能力
開発プロセスを作る能力
プロダクトの状態を数値データで見る能力
メンバーが開発しやすい環境を作れる能力
1~4の資質はどれも大事ですが、特に『1. 抽象的なものを具現化する能力』は必須かとおもいます。プロダクトオーナーの業務のほとんどはプロダクトバックログアイテムの管理です。

もちろん、プロダクトバックログを作るにあたって、『3. プロダクトの状態を数値データで見る能力』のようなデータを見て仮説を決めてそれをプロダクトバックログに落とし込み優先順位を決め、開発プロセスを設計して最速で仮説検証を繰り返すために複合的に1~3すべての能力が必要になるのかなと思います。

以上です。

駆け出しエンジニアリングマネージャーの苦しみ
はじめましてkaibaと申します。
小さめのスタートアップで働いてみたくなり、2018/4に小さな不動産ベンチャーに転職しました。
「おいどんに管理職は無理でごわす！　技術で食っていくぞ！」 と長らく思っていたのですが、
気づいたらエンジニアリングマネージャーをやるようになりました。

新米エンジニアリングマネージャーが、当然一筋縄では行かずもがき苦しみながら進んでいる、という話をします。
(なので、あまり学びはないかもしれません…)

自己紹介
技術も好きだけど、ものづくりのほうが好き！　土日もプログラムを書きます！
プログラムだけじゃなく電子工作や3DCGや絵画や料理にも興味がある
それ故、できれば全部自分でやりたく、カバー範囲が広いが深い知識はない
言語や手段にはあまりこだわりはなく、最良の手段を選びたい
より多くの人に喜んでもらいたい。無駄なものは作りたくないし、仕様の段階から一緒に最良を追い求めたい。
犬派で本人も犬のようなやつで、素直で愚直で裏がない。嘘をついたり、裏をかいたりするのは苦手。内緒話も陰口も苦手。
愚直で空気が読めず人に嫌われることはぼちぼちあるけど、人を嫌うのは稀。
真面目で社畜体質。
人が怒ったり言い争ったりすることにトラウマがあり、その場面では異常な緊張感を感じてしまう。
教育や勉強会も好き。
だいぶ犬っぽい感じ。
どうりで犬と相性がいいわけだ…。

どんな仕事？　どんな人がエンジニアリングマネージャに向いてる？
僕が所属するのはまだまだ小さなスタートアップですので、手を動かしたりもしていて、正直どんな仕事なのかよくわかっていません。
超ざっくり言うと「エンジニアの組織づくり」が仕事でしょうか。

良い組織やマネージャのことを考えると、社会人1年目の時にお世話になったマネージャを思い出します。

温和でなんでも相談にのってくれて受け止めてくれた
自分が一番つらいのに客先からメンバを守ってくれた
新人の僕に仕事を任せてくれた
そして生まれた糞コードをきれいに作り直して見せてくれた
未経験の技術でも挑戦させてくれた
技術好きで最新技術にも詳しい
時には論理的に叱る。いきなり責めない。
メンバからの信頼を得ている
本当に感謝しかありません。きっとこんな人がマネージャに向いているのでしょう。
僕は犬のようなやつなので、機微に対する心遣いが苦手で、こうはなれそうにありません。
僕はマネジメントを早々に諦め、技術だけで食っていくつもりでいました。

マネジメントはスキルである
受託ではなく、自社のサービスをやってみたくなり、上記の会社を離れ、上場間近のスタートアップにジョインしました。
スタートアップは僕にはすごくマッチしました。
エンジニアも仕様検討に混ざることができ、最善を選択するのに尽力できるのが最高に楽しい！
技術的にも強いメンバーが多くて、僕は生き生きと仕事を楽しみました。

仕事が手に馴染んで来たあと、子会社に出向し開発リーダー職を勧められました。
性格的に向いていないと思っていたので、乗り気ではなかったのですが、
「マネジメントはスキルであり、性格的なものが全てではないからやってみては？」と。
「スキル」と言われると技術屋には滾るものがあります。
10冊もの本を渡されつつ、挑戦することにしました。

全部は読めなかったのですが、一番強く記憶に残った本は「人を動かす」です。
この本は仰々しいタイトルですがわかりやすいタイトルにすると「人に興味を持って、人と仲良くして、仕事を円滑に進めよう」です。
言い争いが嫌いな僕にはすごくフィットし、星さんからこのまま定価で買い取らせてくれ！と言ったら、文庫版があるからあげるよ、とそのままいただきました。
今後も僕のバイブルになるでしょう。
最良には程遠い結果となりましたが、まずまずの手応えが得られました。

どんな苦しみがあり、どうしているか
今はより小さなスタートアップでエンジニアリングマネージャをしております。

人と自分は違う
当たり前ですが、人と自分は違うものです。
特にエンジニアは特徴的な方も多いです。
時にはイラついてしまうこともありましたが、人を動かすにあるとおり、
人に興味を持ち、何を大切に考えており、何がしたいのかを理解しようと努めています。

プログラムかけない & 全部自分でやりたがる
これはマネージャ職の問題というよりは個人的な問題かもしれません。
小さなスタートアップですから、手も動かします。
しかし、思ったより進まず、成果を出していない気持ちが生まれ、罪悪感が生まれてしまいました。
自分の全部自分でやりたがる性格もあいまって、ついつい仕事を抱えてしまい、単一障害点になってしまいました。
今は以下を心がけています。

トラブル対応時は協力を仰ぐ
興味を持ってやってくれそうな人に振る
エンジニアリングに集中できるようにするための作業をやらせてもらう
予め手を動かす系の仕事を抱えすぎない
会社やプロダクトと喧嘩しない
だいたいどこに行っても悪寒のするようなクソ設計、クソコードに出会うものです。
罵詈雑言をぶちまけたくなりますが、モチベーションが下がるだけで何も生みません。
「限られたリソースで当時できることをやったのだ。僕たちが少しづつ良くしていくしかない」
ということを共有するのを心がけています。

会社に合う人を採用する
採用もエンジニアリングマネージャの重要な仕事です。
有名な企業であればさておき、無名のスタートアップでは人事にまさせっきりではエンジニアの採用は難しくなってきました。
スーパーハッカーが雇えたとしても、会社に合う人を採用できないとお互い不幸になります。
技術力も重要ですが、会社に合う人を採用しています。

終わりに
この役職が向いているのかどうなのか、まだ手探りな状態でして、
適任者が来たら席を譲る心構えもありますが、
俺たちの戦いはまだ始まったばかりだ！
kaiba先生の次回作にご期待下さい！

Managerでありながら尖ったEngineerであるために自己組織化チームに挑む
Management3.0
EngineeringManager
自己組織化チーム
この記事は、 Engineering Manager Advent Calendar 2018 の3日目のエントリーです。

また、同名のタイトルで、 Scrum Fest Osaka 2019 の プロポーザルを提出させていただいております。
https://confengine.com/scrum-fest-osaka-2019/proposal/8574/managerengineer

当日の発表は、この記事をベースとさせていただきますが、また発表のタイミングで色々とアップデートもあると思いますし、全然ちゃう内容になることもあるかも…?

以下のアジェンダで書いてみようと思います。

前提
仮説
検証
Management 3.0
見える化
タスクはPull
モブプログラミング
任せる領域
自身も含めてエンゲージメントを高める
まとめ
前提
私がどういった組織とチームに所属しており、役割を担い、組織の運営、チームの運営にどう関わってきたか、あまり詳細に書くことはできないので、ざっくり概要だけ書きます。

組織の責任者
プロジェクトと組織の枠組みは別
組織のメンバーは、別々のプロジェクトチームに所属している
私が所属しているプロジェクトは、社員のみで構成されているわけではない
開発拠点は一箇所で全員その場にいる(リモートはいない)
組織のマネジメントと、プロジェクトのマネジメントが求められていた
プロジェクトはスクラムチーム
わたしは、スクラムマスターではなく、Developer
組織の責任者であり、プロジェクトの進捗について部分的に責任を担っていた
部分的というのは、プロジェクトは巨大で、全体的な進捗を私の関わる部分だけでコントロールできる範囲になかったことからそういう表現にしている
まとめると…

私の役割としては、プロジェクトを進捗させ、プロダクトを世に出すため、開発を進めることだった。

いかに、自身の責任範囲において、進捗を出し、速く確実に成果を出し、プロダクトをローンチするのかといったことに取り組んでいた。

ある程度の権限をいただいていたので、私が開発してもしなくても、進捗さえ出れば良いという状況であり、手段については、問われない状況だった。
そのうえで、私はエンジニアでありたいがゆえに、組織とプロジェクトを推進しながら、自身もエンジニアとして手を動かし続けるには、どうすれば良いのか、といったあたりで、もがきトライした経験からの抜粋を書きます。

仮説
「自己組織化チームであれば、人や進捗を管理することなく、自身もエンジニアリングをしながら、結果も出せるのではないか。」
という仮説を立てた。

自己組織化チーム
改めて、自己組織化チームという言葉について、 InfoQでは、次のように紹介されている。

自己組織化チームとは何か？

真のチームは価値のあるミッション，明確な境界，自己管理と安定のための権限を備えていることを見てきました。チームの自己組織化はチームメンバの類似性と相違性の微妙なバランスの上に作られるということ，自己組織化には明確な境界とサポートするコンテキストが必要であること，自己組織化は分散管理，継続的な対応，創発的構造，フィードバック，復元力といったもので特徴付けられている，ということも分かりました。そして最後に，自己組織化には長い時間が必要なことも理解しました。

この結論だけを読んでもちんぷんかんぷんですが…きちんと最初から読めばなんとなく分かった気がします。

とはいえ、私が今回書きたいポイントとしては、ここで述べられている全てではなく、次のポイントにしぼって実施してきたことを挙げたいと思います。

自己組織化には明確な境界とサポートするコンテキストが必要であること

検証
以下の要素を検証した。

Management3.0
Management3.0を説明するときは、いつも必ず、1.0,2.0と追って説明することで、どういったものかピンと来やすいなーと思いますので、書きます。

Management 1.0
トップダウン式で、少数の人が権限を持っているタイプの組織の運営方法です。
つまりマイクロマネジメントです。ヒエラルキーの下にいる人たちは責任がほとんどなく、いい仕事をしようというモチベーションがありません。
このとき、「マネジメントとしては間違ったことをしている」状態になってしまいます。
しかし、残念ながら世界でもっとも広く普及しているマネジメント方法です。

Management 2.0
Management 1.0という古いシステムに、作業効率と従業員のモチベーションを上げるための、大量の活動を追加した状態のことです。
こちらもトップダウン・アプローチに変わりはありません。
そして残念ながら度々間違ったアプローチを適用している「正しいことを間違った方法でやっている」状態とされます。

Management 3.0
ヒエラルキーではなくネットワークが権限を持っていることを要件としたリーダーシップとマネジメントの概念です。
参加者全員が協調することによって、効率が良くなり、ビジネス・ゴールを達成することだけでなく、自己組織化を通して、高い内発的動機付けができ、皆さんが笑顔になります。
組織システムとして「正しいことをしている」状態とされます。

ぱっと、1.0->2.0->3.0と順に読むと、3.0は直感的に良い状態と定義されており、ここでも自己組織化というキーワードが出てきております。

さらに、InfoQで、 スクラムとManagement 3.0 という記事が掲載されており、この中で、次のような特徴に重きを置いていると紹介されています。

能力を開発する: マネージャはチームメンバが目標を達成するための能力開発を支援しなければならない。困難な課題に取り組む機会を提供することが，社員の能力レベルの向上に役立つ。
構造を拡大する: チームメンバ内のコミュニケーションやコラボレーションを向上するための構造を作り上げる。
すべてを向上する: メンバ，チーム，組織は継続的に改善し，失敗の回避に注力する必要がある。継続的な改善。
精力的にする: マネージャはメンバのモチベーション向上を支援して，彼らが創造的かつ活動的であることを評価するべきだ。
チームに権限を与える: マネジメントはチームの自己組織化をサポートし，意思決定を行う権限を与える。
制約を整える: 自己組織化のためには，システム内部が境界によって囲まれている必要がある。境界を置くことが，自己組織化を価値へと向かわせる。
以上の中から私が取り上げたいのは、 チームへの権限の提供 と、 境界の確保 です。

チームへの権限の提供
チームを自己組織化するため、権限の提供は欠かせないと考えており、そのために境界を確保して、その範囲において、自身の判断、管理のもと、遂行して良いよという確約を提供することを意識して取り組んでおりました。

そのことを念頭に置いたうえでの具体的な行動として、以下が挙げられます。

見える化
タスクはPull
モブプログラミング
任せる領域
見える化
チームの状況をチームのメンバーも含めて、見える状態になっていることは、自分たちが、全体の進捗においてとか、プロジェクトの方針においてとか、世の中、プロダクトの市場価値など、あらゆる視座において、とても重要だと考えます。

スクラムのスプリントという約束された範囲において、自分たちの制御可能な領域があり、そのステータスがどのようになっているか、自分たちも見えており、いつでも説明できる状態にしておくことは、とても重要です。

そのためのプラクティスとして、スプリントプランニング、カンバン、バーンダウンチャート、ニコニコカレンダー、デイリースタンドアップといったスクラムやアジャイルのプラクティスがとても相性が良く、うまく運用することが自分たちのステータスを理解するのに役立ちます。

そして、毎日、ステータスを確認しておりますから、いつでも聞かれたら報告できます。

デイリースタンドアップは、いわゆる朝会ですが、毎日、司会を当番で回します。
チームリーダーのような立場の方が朝会を司会すると、その人に向かって報告をするようになりがちです。
朝会を当番にすると、質問が一方向に集中せず、空中に浮く形になります。
それを一回放置してみると、だれかれと分かっている人が話し出します。
強制的に誰かに発言を促すのではなく、黙る勇気を持つことも時に必要です。
肩に力の入った責任感の強いチームリーダーは、チームが困っていると自分がなんとかしないとと積極的な行動を取りますが、時にはその行動を取らない勇気を持ち、問題をそのまま空中に浮かべてみると、意外な活躍をする人が出てくるかもしれません。
デイリースタンドアップで、毎日、そういった工夫を投入していくと、それぞれがチームへのコンピテンシーを産み、チームのステータスを把握し、自分ごととして、周りに説明できるぐらい見えるような状況を作れると考えます。

タスクはPull
タスクをPushすると、状況を把握しないと、投げっぱなしになってしまいます。投げっぱなしはよくありません。

タスクを投げたら、どうなっているか聞くといった常にこちらからの働きかけが必要となりますから、基本は、Pullをしてもらいます。
どんどん、空中に浮いているタスクを取っていってもらいます。

タスクを空中に浮かすためには、スクラムのリファインメントやスプリントプランニングで、タスクのWhy、What、Howについて、議論が成されており、サイズ感についても共通認識にいたっていることが重要です。
中にはスキルや経験が足らず、認識レベルが低い方もいると思います。
そういった場合は、ペアプロ、モブプロなどを取り入れて、次のスプリントにおける共通認識のレベルを上げていくことが重要です。
自己組織化チームは一日にして成らず、継続的な改善と取り組みをトライし続けることが必要です。
積極的にPullするための共通認識の醸成のために、今はできていなくても、レベルを上げ続けるため、いまのスプリントで分かっている人、分かっていない人で協力して、タスクを進めていくことで、認識の輪が広がり、チーム全体のレベルが底上げされていくはずです。

モブプログラミング
先に触れていますが、チームの共通認識のレベルを上げていくことに、とても役立ちます。
また、自身が取っている行動について、安心感を得られます。
相互に取り組んでいることを良い意味で監視し合い、安心してスプリントを過ごすことができます。

モブプログラミングを取り入れなかった場合、各個人の進捗について、デイリースタンドアップでチームリーダー的なロールの人に向かって報告をしていただく必要があります。

取り入れた場合は、報告していただく必要はなく、チームの誰かが分かっている状態を作ることができます。
結果的に終わったかどうかだけを把握することで事足ります。

モブプログラミングから得られる効果は、数えるとまだ他にもありますが、今回の中では共通認識レベルの向上から、次回からのスプリントでタスクをPullできるようになっていくことや、良い意味での相互監視により、自己組織化が進み、チームの中でこの人なら安心して任せられるヒーロー的な存在をどんどん排出していける流れが組めたりするあたりを取り上げます。

任せる領域
タスクをPullして、モブプログラミンをしながら、スプリントを何度か繰り返していると、自然と、この件については、この人といったお任せできる領域がでてきます。
その領域を持っている人を軸に置いたタスクの進め方がパターン化されてくると、周りの人がその人に弟子入りして、免許皆伝となり、次からはその人が軸となって…といった良い流れを作ることができます。
そういった観測も、モブプログラミングなら、いつでも自身が参加することができますから、状況を見て、この人に一度任せられるかもといった観測と、チーム自身からの発言をベースにして、構成していくことができます。
状況によっては、時間を短縮してなんとか仕上げたいといった特急的なタスクのときに、だれか個人でタスクを仕上げていただき、その人しか知らないという状況ができることもあるかと思います。
その場合でも、新に弟子入り制度を設けて、ペアプロ、モブプロを活用して、次の引き継ぐ人、免許皆伝となる者を作っていくことで、その人しか知らない単一障害点を防いでいく働きかけができます。

自身も含めてエンゲージメントを高める
ここまでの取り組みを通して、自身が組込まれていてもいなくても、自走するような流れを蒸留することができれば、自身もその流れに乗り、タスクを積極的にPullしていきます。

そうすることで、自身もエンジニアリングしながら、弟子を取ったり、弟子入りしたり、モブの一員でドライバしたりと、めくるめくエンジニアリング活動を継続することができます。

ただし、全体を俯瞰する視座を忘れてはいけません。

自走しているとはいえ、仕組みが健全であるかどうか、計測し続ける取り組みは必要です。

この俯瞰の視座は、チームの中で没頭すると見逃しがちですから、スクラムのふりかえりを効果的に計測とフィードバックの場として取り組みましょう。
仕組みを見直す観点の話題も定期的に取り入れながら、仕組みとしてトライを検討していく動きも必要と考えます。

まとめ
書きはじめると、とりとめもなく、あまり整理されていない書きっぷりに、自身も驚きと反省をしております… :sweat:

まとめると、自身はEngineerでありたいと言っても状況が許さないManagementを求められる場合、可能な限りチームが自走して自身のManagement対象がシステムに向くようになり、メンテナンスを定期的に施す状態を作ることで、エンジニアリングに集中できる環境を作ることは可能です。

それをどこまで続けられるかは、プロジェクトやプロダクトの状況や成長などフェーズによって受け入れられないことも、充分ありえます。
とはいえ、そこにチャレンジせず、漫然と今まで通りのマジメントを続けていてもだめで、Managemenにエンジニアリングを注入して、自身を保ち続ける取り組みにチャレンジすることは、とても大事だと思います。

以上です。

アジャイルとは無縁の組織の中で、エンジニアリング・マネージャーとして取り組んでいること
7

nnjyami

2018/12/04 23:16
この記事は Engineering Manager Advent Calendar 2018 の4日目のエントリーです。

世の中的にエンジニアリング・マネージャーが盛り上がっていますね。Advent Calendar も二つできて、両方いっぱいってスゴイ！

エンジニアを社内に抱えるインハウスの会社（社名は色々な事情で書けません...）でエンジニアリング・マネージャー的なことをしている んじゃみ @nnjyami と言います。
Advent Calendar に書かれている方々とは対照的に、弊社はアジャイルやスクラムは導入できておらず、また思想的な部分でもトップダウンな Management 1.0 体制です。
そのような環境に満足はしていないものの、少しでも自分とメンバーがしあわせに・楽しく、成果の出せる仕事をできる環境が作れないか日々模索中です。

エンジニアリング・マネージャーになるまで
つい 2 年ほど前までプレイヤーとしての仕事がメインでした。
少しずつメンバーが増えたり、僕が他部署やステークホルダーに説明をして、スケジュール調整なども行い、取り仕切ることも増えてきて、現状のエンジニアリング・マネージャー的なポジションに近い状態になりました。

一方で、ハードワークしたにも関わらず評価の得られない仕事、楽しいとは言えない仕事環境に思い悩みながら、本を読んだり PodCast を聴いていました。
中でも omoiyariFM の影響は大きく「世の中にはこんなにメンバーやチームのことを考えてマネジメントに取り組んでいる人がいるのか」とマネジメントやチームビルディングの意義・やりがいに気づきました。

omoiyari.fm (lean-agile podcast) #omoiyarifm
リーン / アジャイルが好きなふたりが、それらについて思いやりを持って語ったり語らなかったりする Podcast です。
lean-agile.fm
変わらない会社の体制に転職を考えたりすることもあります。
ただ今いる所でも、もっと楽しく・成果を出せる働き方ができないかと、アジャイル的なプラクティスやカンバンボードや 1on1 など可能な範囲で導入し、試しているのが現場です。

EM として大切だと思ったスキル
「スキル」という言葉が適しているかわからないですが、EMとしてメンバーに接する上で日々重要だと思っていることについて書きたいと思います。

・ コーチング
・ アクノレッジメント、コミュニケーション
・ 振り返り

コーチング
マネジメントに興味を持ち始めてから、同じようにコーチングについても学んでいます。元々、僕は職人気質な気性で、自分の意見を通そうとしがちでした。

押し付けられて、賛同できない意見の元では、メンバーが主体性を持って取り組むことは難しいと思います。
チームとして何かを進めていくとき、自分ばかりが答えを差し出すだけだはなく、時には相手の中から答えを見つけるようなコミュニケーションも重要だなぁと感じています。

アクノレッジメント（認知）、コミュニケーション
アクノレッジメントは「相手の存在を認める」的な行為で、コーチングのひとつのスキルでもあります。
普段のコミュニケーション・会話の中で、なによりもアクノレッジメントすること・または存在を否定してしまう言葉を使わないことを心がけています。

「褒めるのが苦手だな」という課題を持っていましたが、そんな時に読んだ本が褒めることも大切だけど、アクノレッジメントすることが重要だと教えてくれて、自分自身がコミュニケーションへ感じていたプレッシャーが和らぎました。


コーチングもアクノレッジメントも究極的にはコミュニケーションのメソッドだと思います。メンバーにモチベーション高く、仕事に取り組んでもらうためにも言葉選びや伝える順番に配慮するなど、丁寧にコミュニケーションを取ることが必要だと思っています。
モチベーションは一瞬で失われるけど、なかなか元には戻らないので...

気をつけている例
・相手の言葉に対して、いきなり否定するような言葉で返さない
・「普通」や「正しい」など価値観によって基準の違う言葉で評価しない
相手の言ったことを「いや、そうじゃなくてxxx」「ちがいますよ」と相手がそう思ったこと自体も否定してしまうので、言われた側としてはモヤモヤしてしまいます。

また「普通、そういうやり方はしないでしょ」みたいな言い方は、人によって「普通」が違うことを考慮せず、かつ相手の「普通」は誤りで、自分の「普通」こそが世の中一般の「普通」であるかのようなニュアンスを持ちます。
相手の存在を否定しかねない言葉を使うと、たとえ目的に沿った議論をしていたとしても、感情的な拒絶が起こりやすいのではと思います。

基本的にはみんな同じ目的のために日々働いているはずなのに、お互いストレスを与え合いながら仕事しているのはもったいないですよね。
僕自身も口下手で、決してコミュニケーションが上手いわけではないですが、最低限の言葉選びには気をつけています。

マネージャーになってから、仕事ってコミュニケーションが一番大切だなぁとしみじみ思います。ステークホルダー・上司だけではなく、メンバーとのコミュニケーションも大切。どちらか一方では上手くいきません。

受け手側の心理状態やモチベーションへの影響を考慮した上で、必要な情報を伝えていかないとコミュニケーションとは言えないように思います。

振り返り
振り返りを何でやるのか、はじめはしっかりと理解できていませんでした。ただコーチングセミナーなど受講するうちに、経験学習から効率よく学び、学習効果を最大化するためだとわかってきました。

ただ、アジャイルやスクラムなどへの理解があるメンバーが多いわけではないので、KPT などのフレームワークを使ってもイマイチ上手くいかないなぁと悩んでました。

先日、コーチングの手法に習い、自己採点型の振り返りをしたところ、思いの外、建設的な意見が多く出てきて、手応えを感じました。
数字を使って一度自分を客観視し、他人や環境ではなく自分への評価 = 自責として考えられたのが良かったのかなと思っています。

また、メンバーそれぞれの何を重要視しているのかという価値観の発掘にもなり、Manegement 3.0 の Moving Motivators 的な効果もありそうでした。もう一度やってみて、また上手く行くようなら別途ブログに書きたいと思います。

まとめ
長々と書いてしまいましたが、大抵の人は仕事を通して成功したり、いい成果を出したいと思って働いていると思います。エンジニアやデザイナーだとよりその傾向が強く、それが生きがいだったり、それぞれの目的に直結している人も多いように思います。

エンジニアリング・マネージャーの端くれとして、そういう正のエネルギーを曲げたり折ることなく、会社やプロダクトの目的と沿った形で発揮できる環境作りをして、一人ではできないようなイイ仕事をしたいなぁーと思っています。





エンジニアリングマネージャーになってから守っているたった3つのこと
この記事は Engineering Manager Advent Calendar 2018 5日目の記事です。

2018年10月にEM(Engineering Manager)なりました。

たった2ヶ月しか経過しておらず、何一つ成し遂げることができていないので、エンジニアリングマネージャーになってから守っている個人的なことを3つ紹介しようと思います。

やっていることは、この3つです。

規則正しい生活を送る
スキルを身につけ続ける
可視化してデバッグする
1. 規則正しい生活を送る
これが一番大事だと思っています。というのも、これから挙げる「スキルを身につけ続ける」も「可視化してデバッグする」も、規則正しい生活を送ってメンタルもフィジカルも健康でなければできないと考えたからです。

具体的には僕がやっていることは以下の２つです。

毎朝出社前にジムで運動する
早ければ22時、遅くても24時には寝る
ジムにはエンジニアとして働いていたときから通っていたのですが、マネージャーになってから毎日通うように切り替え、毎日通えるようなトレーニングメニューに切り替えました。

また、エンジニアとして働いていたときは家に帰って夜遅くまで調べ物をしたり、コードを書いたりしていて気がついたら朝日が。。ということが多々あったのですが、それもきっぱりとやめて早く寝て早く起きように切り替えました。

2. スキルを身につけ続ける
10月からMobileチームという、iOSとAndroidのチームが統合されたチームのマネージャーになりました。エンジニアとしてはiOSをメインにバックエンドやWebをやったりしていたのですが、Androidの経験はありません。

しかし、なにもやったことがない状態ではAndroidのチームメンバーから信頼を得ることもできません。なのでAndroidやKotlinの基本的な知識を学んだり、Pull Requestに目を通したり、リリース当番を担当するなど、少しでもその時間を取ってメンバーにも見えるようにしています。

マネージャーとしてコードを書くことは最優先のタスクではないので、周りに色々とカバーしてもらったりしながらも、少しずつ学ぶようにしています。

メンバーの30%が英語しか話せないメンバーなので英語もに学んでいます。

どちらも簡単に向上するスキルではないのですが、向上させる努力をしています。

3. 可視化してデバッグする
以前、プロジェクトリード観点でプロジェクトをリードする前に読みたかった本という記事を書きました。ブログの内容としてはエンジニアリング組織論への招待がオススメ&可視化大事、OKR本がオススメの2つを書いたつもりです。

さて、記事の中でこんなことを書いていました。

プロジェクトマネジメントや人とのコミュニケーション全て含めて「エンジニアリングだったんだ」というなんとなく気づきながらエンジニアリングと線を引いていた自分には目からウロコというか言われるまでそう認識することができませんでした。

EMになってからもこの視点は変わっておらず、組織やPJのデバッグを意識してやるようにしています（まだうまくできているわけではないです）。

これは決して機械のように人を扱うという意味ではなく、課題が出てきたときにログを取ったりすることで可視化して何が原因なのかをデバッグして解決していく、という意味です。

課題の原因をファジーにしてしまいがちなので、言語化やビジュアライズでなるべくそうならないように心がけています。

基本的なことではあるのですが、メンバーとのprivateなGoogle Docsを用意して、1on1で出てきた課題には必ずNext Actionを設定して、次の週に回答できるようにしています（Next Actionが実行できていないことがたま〜にあるのが改善点）。

実際に開発を行うエンジニアの代わりに、組織の課題をデバッグするのもマネージャーの役割だと認識しています。

まとめ
規則正しい生活を送る
スキルを身につけ続ける
可視化してデバッグする
以上3つでした。

この中でもやはり 1. 規則正しい生活を送る が一番重要だと思っています。1on1できちんと真摯に話すことはメンタルがしっかりしていないと難しいです。1on1が少ししんどい、と心の中をよぎったときは、18時くらいに帰って21時に寝たりしています。

EMも健康第一！

エンジニアリングマネージャを退いた話
エンジニアリングマネージャー
この記事は、Engineering Manager Advent Calendar 2018の06日目のエントリーです。

Engineering Manager Advent Calendar 2018
2016年某月からリーダー相当となり、さらに2018年04月から半年間、開発チームのマネージャとしてやってきた。しかしやり続けても成果を出す自信も、そもそもこれがやりたいことなのかという疑問もあったことと、なによりちょうどよくそれを託すに値する人がリファラル採用によって獲得できそうということが偶然にも重なり、マネジメントをやめたいと経営者に伝えたのが2018年10月。

そしていま現在、件の人にマネジメントしていただいており、これが機能していて、これがマネジメントなのかということを感じている。振り返るに自分には何が足りなかったか、マネジメントとは具体的になにをすることだったのか、ということを書きたい。

以下に

[すべきだったこと] 僕ができなかったこと
[もたらされたこと] 新マネージャが導入してくれたこと
として書いていく。

[すべきだったこと]いまチームがどの状態にあるかを知る
マネジメントに期待される事柄とは「チームをよりよくする」ことで、「企業の成長に寄与する」ことなのだと思う。ここでは後者は自明という点で無視する。前者の「チームをよりよくする」というところで考える。

「よりよくする」というからには「現在チームはどうであるか」ということを知らなくてはならない。
このとき主観的な状態、たとえば「技術的負債が……」などという ある程度認知されたつかいやすいそれっぽい言葉 が飛び交う状態はよくない。本当にチームとして知りたいのは「システムAの処理Bが非常に理解困難で改修すべきか運用でカバーするか、どちらがビジネスとして優先度が高いか」ということである。

つまりは 計測しよう ということだ。僕自身これができなかった。

[もたらされたこと]具体的な計測
大雑把でもいい。今現在チームのリソースがどのように割かれているかを知る必要がある。

開発
保守/運用
その他
という(たとえ大雑把であっても)はじめの一歩としてのメンバーそれぞれの工数計測が必要だった。ひいてはこの計測結果がプロダクト維持に必要なリソースということになる。

プロダクトの維持/成長のために、チームとして強化/補充すべき点はどこか
をまず知らねばならない。これはプロダクトそのものの健康診断とも言える。このあとになにを成すにせよ、チームの基準値はこの値になる。数値がよくなれば嬉しいし、悪くなれば別の方策を取る。この判断材料としての 計測が重要だと理解した。

[すべきだったこと]開発チーム内の構造/責務を明確にする
いびつな組織構造が同じ顔をしてシステム構造を制約する、というのがコンウェイの法則の警鐘点だと考える。開発チームの立ち位置、およびそれを管理するマネジメント職においても同じことが言える。

あとから考えるに僕には 制約をそのまま継承して改善しようとするという性質があるようで、本質から遠ざかったことをやっていたのだと考える。コンウェイの法則的に述べれば「いびつな組織構造を助長させている」と言えるよう思う。

組織構造は

Dev
|-- Prod-A(期待のプロダクト/比較的整理されている)
`-- Prod-B(売上主要/かなりレガシー)
となっていた。このときマネジメント職として期待される立ち位置は Dev に、メンバーは Prod-{A,B} にアサインされるべきである。また Dev に位置するマネジメント職は Prod-{A,B}の開発状況/進捗を理解していなければならない。これは当然であろう。

しかし僕の立ち位置は

Prod-B のリーダー、およびインフラ担当としての立ち位置
Devのマネジメント職としての立ち位置
であり、Prod-Aへの関与を最小限(というかほぼない)としていた。

また Dev という部署単位で企画されたことが部署に恩恵を与えた実感に乏しかったし、そもそも企画の数そのものが少なかった。

技術ブロクの開設
技術カンファレンスへのスポンサード
端的に言うと開発チームとして機能しておらず、また開発チームとして機能しているように見えても散発的であり積み上がっていく実感に乏しかった。

[もたらされたこと] 開発チームとしてのつながりとマネジメント職の独立
プロダクトごとに閉じない、開発チームとしての技術要素の標準化計画
Prod-A において新規基盤開発で知見を得る
上記知見を Prod-B へ横展開して可能な部分で切り出し改善する
週1回の開発チームとしてのMTG
タスク管理ツールの移行化計画
Prod-A Prod-Bを超えた進捗の共有
技術要素の標準化 につながっていく期待
僕自身は上記の時間をとったことがなかった。先述した Prod-Aへの関与を最小化したことに起因する。そもそもMTGが嫌いというのと、抱えている問題が違うということからコミュニケーションコストが高いと考えたこともある。しかしそれは 管理ではなく結局のところ属人性を助長したに過ぎない。これは 「いびつな組織構造を助長させている」の具体的事例だ。

[すべきだったこと]開発チームと関連部署(ビジネス側、CS側)との責務を明確にする
たとえば Prod-Bにおいて責務は非常に曖昧なものだった。端的に申せば最終作業者にしわ寄せがくる構造といえる。2016年当初からこの点を非常に危惧しており、そして危惧すればするほど自身の開発リソースが食われるということを感じていた。その一方で危惧を改善する行動が継続せず(これもまた)散発的に終わることがほとんどだった。包み隠さず申せば「実りよりも混沌をもたらすただ声の大きい細かい人」というのが、実態だったのではなかろうか。

[もたらされたこと] 開発への希望/要望の交通整理
希望/要望管理ツールの統一化
過去利用ツールは(ツールの問題というよりは運用上の問題で)大変使いにくい状態だった
過去の濫造されたタスクがあり、「2018年10月においてこのタスクは重要なの？」という精査が全くなされていない状態だった
希望/要望の現時点での洗い出し
2018年10月現在で必要なもの
重要度の設定
それぞれに担当者をアサイン
ツールを管理する交通整理者のアサイン
当該担当者同士のMTGによる少人数でのビジネス的意思決定
それぞれの部署のインターフェースをきちんと定義して、責務を切り分けることに成功したように実感している。これには感謝しかない。

[本当に必要だったこと] なにかを決めなければならない
最後に根本として必要だと感じていることを述べる。それは 決めなければならないということである。決めなければならないというのが僕自身本当に苦手で、なぜ苦手かといえばその決断に 他者が影響するからである。
そもそも本当に僕が苦手なのは 他者に何かをやってくれとお願いすることである。「嫌だなあ」という相手に「必要なことだから」と伝えることが本当に苦手だ。なぜなら「嫌ならしょうがないよな」と考えるからである。

この点を踏まえると僕はいつまでたっても「いい兄貴問題」の中にいたに過ぎない。

局所最適化するから「いい兄貴問題」に陥る - 違反ヒントはありません
過去に書いたこのレベルから一切進歩していないということを感じている次第である。その一方でだからといってどうだということを考えるわけではない。単に向いていなかったという言葉ですませたい。

[これからできること/本当にやりたかったこと] 得意領域でプロダクトの改善を行う/マネジメントを後押しする
思うに僕のやりたかったことは

得意領域でプロダクトの改善を 自らの手で行う
に尽きるのだと思う。コードを書きたい、ITインフラを整備してよりクラウドネイティブにしたいなどなどを誰かに任せたいなどと言えない。この思いを抱えたままマネジメント職を両立させるのは、少なくとも僕には無理だと感じた。ので退いた次第である。

その一方でITエンジニア(というより一社員)として思うことは

わたしたちは管理されたくないわけではない。「正しく管理されたい」だけなのだ
ということである。新しく入社された方とマネジメント職を交代し、先述した内容の数々を実施していただいたいまこそその実感がある。この状態を維持強化していきたいと強く感じ、そのためにできることはなにか探していきたい。

マネジメントスタイルは対象となるメンバーだけでなく、時々の状況や幾つかの要因によって変えるべきものだという話です。

本記事は『HIGH OUTPUT MANAGEMENT』を読んだうえで自分の観測範囲と経験に照らし合わせた感想なので、詳細が気になる方は同書の第12章を読むことをおすすめします。

マネジメントスタイルとは
まず、ここでいうマネジメントスタイルとは何か。

マネジャーが部下をマネージするやり方、というと同語反復が過ぎるので、イメージしやすいように極端な例を2つ出してみます。

マイクロマネジメントとは
マイクロマネジメントとは、マネジャーが部下や従業員の業務を緊密に観察する and/or コントロールしようとするマネジメントスタイルである。

マイクロマネジメントは職場における自由の欠如を示すことから、一般的にはネガティブな含みを持つと考えられている。

https://en.wikipedia.org/wiki/Micromanagement より (訳：筆者)

詳細な批判は以下の記事でも詳しいです。

https://www.thehrdigest.com/real-cost-micromanagement/

たしかにマイクロマネジメントは以下のように言われ、忌避されることが多いです。

階層秩序体系が決まりきっていたような前時代の遺物（＝現代ほど複雑で変化が早い状況下では使うべきでない）
自由度の低い指揮統制型（＝自己組織化されていない組織）の組織が使うもの
自由と裁量を与えるスタイル
一方、『NETFLIXの最強人事戦略～自由と責任の文化を築く～』や『WORK RULES!』に記されるような、メンバーの自主性を重んじて自由と裁量を積極的に与えるマネジメントスタイルがあります。

的確に言い表す一語を寡聞にして知らないのですが、"micromanagement antonym"でググってみるとマイクロマネジメントの対義語としてはマクロマネジメント、ミッションコマンド等があるようです。（あまり聞かないですが）

このスタイルないしはその背景にある文化がいかにして華々しい成果を生んだかという事例は度々取り上げられ、マイクロマネジメントとは打って変わって比較的ポジティブに捉えられる風向きがあります。

また、これは私の観測範囲だけかもしれませんが、マイクロマネジメントやそれに近しいスタイルへの反動からか殊更に称揚されていると感じる場面もあります。

どちらが良いか？
現実的には常にどちらに当てはまるということでもなく、グレーゾーンが広く存在しています。

『HIGH OUTPUT MANAGEMENT』によれば

(マネジャーは) マネジメント・スタイルの良し悪しをではなく、それが効果的か効果的でないかの判断を学ばなければならない。

マイクロかマクロかという二極で語るべきではない、どちらが良いか？という問い自体がナンセンス、ということです。

なぜならマネジャーの本質的な職務はマネジメントスタイルを逐一取り上げて良し悪しを判断することではなく、成果を挙げるためにはどのスタイルが効果的かを考えることだから、と。

また、同書の主張とは逸れますが別の観点としてチームや会社としての方向性を踏まえて選択されるべきもの、という考えもあると思います。自由と裁量が最大の成果を生み出すチームもあれば、"不確実性"の少ない仕事を秩序立てて計画的にこなしていくことが重視される組織もビジネスも存在するということです。

このように「不確実性」の削減が少ししかできない「具体的で細かい指示」を必要とする組織を「マイクロマネジメント型」の組織といい、「不確実性」の削減をより多く行うことができる「抽象的で自由度のある指示」でも動ける組織を「自己組織化された」組織といったりします。

『エンジニアリング組織論への招待』より

マイクロマネジメントを忌避した失敗例
「状況に応じて都度判断するべきだ」などと言うとあまりにも当然自明のことすぎてピンとこないと思うし、現に私もそう思ったので、"適切に判断できなかった"例を『HIGH OUTPUT MANAGEMENT』から引用します。

いつも傑出した仕事をしていた私の同僚のひとりがある若手を雇い、古い仕事の一部を任せて自分自身は新しい仕事にかかることにした。その部下は仕事がうまくできなかった。その同僚の考え方はこうだった。「彼は自ら間違いを経験しなければならない。そうして次第次第に覚えてゆくものなのだ」と。この場合の問題は、部下の授業料を顧客に払わせていることにある。これは絶対に正しくない。部下に物事を教える責任は必ず上司が負わなければならないし、組織の内外を問わず、顧客が支払うべきものではない。

こうしたいわゆる誤った放任について考えてみると過去に似たようなケースを経験ないしは目撃したという人は多いかもしれません。

開けたマネジャーはこういううるさいやり方 (※筆者注: マイクロマネジメントのこと) は使うべきでないように考える。結果として、手遅れになってどうにもしようがなくなるまでそれを取り上げようとしないことが多い。

マネジャーのありがちなアンチパターンとして、自らの不安のためにマイクロマネジメントしすぎる、もしくはマイクロマネジメントを嫌って放任しすぎるというのがあります。

私の場合は後者で、Engineering Manager になった直後には自分のやるべきことは「以前と変わらず同僚として接する（全てをそのまま任せる）こと」だと考えました。また、それを旧知のメンバーだけでなく新しく入社したメンバーにも適用しようとし、思いとどまってやめました。信頼や尊敬という言葉を盾にしつつ、何もマネージしない（パフォーマンス最大化のためにできることをやらない）というのは効果的な振る舞いではないと思い直しました。

では、何によって判断すればよいか
基本的変動要因はタスク習熟度
効果的なマネジメントスタイルを決定する基本的変動要因は従業員のタスク習熟度（Task Relevant Maturity: TRMと略している）であると『HIGH OUTPUT MANAGEMENT』では語られます。これには非常に納得感があります。

タスク習熟度 低：タスク志向。何をいつどうやるかを明示する（マイクロマネジメント寄り）
タスク習熟度 中：個人志向。双方向のコミュニケーションを行い、お互いの判断力を重視する
タスク習熟度 高：マネジャーの関与を最小限にする。目標を設定し、モニターする
単純にスキルと言わないのはここでいう"タスク"が特定の作業環境における特定の作業を指すためです。

たとえば、高いスキルを有するソフトウェアエンジニアでも入社or異動した直後から歴史あるアプリケーションのコアロジックをごりごり変更できるわけではない、みたいなケースを考えます*1。このときのタスク習熟度は「低」なので、手取り足取りの作業指示がオンボーディングとしては効果的となります。やっていることはマイクロマネジメントにも近しいものの、ここでは否定的には捉えられず、むしろ必要な情報が提示されることで短期的にも長期的にも成果を上げることに寄与していると考えられます。

タスク習熟度は予測が難しい
これまた観測したことがある方は多いと思いますが、高いパフォーマンスを発揮する社員にまったく異なるタスクをアサインしたら急激にパフォーマンスが低下したとか、その逆のパターンがあります。人が複雑な業務を行うとき、当人のタスク習熟度（＋後述するその他の要因）によってパフォーマンスは容易に変動してしまいます。

だからこそ低い方への変動をなるべく抑える活動が求められるというわけです。

タスク習熟度以外の変動要因
実際にはタスク習熟度以外にも要因が存在します。

モチベーションとか体調とかチームメンバーの様子とかプライベートの悩みなど様々で、挙げればきりがないかもしれません。

これらに応じて適切なマネジメントスタイル*2は刻々と変化する、ゆえにどんなときでも誰に対しても適切なスタイルは存在しない。

これがマネジメントの難しさの一つだと言われます。

スタイル一貫性への期待
どんなときでも誰に対しても適切なスタイルは存在しないから臨機応変にやりますと決意したとして、「あるときは自由と裁量を与え、あるときは事細かに指示する」ようなマネジャーをどう思うだろうか？

上述したようなスタイルの可変性が十分に理解されていなければ、「普段は裁量を大きく任せると言っておきながらマイクロマネジメント寄りのことしてる」と反発されるもやむなく、一貫性に欠け、信頼を置けない人のように思われるかもしれない。

現実には一貫性の欠落と認識させないほどにスタイルをうまく使い分けるマネジャーもいますが、それこそ"スキル"なので磨かなければ得られないものだと思います。

（余談ですが「マネジャーの9割は実際以上に、部下たちが考えている以上に自分自身のことをコミュニケーションの良い人、権限委譲をする人だとみなしがち」というデータがあるそうです。この残念かつ一般的な食い違いもまた、スタイルの可変性の理解不足に一寄与してしまっているのでは。）

福沢諭吉の哲学
脱線です。

多面的で変幻自在な、しかし安易なプラグマティズムとも異なる思考様式は福沢諭吉の哲学に見られるものでもあります。

一見して一貫していないように見えても軸はブレずに変化に対応できるスタイルは常々実践したいと思っておりまして、そのあたりの話は以前に EMFM という podcast に出演させていただいたときに語らせてもらいました。


anchor.fm

興味があれば岩波文庫『福沢諭吉の哲学』を是非どうぞ。

今すぐやれること
以下を伝えるところから。

自分のマネジメントスタイルはタスク習熟度やその他要因によって流動的に変わるものである
取りうるスタイルには"あなた"が嫌うかもしれないマネジメントスタイルもあるだろうが、それを行うには理由がある
納得いかない場合はマネジャーの説明不足なのでフィードバックがほしい
相互理解、というとこれまた至極当然に聞こえてしまうのですが、先に書いたようにマネジャーは「自分はよくコミュニケーションしている」と思いがち問題がある*3のでやりすぎぐらいが丁度良いのだと思います。マネージャはオーバーコミュニケーション気味で。

究極的には上記を伝えずとも相手に変化を悟られないほどあまりにも鮮やかで変幻自在なスタイルで成果を挙げさせるような凄腕になりたいところですが、そうしたマネジメントについてまだまだ自分のタスク習熟度が低いのでmanageされたいところ。

Engineering Manager Advent Calendar 2018 7日目の記事でした。


qiita.com

*1:世の中にはできる人もいるのですが、一般的には

*2:スタイルというより接し方・コミュニケーションなどと言ったほうがここではイメージに近いのかもしれない

*3:自分もやっていないので反省しつつ書いてます

この記事は Engineering Manager Advent Calendar 2018 8日目の記事です。

こんにちは。ユアマイスター 星（@inase17000）です。

今年読んだ本の中で最もインパクトを感じているのが「エンジニアリング組織論への招待」で、Engineering Manager*1になりたい（でありたい）と強い衝動に駆られた一年でした。

僕自身、2017年3月からユアマイスターで働き始めてからを思い返してみると、「エンジニアリング組織論への招待」に書かれていたような問題に直面することがありました。

今回は、「最初から知識として持っていたらもっとうまく解決できたのか？」というタラレバ話はあまり意味がなく、全力で駆け抜けてきた自分を少しだけ褒めてあげながら、とあるスタートアップでこんな「あるある話」があったよ、というのをEngineering Managementの観点から振り返ってみようと思います。

エンジニアが1人しかいない初期フェーズ
ユアマイスター自体はエンジニア0人で起業された会社です。創業当時は開発会社にアウトソースする形で初期の「あなたのマイスター」の開発を行っていました。

その状態から、開発体制の内製化に向けて、開発環境の引き継ぎや案件の切れ目のコントロールなどから関わり始めた、という感じです。まだメンバーがいないということもあり、Engineering Managementする相手は主に自分になります。

この時期に強く意識していたことは、とにかく「無駄なものを作らない」ことです。エンジニアの数が少ない＝リソースが最小であるということ。つまり、サービスの立ち上げ時期において、有限の時間をどう使うかが、プロジェクト成功可否を決めるかなと考えていました。

まだ立ち上げ直後ということもありシステムの複雑度は低く改修は容易で、アクセスも全然なかったのでパフォーマンス面も気にしていませんでした。改修要件は明確なものが多く、とにかくスピードを意識していたことを記憶しています。

開発速度にフォーカスして進める一方で、マーケットに受け入れられるか（マーケットの不確実性）に保証がない状態が続くため、できるだけ安心な方向に倒しておきたくなります。前職で盛大に、ユーザーが全然使わない機能を作り上げた経験と反省を持ってユアマイスターにjoinしていたこともあり、特に意識してプロダクトに向きあっていた点でした。

無駄なものは作らない
無駄だとわかったら、即効で退却する
そのときには直感的にやっていたことではありますが、要件をできるだけ小さく切り出し変化に対応できるような開発を繰り返していました。目的不確実性をいかにコントロールできるか、ということがテーマだったと後々本を読んでから言語化できたものでした。

エンジニアが2〜5人に増えたフェーズ
少しずつ仲間がエンジニアが増えていきました。スタートアップ独特の高揚感で毎日があっという間に過ぎて行きます。

幸い、メンバー間のいざこざや無益なマウンティングを取るようなイベントは発生しなかったものの、ユアマイスターはインターンも多くいるため、若手社員もいきなり後輩がいる状態でスタートするというカオスになりやすい状況。

無駄が起きないよう、開発のチケットをレベルや経験に合わせて一人ひとりに渡していたんですが、どうしても目の前のことに集中してしまって、同じようなミスを繰り返したり連携不足により手戻りが発生したりしてしまいました。

そこで真っ先に始めたのは1on1でした。週に1回〜2週に1回のペースで30分、開発業務から離れてひとりひとりと向き合う時間を作りました。

各個人のリフレーミングを促すレベルには達するのはなかなか難しく、沈黙が怖くて自分が喋りすぎてしまうことも。今ひとつ手応えを感じない1on1を過ごしました。

後で本人たちからフィードバックを聞いてみると、話せる時間が持てるのが良かった、という「エンジニア→僕」の情報伝達の場としては成功していたようですが、それをうまく引き出す安心感のある雰囲気づくりは及第点だったと思います。

1on1大事。時間かければいいというわけではなく、エンジニア自身がどれだけしゃべるか
一緒にパズルを解いてあげるのではなく、パズルの問題の構造を明らかにする手助け
そんなことを学べた時期だと思います。偉そうに書いてますが、ほんとまだまだだと自覚してるので、今後も改良を加えながら続けていきたいなと思います。うん、難しい！！

前にストレングス・ファインダーで調べた僕の強みを調べたことがあるんですが、

ポジティブ
成長促進
回復志向
達成欲
信念
という感じになっていて、「成長促進」が上位にあることがわかっていたので、他メンバーへの考えるきっかけを与えるような時間は楽しくてたまりません。それが結果として成長につながっているのかというのは目に見えるパフォーマンスで判断していくしかありませんので、定期的に向き合う場は大切にしていきたいです。

エンジニアが6人以上のフェーズ（イマココ）
一人ひとりのエンジニアに向き合うことよりも、プロダクトに向き合う時間が増えたというのが正直な感想です。自分がコードを書かずに他のエンジニアに任せ、徐々に自分は少しだけ先のことを考える時間をもらえたのもこのタイミングになります。

実は、僕はもともと１人でタスクを抱えがちになる性質を持っているので、前職ではいっぱい怒られていました*2。自分の弱い部分を見せたくないという防衛本能が働いていて、勇気を出してチームに曝け出せない。

問題が起きているのに時間が経てば立つほど、選択肢は減っていく。個人の重荷が増えていく。そんなチームはいやだ！楽しくない！

あえて自分を逆に振るために考えたテーマは「On the table」。これが僕の支えになっています。

みんなのテーブルの上に全部出しきってから、どれが一番いいかみんなで考えようよ、ということです。丸裸。ここでいうテーブルは、四角いテーブルではなく、丸いテーブルをイメージしています。

f:id:yourmystar_engineer:20181208090745j:plain 裏紙ですみません。

セールス、ディレクター、エンジニア、いろんな立場の人が四角いテーブルに対してそれぞれ真正面から向き合うことに抵抗を感じるのではなく、ただ一つの中心点に向かう丸いテーブル（円卓）に集まり、全員のポケットの中身を出し切って、それらの中で一番いいと思われるアイディアを形にすることに時間を使いたいという思いでした。

実際は円卓があるわけではないので、付箋に書き出して貼りだしたり、会話しながらホワイトボードに書いて見える化したり、とにかく同じものを見て感じたことを口にするということを都度繰り返しました。チームでも少しずつその癖は拡がってきていると感じていて、立ち話からホワイトボードに移動する様子をよく見かけます。

チャットで話して3ラリーくらい続けてるのを見つけると「直接話そう！」と集まることをしつこく繰り返しました。URLや資料を貼り付けたいシチュエーションじゃない限り絶対、超高速音速伝達技術*3である「直接の対話」に勝るものはありません。

これからもっと人数増やしていくとキツくなるんでしょうが、それでもやっぱり対話にこだわっていきます。

まとめ
人数規模に応じて少しずつ、チームメイト同士の会話は時間が減っていくことは避けられない。(n角形の対角線の数はn(n-3)/2本！二乗の関数)

いまのところ僕らのチームは、情報の非対称性をなくすことが全員のパフォーマンスを最大化するための最初の取り組みだったかなと思います。

具体的には、

1on1で自省を促す
アウトプット中心の行動喚起
コミュニケーションが作りやすい機会設定
そんなことをやりながら、激動の2年間をエンジニアたちの手で支えてきました。（まだ続いていますがｗ）

僕自身が途中からコーディングから離れたという経緯＋劇刺さりな本に出会うことがあった2018年。少しだけEngineering Managerに近づけたと思います。

最後に、この前 #EM.FM の話題にあった、Engineering Managerはスーパーマンじゃない。本当にそうだなと思いますw

管理する人っていうイメージはきっといらなくて、なんとかする人なんだよ、って考えるようになりました。

Engineering Managerは、Engineering で事業や会社やプロダクトを「なんとかする人」だという信念を持って、チームのために貢献していきたいと思います。

以上、ありがとうございました！

*1:Engineering Managerってなぜか英語で書く人が多いのはなぜなんだろうか。。。まだ答えは出ていないが、合わせます

*2:今も時折みんなに怒られますｗ

*3:Joy,Inc.の受け売りです

この記事はEngineering Manager Advent Calendar 2018の9日目の記事です。 vol.2もあるので、是非こちらも見てください。

f:id:yunon_phys:20181003000204p:plain

私は常日頃、Engineering Manager(EM)がいない問題について危機感を覚えている。 これはEMという役割が正しく認知されておらず、魅力が伝わっていないことが根本の原因にあると考えている。*1 だから、EMの魅力を伝えるPodcast EM.FMを広木さんと始めた。*2

このPodcastでは、EMが何を考えているのか、EMも人間だから悩みながらやっていること、EMが何に喜びを感じるのか、などを語っている。メインパーソナリティは広木さんと私だが、Quipper EMの大庭さん(id:ohbarye)、元Googleの及川さん(id:takoratta)、VOYAGE GROUP CTOの小賀さんにもゲストとして過去に出演いただいた。出演者全員に共通しているのは、EMとしての業務を楽しそうに語っていることだ。だから、EMは本来楽しい役割のはずなのだ。

なのにEMの業務が、エンジニアのマネージャーという言葉に置き換わった瞬間に、急激に魅力が失われる。 この違和感は何からくるのだろうか。

マネージャーは不要である
EMについて話す前に、そもそもの私のスタンスを明らかにしておく。 私はマネージャー(EMだけでなく、XXXマネージャーと名乗る役割)は本来不要だ、と考えている。 正確には、マイナスをゼロに補完するマネージャーは不要だと考えている。

マイナスをゼロに補完するマネージメントの代表例は、マネージャーがコミュニケーションのハブになるというものだ。 例えば、インフラエンジニアとアプリケーションエンジニアのコミュニケーションがうまく取れずにプロダクト開発がうまくいっていない、という状況を仮定する。その間を取り持つために、インフラ部門のEMとアプリケーション部門のEMをたてて、その2人で話し合うようにする。するとコミュニケーションがうまく取れるようになり、プロダクト開発が一時的にうまく進められる機運が高まる。しかし、次に待っているのは、そのEMがSPOFになる未来だ。つまり、コミュニケーションがうまく取れない、というマイナス課題をEMがゼロにしただけで、プロダクト開発がプラスになったわけではない。本来やるべきは、インフラエンジニアとアプリケーションエンジニアが直接対話出来るようなチーム構成を組み、それぞれの強みを活かせるように、より良いプロダクト開発を継続的に生み出せる環境を整えることなのに。

多くの"なりたくない"マネージャー像は、このマイナスをゼロに補完するマネージメントをしている人ではないだろうか。 マイナスをゼロに補完する役割をすると、人と人との間に入り、神経をすり減らせながら、日々を過ごさなければならない。 もしこれが毎日の仕事なら、私も到底魅力を語れないし、まるで魅力があるように語って引き込もうとする死神のようなことは出来ない。

Engineering Managerは何をする人なのか
良くEMと話すと、評価・1on1・採用の話題になる。

評価をどのようにすれば良いか
どうすれば1on1がうまくいくようになるか
どうすれば魅力的な人材を採用出来るか
などなど・・・。 正直な話、これらを語っているだけではEMが魅力的な役割にうつらないだろうなと考えてしまう。 まさにマイナスをゼロに補完するマネージメントをやっているように聞こえるからだ。

エンジニアは職業柄、ボトルネックを改善したり、ものごとを構造的に考えるのが得意だ。 だから、エンジニアとしてのバックグラウンドを持っているEMは、そのスキルを対コンピューターではなく、対組織にフルに活用するべきなのだ。 そういう意味で、組織のボトルネックを見定め、組織を構造化して捉えて最善な方向に導くのが、EMの役割とも言える。*3

もし組織課題がエンジニアのマネージメントであるなら、EMがそれにフルコミットするのが良い。 裏を返すと、全員が評価に満足しているのなら評価の話題をしないで良いし、いつでも困ったことを相談出来る関係性を築けているのであれば1on1もやらなくて良いし、既存のメンバーで理想の未来を描けるのであれば採用も不要である。 真の組織課題を見ずに、EMの仕事として評価・1on1・採用をもしやっているのだとしたら、危険信号かもしれない。

Engineering Managerは役割である
EMがエンジニアのマネージャーでないのだとしたら、そもそも上司という概念すら疑わしくなる。 エンジニアがプログラムを書くように、UIデザイナーがUIデザインするように、EMも組織をマネージメントする役割を担っているだけである。 そこに上司や部下という関係は存在しない。 私がこの記事で一貫して、EMを役割と言ってきたのはこの思想があるからだ。

一般的なEngineering Manager像は職能別組織によって生み出された？
では、なぜEMがエンジニアのマネージャーだと一般的に言われているのだろうか。 これは多くの組織で、エンジニア組織、デザイナー組織、マーケティング組織、のように職能別組織を構成していて、その職能別組織単位で権限の分断がされているからではないだろうか。 もしそうだとしたら、職能別組織の中で出来ることが、スキルマネージメントとピープルマネージメントしかないので、EM = エンジニアのマネージャーとなるのは納得がいく。 職能別組織は知の深化が進むことはメリットだがコンピテンシートラップ(イノベーションを引き起こす力が弱くなる)を引き起こす、と言われていて*4、そもそもその組織構造そのものがボトルネックになっている良い例かもしれない。

Engineering Managerって結局何する人なの？
EMについて考えれば考えるほど、奥が深いことがわかる。 一言でこれをやる人である、と定義するのはどうやら難しそうだ。

最近、Engineering Manager Meetupコミュニティで、EMのjob descriptionを作ろうという提案をした。 job descriptionについては、EM.FMの及川さんの回で出たものだ。


anchor.fm

うまくいけば、日本のソフトウェア業界のEMの定義がこれで出来るかもしれない。 もしそれが出来たらEMの魅力をもっと広められるだろうな、と今からワクワクが止まらない。

*1:この話は既に、過去の記事で触れているので、そちらをご参照ください

*2:控えめに言って、このPodcastはEMにとって最高のコンテンツだと思っている

*3:このあたりの話は、EM . FMでも広木さんが良く発言している。

*4:『エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング』5章

おはようございます。いしげ（@oturu333）です。

このブログは Engineering Manager Advent Calendar 2018 - Qiita 10日目の記事として書いています。



一般職からエンジニアリングマネージャーになり1年くらい経ったときに「ここでしかマネージャーができないんじゃないか」という思いになったことがあります。

知っている会社、プロダクト、メンバーだからできているだけじゃないかと。

そう思ったのは自分のやっていることを抽象化できなかったからだと、今になって思います。



その後コンサルティングに同行させていただく機会があり、外部の組織、人へのアプローチの仕方を間近で見て、コンサルティングの手法は新しい現場でマネージャーになるときにも使えるなと感じました。

今回はその学びをアウトプットしていきます。

エンジニアリングマネージャーの仕事だと思っていること
一言で表すならば、環境整備、仕組み作りだと思っています。

組織の三要素を満たす環境創り
共通の目的をもっていること（組織目的）
お互いに協力する意思をもっていること（貢献意欲）
円滑なコミュニケーションが取れること（情報共有）
スループットをあげるための仕組み作り
成長実感やビジネス貢献を感じられる仕組み作り
継続的な改善活動を行うための仕組み作り
etc
これをはじめましての現場でやるにはどうしたら良いのか。

新しい組織に入って一番やってはいけないと感じていること
過去すべてやったことがあることですが、以下のようなことを気をつけています。

べき論だけで議論すること
相手の知らない言語、舞台で話すこと（エンジニアではない人に対して）
受け身になってしまうこと
決めつけてしまうこと
逆に言うとこれらをしないということになるので「積極的にファクトを洗い出し、課題を見つけ、相手に分かりやすい言語で伝える」というプロセスを意識しています。

積極的にファクトを洗い出す
人を知る
一緒に働くメンバーがどんな人で、どんな技術があって、どんな仕事をしていて、どんな悩み、課題を持っているか。まずはそのあたりが知りたいです。

ただ「教えてください」と言っても話してくれる人は少ないと思うので、まずは自分から話すようにしています。

自分のキャリア、書いたブログ、こんな事を考えている、こんなことが得意 / 苦手だ、お酒が好きだ、こんな失敗をした、などなど。なんでも良いので、この人に話しても大丈夫だという信頼を得る努力をする必要があります。

主にやっていることは以下のようなことです。

Slack の雑談板で一人語りしてみる
ランチに誘ってみる
なにか悩んでいることを話してくれたら、一緒に解決策を考える
やると言ったことは必ずやって報告する
歴史を知る
新しく入った人にとっては不思議に感じるプロセスや文化も、だいたい歴史があります。

頭から否定するのではなく、その経緯や理由を詳しくヒアリングするようにしています。

ヒアリングをする際には以下のようなことを意識しています。

認識齟齬にならないよう、あいまいな言葉は意味やアウトプットを確認する
矛盾を感じるところは深く話を聞いてみる
歴史、現状と合わせて課題感を話し合い、認識を合わせる
議事録は終わった直後にパブリックな場所で共有する
あいまいな言葉は「大変」「複雑」「忙しい」というような個人によりけりなものだけではなく、一般的な言葉にも潜んでいます。

例えば「システムテストをしています」と言ったとして「システムテストだからこんなことをやるんだろうな」ではなくアウトプットまで見ないと認識がずれたりします。

総じて無邪気に、興味をもって話を聞く
誰かに何かを聞くときに「それってなぜですか？知りたいです！教えてください！」の姿勢が大事です。

例えば「どう考えてもおかしいなぁ」と思っても、斜に構えずに聞く姿勢のほうがお互いに話しやすいですし、提案も通りやすいからです。



「謙虚なコンサルティング」を読んでからこれを意識するようになりました。

謙虚なコンサルティング――クライアントにとって「本当の支援」とは何か
謙虚なコンサルティング――クライアントにとって「本当の支援」とは何か

作者: エドガー・H・シャイン,金井壽宏,野津智子
出版社/メーカー: 英治出版
発売日: 2017/05/17
メディア: 単行本
この商品を含むブログ (2件) を見る

課題を見つける
環境整備、仕組み作りでいかに解決できるかを考えます。

すぐに100点になる必要はなく、最低限今より良い方向へ、最終的にこうなりたいまで考えられるようにしています。

相手に分かりやすい言語で伝える

nekonohitai.hateblo.jp

例えばこのプロジェクトを提案したとき「サポート切れてるフレームワーク使ってるとかダメでしょ」と言っても伝わらない状況だったので、提案資料では技術的な観点にはほぼ触れませんでした。

サポート切れの状態のままでいることで起こりえるおそろしいできごと（例：エンジニアのモチベーションが下がることによる離職率増や伴って採用、育成にかかるコスト増）など、相手が共感できる話題を探して承認をもらいました。

まとめ：最終ゴールは「相手に動いてもらうこと」であることを忘れない
組織に属していると、人や組織との関係が深くなるにつれ感情的になり、主張をおしつけあってしまうことがあると思います（私はこれが大いにあります）。

ただ、コンサルティングに同行して強く感じたのは、私が本当にやりたかったことは「相手に動いてもらうこと」だったということです。

動いてもらうというのは「承認してもらう」「一緒にやってもらう」「誰かに何かをやってもらう」などです。

このゴールを失わないための姿勢を、コンサルティングから得ることができました。

エンジニアリングマネージャのスキル習得
アジャイル
マネジメント
スクラム
エンジニアリングマネージャー
EngineeringManager
序文
このエントリーは Engineering Manager AdventCalendar 2018 の 11日目の記事になります。

筆者とエンジニアリングマネジメントの関わり
現在、サーバサイドエンジニアのエンジニアリングマネージャという肩書きでエンジニアリングマネージャをしています。
現職ではエンジニアリングマネージャはピープルマネジメント中心とした役職です。
前職でもエンジニアのマネジメントするポジションで、技術に関する部分のプロダクトマネジメント、プロジェクトマネジメント、ピープルマネジメントなどの全ての責任を持っており、チームに居るエンジニア全体をマネジメントしていました。

前職では２つの事業立ち上げと既存事業の途中から参加した３つの事業での開発マネジメントに順番に携わっていました。
今は大きな組織の中で数名のエンジニアを担当するエンジニアリングマネージャをやっています。

このようなエンジニアマネジメントのポジションに就いてから4年半ほどが経ちます。
ゼロイチでチーム文化から作るところや成果が出なくてスケジュールギリギリで走り続けたり、長く運営されたチームに入り文化変革をしたりなど、いくつかの入り方でチームに入り、自分の得た知識をいくつもチーム内で実践してみたりしてきました。

最初の頃はスクラムなどのアジャイル開発の知識もなんとなくはありましたが、長くマネージャ職を続けていった時に、完全にマネジメントに振り切って勉強しようと考えてから２年程度が過ぎました。
その切り替わりの時期で感じた、マネジメントのスキルを勉強して習得することを意識しながら、よく区分けされるマネジメントについて書こうと考えました。

今回は技術のエンジニア側から既存マネジメントが組み合わされたものを見ると、どのような観点で対応する必要があるのかの考えを書いています。

想定読者
エンジニアリング x マネジメント に興味がある人
片方ではなくて、両方同等に知識として欲しいと思う人

エンジニアリング x マネジメント
マネジメントを学ぶ習慣のないエンジニアではエンジニアリング + マネジメント (エンジニアが足しているだけ) になっていて、それはエンジニアの力の最大化にはならないと思っています。

マネジメントとエンジニアリングは掛け算の関係であり、最終的に完成するプロダクトを何倍にもする力があると信じています。
エンジニアリング x マネジメント (掛け算)にすることで、その価値を作り上げられるエンジニアは楽しく喜びを得られると共に最大のパフォーマンスを発揮すると信じています。

エンジニアの技術を持っているからこそ出来るマネジメントが全てのマネジメントの中に存在していると考えていて、いくつかの領域のマネジメントの考えを書いてみました。

今回の領域は
プロダクトマネジメント
プロジェクトマネジメント
ピープルマネジメント
についてそれぞれの観点で書いてみました。

プロダクトマネジメント x エンジニアリング
プロダクトマネジメントとは
プロダクトを何を作るかを決める作業になります。つまり作るべきものの目標そのものを決めるマネジメントです。
理想だけでは目標は達成できないため、ビジョンからリソース(人・モノ・金)を考えて実現性のある機能提供の目標を作ります。

高速で移動がしたい！と考えたときにF1カーを作るべきか、軽自動車を作るべきかはその時によります。
軽自動車のコストでF1カーは作れないので、そのバランスを見極めることこそプロダクトをマネジメントすることです。

プロダクトマネジメント x エンジニアリングとは
実現性の部分でより精緻な審査が出来るのはエンジニアだけです。
仕様を聞いた時に実装するべきデータフローが瞬時に浮かぶ技術のレベルが必要になります。
また、実現する実装方法についてアイデアマンである必要もあります。

価値 > コスト → 本当のコストがわかるのはエンジニアだけ
提供スピードが早いほど価値を大きく出来る。
しかし、実装コストは技術が分かる人間にしかわからないので、エンジニアがマネジメントする必要がある領域。

実現したいことのコアな価値がどこにあるのかを理解して、技術的にコストが低く長期的に安定出来る実装はどのようなものかを考えながら提案する必要がある。

つまり、早く届けられるかどうかによって、価値の優先順が変わるはずなのです。
技術を知らないプロダクトマネージャだけで優先順を最終決定出来るケースはないと思います。
それが出来るのは定常的な慣れた技術であるときだけです。新しい技術や新しい設計が必要なときには必ずエンジニアの力が必要だと思います。
そのエンジニアの確認をしないマネジメントでは通常では到達不能な目標をプロジェクトマネジメントをする時に圧倒的な軋轢が発生することになるはずです。

技術的負債のコントロール
技術的負債がプロダクトに与える影響度を測ることが出来るのもエンジニアだけです。
プロダクトマネージャに言われるがままに作るエンジニアはマネージャではないと思います。
中長期のプロダクトのシステム内のバランスを考えながら技術的負債をコントロールすべきです。
エンジニアにとってシステムのアーキテクチャデザインや構成、品質こそがプロダクトのはずです。
それは プロダクトマネジメント x エンジニアリング が必要な領域です。

プロジェクトマネジメント x エンジニアリング
プロジェクトマネジメントとは
作るべき機能をどのようなスケジュールで作って実行するかをマネジメントします。
簡単に言えばプロダクトマネジメントの時に決めた目標を達成するというものにフォーカスしたマネジメントです。

クリティカルパスの並び順を整理したり、全体量を把握しながら進めたりするだけで効率が上がるものです。
コミュニケーションを促進したり、認識を合わせるためのツールやフレームワークなどもあります。

プロジェクトマネジメント x エンジニアリングとは
機能の工数の積み上げだけでは実はアプリケーションは完成しません。
特にサーバサイドの技術が多い場合にはPMが出す機能スケジュールとは別のスケジュールを持つ必要があります。

エンジニアにしか見えない非機能要件や開発環境の作成、たくさんの機能の基盤となる部分の実装などの工数を加味したスケジュールを作り出して、プロジェクトのスケジュールとシンクロしながら開発のスケジュールをマネジメントする必要があります。

パーキンソンの法則
大きくバッファを持つ方法でスケジュールリスクに対応する方法もありますが、本質的ではないと思っています。
それは自分で技術を見積もることが出来ない、またはタスクを洗い出す事ができないという技術力不足に対応するための手段に過ぎないと思うからです。
単純にバッファだけ積まれたスケジュールはパーキンソンの法則(夏休みの宿題を最終日にすべてこなすなど)に沿って、スケジュールの時間をすべて使うことになってしまうと思います。

不確実性のコーン
技術が高く、かつプロジェクトマネジメント力があるならば、もっと本質的な技術リスクを見積もることが出来ると思います。
本当に技術リスクが高い機能と、今まで得た技術を使うことだけで実現できる機能では、スケジュール上の日数は同じでも、不確実性へのリスクは大きく違います。
不確実性のコーンは不確実なリスクに対して早期に手を付けて、不確実性を減らすことによって収束していくもです。
分からないからと言って手を付けていなければ、不確実性のコーンは収束することはなく、スケジュールの延期を余儀なくされます。

何が不確実であるかはプロダクトマネージャはもちろん分かりません。プロダクトマネージャには全ての機能が不確実に見えていることでしょう。技術がわかるリードエンジニアだからこそ、実現性に対する実装リスクの濃淡が機能の仕様から見えるのです。

マーケットや経営の判断の動きを見ながらスケジューリングする
提供価値が他の機能よりも上であっても、不透明な技術のものはタスクとして優先順位が上げづらいです。
見通しが明るい機能の方が提供価値が低くても実装を先にしてしまうのです。
１人のメンバーであるエンジニアの多くはマーケットにおける機能の価値を理解するだけの十分なマーケット知識を備えていません。
マネジメントするにはそれらを捉えて、スケジュールに落とし込む必要があります。

本当に対応すべきタスクが何かをコントロールし、リスクについての不確実性を考慮に入れたタスク優先度、スケジュール順、アサインなどは、とても高いレベルの技術とマネジメント力を要すると思われます。

緊急ではない重要な仕事
締め切りやバグなどの緊急事態になったときにのみ不確実なリスクに対応しているようではプロジェクトマネジメントが出来ているとは言えないと考えます。エンジニアの技術力を活かしてこそ プロジェクトマネジメント x エンジニアリング のマネジメントになりえるはずです。

スクラムベーシックなエンジニア理想とスケジュールベースなFIXスケージュールの現実
締切の自由さや機能の削減の余裕があるならば、スクラム等で実行されているバックログリファインメントやスプリントバックログで解決出来ます。
しかし、スケジュールをFIXさせたい、機能もFIXさせたい要件が強いときには現在のスクラムフレームワークでしっかりとエンジニア側が必要な作業について洗い出す力やリスクを見積もり、バッファの誤差を減らし、技術的なリスクがクリティカルパスにならないようにタスクの着手を優先する勇気を持ちならがカンバンのチケットを取る戦略が必要です。

自由にカンバンからチケットを取るだけでは上手くいかないのも当然です。マネジメントされていないのですから。
そして、それは真のアジャイルではないと思います。
スケジュールがFIXしていても、アジャイルであることは出来ると考えています。
それはウォータフォールとは別のものです。

ピープルマネジメント x エンジニアリング
ピープルマネジメントとは
個々の働く人へのマインドに関わるマネジメントになります。
その人の価値観や求める働き方、その人のパフォーマンスを最大に発揮させることや中長期のキャリアを考えます。

ピープルマネジメント x エンジニアリングとは
エンジニアリングを行うのは当然エンジニアになります。
エンジニアの技術を理解しない人に対して、エンジニアはどれだけ技術の話を出来るのでしょうか？ 通常は難しいでしょう。
毎日技術を駆使し、技術を勉強し、技術で成長しているのに、その話が出来ない人にあなたの成長や成果を説明できるでしょうか？ 現在の課題を相談できるでしょうか？ 将来を相談できるでしょうか？

エンジニアの技術とマネジメントの知識があるからこそ
・ 困っている技術の相談
・ エンジニアのキャリアの相談
・ あなたの技術力の評価
を話が出来ると思います。

それだけでピープルマネジメント x エンジニアリングの価値があります。

目標管理と評価
ピープルマネジメントのスキルで言えば、目標設定やキャリア、パフォーマンスの最大化などがあります。

MBO、OKR、KPI、KGI
色々な指標や個人の目標の立て方があります。
OKRを１つとっても、上手くやれるOKRとやれないOKRがあります。
タイトルだけOKRにしても、OKRではないのです。必要なのはOKRの観点といくつかの要素が守られているかという事です。
ただブレイクダウンするだけでは上手くいかない。ゴールツリーのような考え方や伝え方も重要になります。

会社がどの方向にビジョンを持っているかを理解していなければエンジニアの目標を導けないですし、会社のビジョンに対してキャッシュフローや事業計画を理解しなければ、その実効性がただの理想なのか、硬い目標なのかわかりません。そこまで理解してエンジニアの目標を作る必要があります。硬い目標ならMUST目標で立てなければならないですし、理想目標ならばビジョン目標としてモチベーションを作る必要があります。そこに技術を掛け算して目標を提案する必要があるかと思います。

会社の経営の理解が浅ければ、プロジェクトマネジメントのスケジュールに振り回された目標設定のみになり短期的なものしか見えなくなってしまう。本当のその人のパフォーマンスや成長性を考えた目標を考えれるようになりたいところです。

評価
評価の方法もどんな会社も頭を悩ませ、試行錯誤しているところになります。
この項目については定型的なパターンはあまりなく、事例ベースが多い気がします。

弊社はPeer Reviewを採用しており、自分を評価して欲しい人の複数から評価コメントを受けて、上長が最終決定しています。

環境作成
組織文化の浸透や福利厚生も含めて働くひとの環境作成が必要になります。
PCのスペックやモニタ、机や椅子、開発の時に使うツールなど、自由に揃えたり、良いものを使える方がエンジニアは当然うれしいですし、効率も上がると思います。
最近ではエンジニアのコアタイム勤務によるフレックスやリモート開発も増えているように感じます。

そのような環境そのものを変革することは会社の文化もありますが、進めるための上手さも必要です。

最小単位の個人と最大単位の組織をマネジメント
ピープルマネジメントは個人にフォーカスする部分と組織そのものにフォーカスする部分があり、ターゲットの大小の差が大きいので非常に難しい部分のマネジメントのように思います。

この記事を見ている人はきっとエンジニアリングを勉強してきた。そしてマネジメントの興味、知識がある
あなたがエンジニアならばエンジニアリング技術を学んできたと思う。
エンジニアという職業があなたをエンジニアにしたわけではないと思う。
エンジニアと名乗るために勉強した事があるはずです。

マネジメントのフレームワークや技術
エンジニアがそうであったのと同じようにマネージャになったならマネジメントが出来るようになるわけではない。
マネジメントも多くのフレームワークや手法があります。

あなたはオレオレフレームワークばかりを作るエンジニアと一緒に働きたいだろうか？
センスが群を抜いていればRuby on Railsのようなフレームワークを作ってしまうかもしれないが、ほとんどのケースがそうではないことを知っていると思う。

コピペではない、活用をすること
事例ばかりみてそれを適応するのも、ちょっと違うかなと思います。
StackOverFlowに載っている解決方法のコードを意味もわからずコピペするだけで上手く動いたけど、根本が違っていることもあると思います。

もちろん、最初の一歩はそこから始まるとは思います。しかし、本当に使いこなすには、その一行一行に何の意味や意図があるかを理解することの方が大切です。

ふりかえりでKPTをやっているときに、KPTをやっていればチームが良くなるわけではないです。
KPTで解決できる問題や課題の観点でKPTが使われているときにだけ効果を発揮するんです。

このように、技術は意味があって使われているので、その適応範囲は自分で考える必要があります。

真のエンジニアリングマネージャ
僕はマネジメントの勉強をしなければ 真のエンジニアリングマネージャ にはなれないと考えています。

残念ながら僕は凡人なので、センスよくマネジメントを実行することはなかなか出来ませんでした。
だからこそマネジメントの手法を学び、上手く実行できるようになるまで実践をしようとしています。
使いこなすまでにはまだまだ練習が必要です。

GoFのデザインパターンを覚えても、使いこなすまでには時間がかかります。
それまではデザインパターン厨になってしまう時期はあるかもしれないです。でも、やるしかない。
マネジメントも同じです。コーチングの本を１冊読んだからと言って、コーチング出来るわけではないです。

エンジニアリングを掛け算する
色々なマネジメント単体の知識がエンジニアリングと掛け算されることになると思います。
それは今あるマネジメントフレームワークをベースにしながらエンジニア向けにカスタマイズしながら使うことになるような気がします。もちろん、開発向けに作られたアジャイル開発系のフレームワークなどはそのまま利用できます。

さまざまなマネジメント領域
様々なものをマネジメントするために色々なマネジメント分野の勉強が必要と思います。

プロダクトマネジメント
プロジェクトマネジメント
ピープルマネジメント
それぞれにたくさんの考えや事例、本などがあります。
さまざまな考え方や手法が存在しています。
上では３つにまとめていますが、この３つがとてつもなく深くて広い、、、。

また、この枠に当てはまらないマネジメント技術も、もちろん沢山あります。

レピュテーションマネジメントでは会社の評判をマネジメントする話ですが、その観点をエンジニアに照らし合わせ、外に表現されづらいエンジニアのスキルや貢献をどう表現することで評判としてアピールするかをエンジニアリングと掛け算することで考えたりもできます。

ゾーンマネジメントは経営におけるグロース事業と新規事業などのフェーズごとに組織や観点、ルールを分けてマネジメントをする手法ですが、その観点はエンジニアリングに於いても同様に存在すると感じました。
技術的負債に対する投資の考え方もこのようなフェーズによって違います。

このようにどんなマネジメントに関してもエンジニアリングを掛け算することで活用できる面があるのではと考えています。

いくつかの手法の紹介
今回の３つのマネジメントに関するいくつかの手法に関するキーワードはこちらの過去記事にもあります。
現在と少し考えが違う部分があるのですが、参考になるかもしれません。
エンジニアの次のステップの勉強法２ - 技術の別の道への活かし方

終わりに
いろいろ書きましたが、ぶっちゃけエンジニアが良い感じに働けるようにすることがマネージャの仕事で、それ以外の目標はないと思います。
今回書いた勉強することについても１つの考えや手段に過ぎない。
色々なマネジメントの技術を学んで真のエンジニアリングマネージャを目指したい！

エンジニアが楽しく開発できる環境を作る。エンジニアリングマネージャの責務はそれだけ！
みんなで頑張ってエンジニアにとって最高のやりがいある環境を作りましょ！

このエントリは Engineering Manager アドベントカレンダー 12日目の記事です。

昨日は newtaさんのエンジニアリングマネージャのスキル習得 でした。

先日、DevLOVE関西 Engineering Manager を語ろうというイベントで1on1についてお話しました。


基本的にはスライドを見ていただければわかると思いますが、ある観点についてもう少し掘り下げようと思います。 対象読者は「人見知りでなんとなく1on1に苦手意識を持っているマネージャ」です。まさにぼくのことなのですが。

なぜ1on1に苦手意識があるのか
1on1に意味はあるのか？
ぼくは普段の人付き合いに対しては人見知りですが、仕事のうえで必要なコミュニケーションはそれほど苦もなくこなせます。しかしどうにも1on1だけはずっと苦手意識がありました。それはなぜなのか。

ひとつは「メンバーが1on1に価値を感じているかどうか不安」というのがありました。エンジニアチームをマネージメントしていると、必然不必要なMTGなどはなるべく減らしてエンジニアが開発に専念する時間を増やしましょうという力学が働きます。なのでエンジニアを定期的に拘束して、マネージャと2人だけで話す時間というのは、この力学に反してしまうのではないか、と直感的には思ってしまうのです。

ぼく自身は、エンジニア各位と1on1を重ねることで、チームの振り返りではなかなか拾えない課題などを拾うことができており、そこに価値を感じていました。しかしエンジニア側から見た場合、彼らは価値を感じてくれているかどうか。そこにいまいち自信が持てないでいたのです。

そんなある日、1on1であるエンジニアからこんなことを言われました。

「もっと頻繁に1on1をしてほしい」

それまで、1on1の価値にいまいち自信を持ちきれていなかったこともあり、月1回程度の頻度でやっていました。期初の目標設定や、期末の評価面談もその数に入れていたため、実質1on1として機能しているのは半期に2, 3回という状態でした。これに対して、メンバーの1人が1on1の頻度に不満がある、と打ち明けてくれたのです。

曰く、日々の仕事の中で、今度1on1で相談したいということを思いついたとしても、今の頻度では埋もれてしまったり当日には忘れてしまったりする。ということでした。この話を聞き、ようやく「メンバーもぼくと話したがってくれているのか」と1on1に自信を持てるようになりました。

チーム事情やメンバー構成によって、すべてに当てはまる事例ではありませんが、ここで自信を持てるようになってから自分の1on1に臨むスタンスも良い方向に変化したという自覚があるので、マネージャ自身が価値を感じられているのであれば、1on1には価値はあると信じて臨めば良いと思うようになりました。

単純な人見知り要因
もう1つシンプルな理由がありました。単純に、自分が人見知りなので、誰かと1対1で長い時間話すのが苦手、という理由です。

とはいえ、仲の良い人となら、サシで飲みに行ったりもするわけなので、これはもう単純に自分自身がメンバーと親しみのある距離感を持てていないというだけの話です。メンバーとの信頼感や、親しみを得るのも1on1の目的のひとつですから、諦めて回数を重ねましょう。

人との親密度は、その人と過ごした時間ではなく回数に影響を受けます。同じ時間を過ごしたとしても、年に1回3時間より、毎日5分を36回やるほうが親しくなると言われています。なので、どうしても苦手な場合はいきなり30分の1on1をはじめるのではなく、朝会のあとに毎日5分立ち話をする、のを繰り返してもいいのではないかと思います。

ぼくは覚悟を決めて1on1を頻繁にやるぞ、と半期で合計100回以上実施した結果、半期前に悩んでいたのはなんだったのだろう、という程度にはメンバーとストレスなく1on1に臨めるようになりました。

あまり気負わずに、お互い気軽な気持ちで1on1に臨めば、回数を重ねるうちにさまざまな1on1そのものに対する悩みは自然と解消していくのではないかな、と思います。

明日は Mura-Mi さんです。よろしくお願いします。

今，個人的に重視しているエンジニアリング組織のためのセオリーをまとめる
株式会社FOLIO にてエンジニアリングマネージャーをやっています．FOLIO では この1年間，プロダクト開発を円滑に進めるための組織を目指し，様々な試行錯誤をしてきました．その中でも，適切なチーム・グループの境界設定やミッションに基づいた組織の構造化は現在進行系で大きなトピックの一つです．

Engineering Manager は Engineer のマネジメントではなく Engineering のマネジメントだ，という指摘が今回の Advent Calendar でもありましたが，エンジニアリング組織の持てるポテンシャルを十二分に引き出せるかどうかを左右する変数のひとつが「組織のカタチ」だと思います。

本稿は，10月のあるタイミングで社内に向けた啓蒙活動の際に書き出した『組織づくりを考える上で知っておく必要のある概念たち』という wiki の内容を素にしています．私が今の仕事のコンテキストで特に意識しているトピックやセオリーを，エンジニアリング組織構築に馴染みの無い人へ動機なども含めて説明することを主眼に記述しています．*1 この記事の内容は所属する企業の公式見解ではなく，個人的に仕事をする上で大事にしていることにとどまっていることにだけご留意ください．

この記事は，Engineering Manager Advent Calendar 2018 の13日目の記事です．どちらかと言うとソフトスキルとかピープルマネジメントとかエンジニアリングマネージャーのキャリアとかの話が多い今回の Advent Calendar ですが，僕の記事はどちらかと言うとセオリーの棚卸しって感じですね．



目次
目次
リソース効率とフロー効率, 制約理論
職能組織と機能チーム*2
職能組織
機能チーム
マトリクス組織
組織の寿命，プロダクトとプロジェクト
Stable Team
プロジェクトに基づく組織
プロダクトに基づく組織
プロダクトの境界とコミュニケーション
境界の話
「コンウェイの法則」と「逆コンウェイ戦略」
SoE と SoR によるバイモーダル戦略
System of Engagement (SoE)
System of Record (SoR)
バイモーダル戦略
これらを実際の組織運営・組織構築に応用すると？
リソース効率とフロー効率, 制約理論
プロセスを設計する上で，「効率の良さ」を求める際に，その「効率の良さ」はどういう側面のものなの？という話．今年の頭に前職の後輩たちにレクチャーした話をこのブログに書いた けど，昨年くらいからよくエンジニアリング組織のマネージメントをやってる人の文脈で聞くようになった概念かなと思います．

リソース効率とは，プロセスを構成するパーツの稼働率の高さを指し，一方でフロー効率とはプロセスを流れる価値を付加する対象 (flow unit) に価値が付与される活動が完了するまでの時間の短さを指します．

非常に単純化した例を挙げれば，1人で取り組めば3日かかり，3人で取り掛かれば1.5日で終わるタスクがあったときに，3人が別々のタスクに3日間取り組み続けるのがリソース効率を重視した配置です．この場合，すべてのタスクが3日目に完了します．また，すべてのタスクを一人で行うので知識移転も発生しません．

f:id:mura-_-mi:20181205164006j:plain
リソース効率を重視した仕事の配置
一方で，5日間かけて，3人一緒になって1つのタスクを順々に消化していくのがフロー効率を重視した配置です．タスク A は2日目に完成しています．

f:id:mura-_-mi:20181205164041j:plain
フロー効率を意識した仕事の配置
もちろん現実世界ではこんな単純に話がいくわけではありません．今回の例だと3倍の人を一つのタスクに投入しても1.5倍の速度しか出ませんでしたが，人数を投入するのが有効なのか，一人で淡々と取り組んだほうが早く終わるタスクなのかも場合によります．

リソース効率とフロー効率どちらを取るかのゼロイチの話でもなく，また，単純にタスクを完遂するという観点以外にもメンバーの感情面や育成という観点も考慮する必要があります．今回の例だと複数タスクの依存関係なども考慮していません．

事業やプロダクトによってどちらの側面をどれくらい重視するかが異なるかと思いますが，何も考えずにリソース効率を上げるアプローチを取っても，プロセスのボトルネック自体を解消せずにフロー効率を向上させないと，プロセス全体の生産性は上がりません．このことを「制約理論」と呼びます．

エンジニアリング組織の設計と運用も，プロダクトを生み出すためのプロセスを設計するという話なので，制約理論やリソース効率とフロー効率の違いはしっかりと意識するべきです．

職能組織と機能チーム*2
チーム・グループを作る上で何を軸とするかの話です．リソース効率・フロー効率とも綿密に結びつく話です．

職能組織
似た技能を持っているメンバーを集めて作られたチームを職能組織と呼びます．*3

似た技能を持つメンバーが集まるので，メンバー同士の切磋琢磨がワークして技能スキルが上がりやすいというメリットがあります．また，労働市場で希少性のある技能や，特殊性のある技能，会社内の複数部署やチームに横断して仕組みを整えることが効果的だと判断されるケースでこの形態が取られるケースが多いのではないでしょうか．例えばデータ分析や機械学習，人工知能に基づいた技能を持つエンジニアの特殊部隊や，ITインフラの構築・運用に長けたエンジニアのチームといったものを想像すると良いかもしれません．

職能組織が多かったり，職能組織間の境界がしっかりと設定されていると，複数の職能チームが必要なプロジェクトを完遂するためのリソース効率は高めやすい反面，チームの間での情報伝達のオーバーヘッドがかかるなどの理由でフロー効率は下がりやすい傾向があるかと思います．

機能チーム
職能を横断し，顧客に提供する価値を作る単位に基づいて組成する組織を機能チーム (Feature Team) と呼びます．

顧客に提供する価値の最大化にフォーカスが当たりやすいのでフロー効率は高く保ちやすい一方で，チームの中のすべての職能が常に必要とされるとは限らないという点でリソース効率が落ちがちであるという特徴があります．

また，一言で「職能を横断する」と言っても，どの程度まで横断するかも重要になります．例えば，エンジニアの中でフロントエンドもバックエンドもインフラエンジニアもデータ分析も合わせるというレベルもあれば，さらにビジネスサイドのメンバーまで一つのチームとする，という職能横断も考えられます．職能横断の範囲が広ければ広いほど最終的な顧客の価値にフォーカスした組織が作れますが，その分マネジメントの難易度は上がるでしょう．

マトリクス組織
職能組織と機能チームの両方のメリットを享受するために，両軸を兼ね備えたマトリクス組織という構造がしばしば見られます．

マトリクス組織は，人事評価や指揮系統などの点で難易度が高く，しっかりとした制度設計や取り決めがないと難しいとされます．

f:id:mura-_-mi:20181205164112j:plain
極めて単純化したマトリクス組織の例
例えば上述の図の場合，赤い ☆ の部分に属しているプロダクト A のエンジニアは，プロダクトAのマネージャーとエンジニア組織のマネージャーの両方から評価や指示を受けたりしますが，マネージャー同士の評価や指示が矛盾したときにはどうすればよいかはどう判断すればよいでしょうか？また，メンバーの配置はどちらのマネージャーが主導権を握ればよいでしょうか？決まりが明確になければ社内政治や縄張り争いのようなものに発展してしまうのも想像に難くありません．

組織の寿命，プロダクトとプロジェクト
組織の寿命を長くするためにどうするか？そのために，極力 プロジェクトではなくプロダクトで思考しよう ，という話です．

Stable Team
ここでいう Stable つまり「安定」とは，比較的長い時間に渡って顔ぶれが大きく変わらないことを指します．なるべくメンバーの増減が起きないようにする動機は様々あります．

ステークホルダーを含むチームの外部が，チームの誰にコミュニケーションを取ればよいかがわかりやすくなる
将来の予測を立てる上での不確実性を減らすことが出来る
メンバー同士の関係も長く存続するので，チーム内のコミュニケーションコストが下がる傾向がある
ブルックスの法則*4 に遭遇することを防ぎやすくなる
もちろん，そういうことを言っていられないような状況も多々発生しますが，なるべく組織の寿命を長くし，その組織に属するメンバーの顔ぶれを安定させるにはどうしたらよいか，がソフトウェア開発の文脈では重要になるのではないかと思います．

プロジェクトに基づく組織
プロジェクトとは，ある事業の中で期限と範囲を決めて完遂するための計画と言えます．事業が続いても，事業の中のある計画が完了すればプロジェクトは終了します．

基本的に，プロジェクトのために組成された組織は，プロジェクトが終了すれば解散します．上手に組織を設計しなければ，プロジェクトが終了した後のことはプロジェクトにおける考慮から外され，部分最適が生じることもあるでしょう．逆に，何より完遂することが大事なときにはプロジェクトベースの組織を作れば良いとも言えます．

極めて単純化した例を示すと，「地球を出発し，月の周りを周回して地球に帰還する」という活動は，どのようにこの宇宙旅行を完遂させるかが最も重要なので，プロジェクト組織が適すると言えます．

一方で，宇宙ステーション開発は，宇宙ステーションを構築して終わりではなく，その後の宇宙ステーションを活用した宇宙開発が安全に安定して行われることが重要なので，宇宙ステーションを作り切ることだけに特化した組織にならないことを注意しなければいけません．

プロダクトに基づく組織
ここで，プロダクト とは，事業を行う上で顧客に届ける価値と定義します．事業が存続する限り，プロダクトは存続します．

プロダクトに基づいた組織は，もちろんプロダクトが存続する限り存続するでしょう．基本的に，プロジェクトに基づいた組織よりも長く存続する傾向があるということができます．長く存続する可能性がある組織であるということは，プロダクトの長期的な価値や組織の生産性などにフォーカスがあたり，技術的負債の管理にも責任を持つ動機づけが働きやすい傾向があるのではないでしょうか．

ここまで，プロジェクト組織とプロダクト組織を対比的に書きましたが，プロダクトとプロジェクトは，対立関係ではありません．プロダクトに基づいた組織は，その時々のプロジェクトに取り組むことができます．

プロダクトに基づいた組織を構築する際に難しいのは，プロダクトの範囲や組織の裁量の範囲を定義することでしょう．プロジェクトに基づく組織は，プロジェクトの定めるスコープが明確に決まっているはずなのでこの部分にはあまり苦心しません．一方で，プロダクトに基づく組織は，定義を一言で表すことは簡単でも，色んな事情があって境界付けが難しいこともあります．求められるミッションと組織の持つスキルセットに差があって苦心することなどもあるでしょう．

プロダクトの境界とコミュニケーション
境界の話
プロダクト組織のところでも出ましたが，職能横断チームやプロダクトの定義は，広く取れば取るほど最終的に提供される価値にフォーカスしやすい組織となるが，その反面コミュニケーションのオーバーヘッドがかかったり，価値判断の難易度が上がったりするなど，高度なマネジメントが求められる傾向があります．

以前に私が書いた 組織境界の話 や プロダクト定義の話 でも取り上げましたが，現実的には以下の3つが重要になるのかなと思っています．

境界を広げ続ける努力
適切に境界を設定して「望ましい部分最適」が働くようにすること
必要に応じて境界を見直すこと (一度設定して満足してはいけないし，フェーズが変われば最適化するべき KPI も変わる)
「コンウェイの法則」と「逆コンウェイ戦略」
コンウェイの法則とは，「組織の設計するシステムには，その組織のコミュニケーション構造をそのまま反映した設計になるという制約がある」という有名な法則です．

コンウェイの法則はもともと，組織の成果物を分析した結果であり，組織の構造を所与として成果物のアーキテクチャの傾向を説明するものでした．これを逆手に取り，プロダクトの構造を変えたり，新しくプロダクトを作る際に，どのような設計を実現するかから逆算して組織のコミュニケーションフローをデザインすることを「逆コンウェイ戦略」といいます．

SoE と SoR によるバイモーダル戦略
「逆コンウェイ戦略」では，どのような設計の青写真を描くが重要になります．ではどのような設計を目指せばよいのか？その答えはもちろん事業や組織の特色に依存しますが，一つのヒントになるのが SoE と SoR によるバイモーダル戦略です．

System of Engagement (SoE)
System of Engagement とは，プロダクトと顧客のつながりを確立し，強化することを主眼としたシステムです．

一般的な toC のサービスで言えば，インターネット上に展開されるサービスサイトや，モバイルアプリ，メールや郵送物などによる CRM チャネルなどが SoE に当たります．

特に toC 向けプロダクトの場合，どのような改善施策が効果があるかや，潜在市場がどこに潜むかは経験主義をもとに探し当てる必要があります．「リーンスタートアップ」や「アジャイルなプロダクト開発」が特に効果を発揮する分野と言えるかもしれません．小さく高速に実験して学習することが求められます．

System of Record (SoR)
System of Record (SoR) とは，出来事が正しく起きることを保証し，起きた出来事を正確に記録し管理するためのシステムを言います．

金銭管理や，法令や規制に基づいた報告義務のあるようなドメインなどがこれに当たります． SoE と比べれば，情報の取りこぼしやシステムダウンはより致命的であり，リスクを抑えて安定稼働することが求められます． 事前に要件を明確化してコーナーケースなどを慎重に考慮することが求められるので，いくら「アジャイルなソフトウェア開発」を標榜しても，大きな設計を洗い出し*5，正しくシステムが稼働するかの検証にも力を入れる必要があるでしょう．

バイモーダル戦略
SoE / SoR の特性を理解し，開発するプロダクトや，システムを構成する全体の中でも特定のエリアの性格に対応したチーム構成やプロセス設計などのアプローチを取る戦略を「バイモーダル戦略」といいます．比較的大規模なシステムを開発するとき，そのシステムの中にも SoE の特性を持つ部分と SoR の特性を持つ部分があるので，そのことを自覚しましょう，という話です．

これらを実際の組織運営・組織構築に応用すると？
ここまでが，今の自分が意識している組織構築・運営を行う上でのセオリーやパターンでした．エンジニアリングマネージャーそれぞれの取るアプローチは，当然所属する組織の文脈によって変わってくると思います．皆さんは普段どのようなことを考えていらっしゃいますか？

FOLIO Advent Calendar 2018 にて明日公開する記事 では，FOLIO のこの1年半くらいの開発組織の変遷や，今抱えている課題についてご紹介する予定です！ (このブログで紹介します)





*1:世の中には エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング という，より網羅的に，さらに発展的な内容まで網羅した書物があります

*2:『エンジニアリング組織論への招待』では機能別組織と機能横断型組織と記載されていますが，本稿では LeSS における Feature Team を一つの道標にしているため，このような用語を使っています

*3:呼び方はいろいろありますが，FOLIO ではこう呼んでいます．

*4:プロジェクトの後期に人員を追加投入することは，開発速度を向上させず，むしろプロジェクトの遅延を引き起こす

*5:Big Design Upfront と呼ぶことがあります

Engineering Managerの難しさTOP3
Go to the profile of Takayuki Shimizu
Takayuki Shimizu
Dec 14
この記事はEngineering Manager Advent Calendar 2018の14日目の記事です。

株式会社FiNC Technologiesにてエンジニアリングマネージャーやっております清水 @takayuki_shmz です。今は自分の担当の日が回ってしまいそうで焦っております。

今日はEngineering Managerをそこそこやってみて、特に難しかったなぁという点を書きたいと思います。TOP3とか偉そうに書いてますが気をつけてください、n=1の主観100%です。異論は余裕をもって認めます。

まぁ「この世のすべての不利益は当人の能力不足」とのことなので、以後でる話題はすべて自分がマネージャーを始める際の勉強不足が原因なのですが、Engineering Manager界隈も徐々に盛り上がっていますので、僕のただの後悔を書き綴ることで、誰かの役に立てばと思います。

ではTOP3、1個ずつ行きたいと思います。

1. 適切な課題定義

と聞かれて、皆さんはすぐ答えられるでしょうか。

自分が感じてなかなか解決できないEngineering Managerのお仕事の難しさの一つは、課題定義でした。言い換えれば優先度、フォーカス、取捨選択などともいえて、いちエンジニアとしてでなく、いちEngineering Managerとしてなにかに取り組むときに、なにをやるべきか、そのwhatとwhyを決めることです。

Engineering Managerをやっていて、目の前に基本的に課題がないなんてことはほとんどのケースでなく、たいていは複数の問題に直面しているところから始まり、さらに掘り進めるともっと課題がでてくる、という状況かと思います。

そもそもエンジニアリングで重要なのはざっくりいうと「どう不確実性を効率よく減らしていくか」だと有名なエンジニアリング組織論への招待もかいてありますので、基本的に不確実＝確定までの課題が散乱しているわけです。

Engineering Managerとして持つ責任の範囲が増えればふえるほど、この数も複雑性もましていき、なにが問題か見えにくくなります。

そこで安易に「1on1をしよう」「勉強会をしよう」といったhowから入ると、うまくいくこともあれど、つねに最適であるとはいい難い選択になってしまいます。

ですので、どんなに小さなチームでも、その組織を適切に診断し、あるべき姿を描き、それに向かって走るための基本方針たて、whatとwhyを突き詰めてから、上手に状況にあったフォーカスを持ってマネジメントしていったほうがベターなわけです。
そういったプロセスがあってはじめて「Engineering Managerとして、今最も課題だと思っていることTOP3はなんですか？」にすぐに答えられるEngineering Managerになれるわけです。

…と口では言うのは簡単なのですが、そんな心構えで始めたわけは当然なく、微妙に「やってることあってるのかなぁ」「チームの生産性あげるにはこれが一番なのかなぁ」と不安と失敗を繰り返して、やっと課題定義の質を上げて、戦略的に考えて動く重要性を学び、意識するに至りました。

2. 感情のマネジメント（EQ)
「感情のマネジメント」とは、組織のパフォーマンスを最大化するために、いかに感情的な課題を認識・解決して、相手を感情的にプラスな状態に持っていくかということと一旦します。

逆をあえておくと、おそらくそれは「論理のマネジメント」で、合理的・論理的に物事が進むことを好むエンジニアに、なにかを変えるときにしっかり論理的に説明し、納得してもらい、パフォーマンスを担保することです。

Engineering Managerを始めたときは、開発プロセスや1on1、目標設定など、課題に向き合いながら仕組みを整えて解決することにフォーカスが行きがちですが、それらを論理だけで進めると、うまくいかないこともあります。

それこそ何か開発ルールを一つ変えるにも、必ず既存のルールを最初に考えた人がいますので、変えたときに本人がどう感じるか、極端にいえばその人がメンツがつぶれたように感じないか、といったような感情の問題もさりげなく、でもそつなく認識しなければいけません。

これが1:1であればまだ1on1でじっくり話して、わかってもらった上で変えて行けば何の問題も起きませんが、Engineering Managerは対峙するステークホルダーはたいてい複数人で、時にはPMなど別職種もいますので、様々な人の感情を察知することができるのが実は大事ではないかと思います。

いわゆる「マネージャーに向いている」人の要件の一つは、個人的にはこの「感情のマネジメント」ができるか、能力でいえば「EQが高いか」ではないかとさえ思います。

EQって？といわれると意外と説明に困るので、Google先生に早速聞きます。

心の知能指数 — Wikipedia

1920年、コロンビア大学の エドワード・ソーンダイクが、他人と付き合う能力を「社会的知性」として取り上げた。1975年、 ハワード・ガードナー が『The shattered…
ja.wikipedia.org
心の知能指数（こころのちのうしすう、英: Emotional Intelligence Quotient、EQ）は、心の知能 (英: Emotional Intelligence、EI) を測定する指標である。心の知能とは、自己や他者の感情を知覚し、また自分の感情をコントロールする知能を指す。
だそうです。自分だけでも大変なのに他者のまでなんて、難しいですね。

「論理のマネジメント」ができないと、そもそもEngineering Managerは難しい面がでるのはご理解いただけるかとおもいますが、たとえ論理のマネジメントができていても感情のマネジメントが不十分だと「あの人の下はちょっと」とか「言ってることは正しいけどさ」なんて反応をされかねない、Engineering Managerになってしまいます。

きっと頭の切れる方であれば、論理的な課題を解決することは簡単でしょう。論理的に考えればたいてい同じ答えに辿り着く課題ですので。

難しいのは感情的な課題で、そこにはたいてい多数の変数と文脈のある複雑系・トレードオフな課題なので、一筋縄ではいきません。

感情のマネジメントに、「アプローチはこれだ！」なんて答えを言えるほどの経験はないのでなにも答えを言わず終わりますが、これが難しいことだと認識することは、Engineering Managerが不安を無駄に抱かないために重要なのではないかと思います。あなたにとって難しいものは、意外と誰にでも難しい、なんてこともあるかもしれません。

3. 言葉で人を動かす
最後は、「言葉で人を動かす難しさ」です。

ケースバイケースですが、Engineering Managerとして見る範囲がひろがってくると徐々に自分が手を動かす機会は相対的に減ってくると思います。

じゃあそのかわりにどう自分なりのバリューを出すかというと「自分がいるから、チームのパフォーマンスが上がる」という状態をつくることを目指します。これなxxxマネージャーという役職全般で言えることかもしれません。

そうなると自分の武器は、言葉だけです。言葉というより、コミュニケーションというワードのほうが正しいかも知れません。「言葉をつかって、人になにかを伝え、実際にうごいてもらう」＝コミュニケーションという定義です。
言葉というのは対面もあればドキュメントもありますが、相手の行動なり、気持ちの変化なりをその言葉で引き出すことで、チームに小さな変化を起こし、チームのパフォーマンスにプラスの変化を起こすのが我々のお仕事です。

これは自分がマネジメントされていたとき、そんなことを意識もせず働いていたときには、当然感じなかった難しさでして、言葉を選ばずに素直な心の声をかけば「言ったのにやってくれない・変わらない」という状態です。

多くのマネジメントのハウツー的なものは、結局はコミュニケーションによって対象にどう変化を起こすかの具体にも見えますし、逆にあらゆる事がこの課題の事象だとすると、TOP3に入れてもなにも言っていないようなものかもしれませんが。

相手を動かすことは、失敗多く、けっこうメンタルにもきます。
そこでくじけないためにも、Engineering Managerとしての自分の仕事を遂行するためには、相手をコミュニケーションを通して動かすことがとても大事で、それは簡単なことじゃなくいろいろな努力が必要だと、逆にそれができれば立派なスキルでありバリューだと、そう思って始められればよいのではないでしょうか。

まとめ
ということでまとめると、個人的に感じる「Engineering Managerの難しさTOP3」は

適切な課題定義
感情のマネジメント（EQ)
言葉で人を動かす
となりました。じゃあどうするんだという話が一切でない記事で申し訳なさ満載ですが、その解決策はEngineering Manager Advent Calendar 2018をよんで(Vol.2もある)、ときにはEngineering Manager Meetupという非常に有意義なmeetupに参加して見つけてもらえればと思います。僕もそうしていきます。

僕のEngineering Managerとしてのアウトプットといえば、FiNC Technologiesでの活動が全てなので、その技術組織としての取り組みはこちらのFiNC Tech Blog やこちらの記事なんかにもありますので、もしよかったらご覧ください。

組織コンディションのスコアリングとその運用 ~wevoxを半年使ってみた~
イントロ
この記事は Engineering Manager Advent Calendar 2018 - Qiita の15日目の記事です。

EMをやっている@tomox1001です。
すっかり寒くなってきて、年の瀬を感じる今日このごろです。
みなさま、いかがお過ごしでしょうか。

ありがたいことに、今携わっているプロダクトが順調に成長しており、合わせて組織も拡大しております。

1年ほど前までは、EMである私が目標設定や1on1などのピープルマネジメントを全てのエンジニアを対象に行っていました。 が、このまま人数が増え続けると、EM1人が全員をマネジメントするやり方ではいつか破綻するぞという漠然とした危機感がありました。

また、プランナーやデザイナーなど、エンジニア以外の多様な職種が多く所属する組織で、エンジニア組織だけでなく組織全体で同じような課題を抱えていました。

そこで、ミドルマネジメント層を意図的に作り、立ち行かなくなるその前に育成・強化をはかることにしました。

そういった経緯の中、組織全体のマネジメントの質を向上させる手段のひとつとして、『wevox』というツールを組織に導入することにしました。

f:id:tomox1001:20181215201752p:plain
今日は、このwevoxを導入・運用してみた感想を、簡単ではありますが書いていこうと思います。

（蛇足ですが、マネジメントスケールの課題に至るまでの様々な組織の歴史については、以下の資料にまとまっているので興味がある方はご覧下さい。）



wevoxとは？
公式HPにわかりやすく説明がまとまったものがあるので抜粋します。

wevoxは独自のサーベイを用いて組織の状態を可視化し、エンゲージメントにおけるマイナス要因を特定及び改善策を実施していく事で、組織改善のサイクルを生み出すサービスです。 働く人々の「エンゲージメント」が企業の成長に関与している事が立証されており、昨今世界中で注目を浴びています。 エンゲージメントを高める事で、働きがいや組織に対しての愛着心が増し、生産性が向上するだけでなく、リファーラル採用の促進、及び離職率の低下により、採用・育成コストを削減できます。

より詳細な情報については公式HPを参照下さい。
wevox.io

同じようなツールにモチベーションクラウドなどもありますが、定期的に実施するアンケートの時間が2~3分という気軽さに惹かれ、うちの組織ではwevoxを試してみることになりました。
www.motivation-cloud.com

まずは導入してみた
f:id:tomox1001:20181215200903p:plain
wevox管理画面サンプル画像
公式から拝借した画像ですが、これがwevoxの管理画面のサンプル画像です。
wevoxから配信されるアンケートを元に職務 、自己成長、健康 などの様々な観点で自組織のスコアが確認できます。また、設定次第で、所属チーム、職種、年代、入社年、など多様な切り口でスコアをみることも可能です。

私たちの組織で最初に実施して出たスコアを見て、「このスコアがそもそも高いのか低いのかよく分からん」という状況になりました。しかし、wevoxの機能の中に、wevoxを利用している近しい業種の会社の平均スコアと比較できる"ベンチマークとの乖離"というチェック機能があることを知り、まずはそれを元に自分たちの組織の立ち位置を知ることができました。

結果、概ね平均以上のスコアで良好であるが、一部自己成長に対してスコアがベンチマークスコアより下回っているメンバーがいそうということが判明しました。

この課題設定を元に、(具体的な内容はここでは割愛しますが)目標設定の大幅な改善を全職種で行うことを決断しました。 その結果、改善施策を実施した翌月、自己成長のスコアが先月と比べて増加したため、自分たちが実施した施策の手応えを感じることができました。

これまで、漠然とメンバーから上がってくる意見や組織の雰囲気から課題を抽出し、なんとなく優先度を決めてアクションを決めていたものが、ある程度根拠がある状態で課題を見定めることが出来るようになったと実感しました。

本格的に運用しはじめた
このファーストアクションをきっかけに、

メンバーからのアンケートを元にスコアを算出する。
過去スコアやベンチマーク比較を元に、マネージャー/リーダー層で議論を行う。
議論を元に、解決すべき課題に対するアクションを決め、実行する。
という、流れで約半年ほど運用を続けています。

このフローにおいて、"2."のリーダー層との議論が、イントロで書いた"ミドルマネジメント層の育成・強化"において重要だと感じています。なぜなら、議論を通じて各リーダーの意見を聞くことで、リーダーとしての立ち振る舞いや考え方をインプットすることが出来るからです。

議論の際は、「なぜ自分のチームがこのスコアなのか」という質問をリーダーに必ず問うようにしています。 リーダーがチームやメンバーと向き合っていれば、自分のチームのスコアについてある程度仮説を持って説明が出来るはずなので、それができない場合は例えチームのスコアが高くてもリーダーとしての職務を果たせているかは疑わしいと思っています。

また、スコアにあまり振り回されないようあくまで参考程度にする、ということも意識しています。

スコアが低くても、そこに妥当性があるケースもあると思います。

『スコアの低いチームのリーダー=マネジメントがうまくできていないリーダー』

と短絡的に決めつけず、スコアに対する説明に妥当性があるか、今の組織やプロジェクトのフェーズがどうかなど、多角的に判断をしています。

アウトロ
いかがでしたでしょうか。

他にも、マネジメントスケールの取り組みとして、1on1ロープレやリーダー陣による目標設定レビュー会など、様々な施策に挑戦中です。 みなさんも組織のマネジメントの育成・強化で試みていることがあればぜひ教えていただきたいです！

明日はtany3さんの記事ですね。お楽しみに！

※ wevoxの回し者ではありません。

このポストはEngineering Manager Advent Calendar 2018 16日目の記事です。

はじめに
こんにちは。
エンジニアリングマネージャー(EM)をしている@tany3_です。

先日の Engineering Manager Meetup #3 とても楽しかったです。私は勉強会のあとにある懇親会が苦手だったのですが、テーマがある懇親会は居心地がよく、次回も参加したいと思える数少ない勉強会でした。心理的安全性保護士というパワーワードが発明されたのもいい思い出ですw

今回は育成にまつわる考えを少し整理してみました。

エンジニアリング組織における人の育成は、技術スキルだけに留まることはありません。成長に痛みがあるときは、仕事に対する考え方や認知フレームを調整しエンパワーメントすることや、自発的・自律的に育つようメンタリングなどを行っていきます。

どんなに高い能力を持っていたとしても、それを発揮することがなければ成果には結びつきません。私はエンジニアリングマネージャーとして、ひとりひとりが持っている能力を引き出して発揮していくことのお手伝いをしています。

今回は「成人発達理論」の視点から育成に対する向き合い方についての整理を試みます。

目次
成人発達理論について
成長を支援する方向性
どのように垂直方向の成長に向き合うのか
エンジニアリングマネージャー自身は何をすればいいのか

Photo by Sushobhan Badhai on Unsplash
1. 成人発達理論について
成人発達理論で有名なのはマズローの理論ですが、この分野には様々な理論があります。ここではロバート・キーガンが提唱した成長モデルについて考察し、日々の育成にどう適用すれば良いのか考えていきます。

成人発達理論は、人の成長におけるプロセスやメカニズムを解明する学問領域です。ロバート・キーガンの成長モデルでは、人間の成長は知識・スキルだけでなく質的な成長も含まれる、と定義しています。

質的な成長とは、人それぞれが持つ知性・意識であり、事実に対する認知のクセや自己に対する認知の解像度を表すものです。そして、知識やスキルを発動させる知性や意識そのものは、一生をかけて成長・発達するという前提に立っています。

例えば「成長が止まっている人」なんて表現をしますが、本人としては能力を伸ばし、それを発揮していくための次の打ち手が見つからず苦労しているのかもしれません。そういったメンバーがいたときに、どのように向き合っていけばよいのでしょうか。

§ 発達段階
人はそれぞれ固有の色眼鏡をかけて生きています。

発達段階は、その色眼鏡を「他者の捉え方」「自己認識」「価値観」「欲求」「支配欲求」「コミュニケーション」「組織における地位・役割」を特徴値として5段階に分類した概念です。発達段階が進むほど物事を広く深く捉えることができると言われています。

以下に発達段階の特徴を簡単に記載します。

— 発達段階2：道具主義段階

自分の認識を客観的に捉えることができる
自分の認識と他者の認識を区別できる
自分の欲求・願望に基づいて行動している
主要な関心事が自分への支援・自分への欲求が満たされることである
— 発達段階3：他者依存段階

自分独自の視点があり、他者の視点（例えば組織の視点）と区別できている
他者の視点・感情に影響を受けることができる
自分と他者の双方を考慮できる
周囲に対して従属的である
— 発達段階4：自己著述段階

自分の価値観・感情・思考を持っている
自分の価値観を他者に押し付けることはできないと分かっているが、解決策が見つからなくて葛藤している
成功体験を自己から切り離すことができず、同じやり方を繰り返す
発達段階5に相当することを語りはじめる
— 発達段階5：自己認識段階

自己が変わる可能性に気づいており、自己が変わることに自分のリソースを注いでいる
組織の利益を超えた目標を持って活動することを自己成長への可能性だと信じている
言語は現実を説明するには十分でないという認識を持っている
上記の特徴を体現しているため、それをあえて語ることが無い
日々のフィードバックや評価の場面において「より全体を見られるようにしよう」などというセリフを見聞きすることがあるのではないでしょうか。これは言い換えると「発達段階を上げよう」と質感が似ています。

ここで強調しておきたいのは「会社や組織にとって都合のいい捉え方をせよ」という話ではない、ということです。発達段階は、発達段階5に見られるように、組織の枠にとどまるものではないからです。

§ 発達段階に優劣はない
もうひとつ、ありがちな誤解を解いておかなければなりません。発達段階が進むほど有利・不利とか、偉い・偉くないとか、そういう優劣を表すものではありません。

発達段階が高次になるほど俯瞰的に物事を捉えられるようになりますが、それについて「偉い」「仕事ができるようになる」と思うのは、そういった価値体系によるものです。
「発達段階が高いのはいいことだ」という価値体系よって引き起こされたものでしかないのです。発達段階5にあるように、組織の枠を超えていくものだということを思い出していただければと思います。

むしろ、発達段階が進むほど人生が厳しいものになると言われています。
例えば発達段階4の人は、自分の価値観が周囲に通用しない葛藤を抱えて生きています。これは、発達段階2の人が自分の欲求が満たされない不満や不安を感じることよりも辛く厳しいことです。なぜならば、自分の価値観が通用しないという、いわばアイデンティティが危機にさらされているという状態だからです。

発達段階は色眼鏡の色を確認するに過ぎない、という認識が適切です。


Photo by Kate Trysh on Unsplash
2. 成長を支援する方向性
発達理論の説明はこれぐらいにして、育成の方向性について考えてみます。人の成長を水平方向・垂直方向の2軸で考え、どのように成長を支援するかについて整理します。

§ 水平的な成長
水平的な成長とは、知識やスキルを表します。何か行為を伴った訓練によって「うまくやれるようになる」ものです。
例えばコードを写経してコードが書けるようになる、先輩社員からレクチャーを受けて技術力が向上するといったような学習によるスキル向上を表します。

§ 垂直的な成長
垂直的な成長とは、発達段階がより高次になることを表します。自己の探求と他者との関係によって、言わば人としての器を大きくしていく作業です。水平的な成長との違いは、他者から教えでは成長しない点です。

§ 面積の拡げていくのが育成
人の状態を水平方向・垂直方向・原点を含めた3点で結ばれた三角形の面積を広くしていくイメージで育成方針を立てていきます。
私としては、この面積の広さが広いほど成果につながると考えており、キレイな二等辺三角形を保って拡大することが安定的な成長と考えています。


キレイな二等辺三角形を保って拡大させていくことが安定的な成長
§ 水平的な成長が求められている状態
知識やスキルが足りないため業務がこなせない状態にある場合は、水平的な成長を促します。
スキル不足で業務が行えないことで、垂直的な成長機会を失っていると考えます。眼の前のことに必死すぎて、認知リソースが自己だけに向く傾向があるので、まず知識やスキルを伸ばして周囲が見える状態にしてあげます。


水平的成長が求められている状態
§ 垂直的な成長が求められている状態
通常業務はこなせるが課題を発見できない、実装は得意だけどプロジェクト全体を把握して欲しいといった場合には、自己の認知や他者の認知に対して目を向ける問いかけをします。
あるいは、自己主張が受け入れられず不満があるケースでは、自己と他者の超える第3の案を作り上げていく力に気づいてもらう問いかけをします。


垂直的成長が求められている状態

Photo by Everton Vila on Unsplash
3. エンジニアリングマネージャーはどのように垂直方向の成長に向き合うのか
§ 発達段階を知るには
垂直方向の成長を促すにあたり、発達段階に応じた壁を乗り越えるための問いかけをしていきます。問いかけを作るには発達段階を見極める必要があるのですが、これには相当な訓練が必要です。

発達段階の見極めに関してはオットー・ラスキー(著)・加藤洋平(訳)の『心の隠された領域の測定:成人以降の心の発達理論と測定手法』に詳しく記載されています。これよると内容を完全に理解するには少なくとも1年半の歳月が必要と言われています。

エンジニアリングマネージャーには他にも向き合わなければならない事柄があり、発達段階を見極めることだけに一年半をかける訳にもいきません。したがって、日々周囲と接していくなかで批判することもなく、判定することもなく、フラットな気持ちで認知フレームを表す言動に対する感度を高めるよう意識しておきます。これを言語化するのはとても難しい。

§ 超えるべき壁は何か
それぞれの発達段階を表す特徴的な表現があります。その表現を踏まえた問いかけを試みるとよいでしょう。

以下はそれぞれの発達段階にある人が、仕事の行き詰まりや葛藤している場合にありそうな言動を想像してみたものです。

— 発達段階2：会話に他者がいない

私の担当分はしっかりやっている（が、うまくいかない）
私には情報が足りない
— 発達段階3：意見や提案、独自の行動がない

(周囲から見て)指示待ちの傾向がある
詳細な指示があればできる(ので先輩社員が困っている)
〜さんが〜と言っていたのでそうした
— 発達段階4：意見の対立に苦しむ

周囲が思うように動いてくれない
このやり方が最適なのにどうして別のやり方をするのか(という不満)
§ 壁を超える問いかけ
それぞれの発達段階に応じて、その発達段階がゆえに壁となっている自己の認知や他者の認知に対して目を向ける問いかけを考えます。例を挙げてみます。

— 発達段階2：会話に他者がいない

あなたの仕事をインプットとする人は何を求めているだろう？
不足している情報を知っている人は誰だろう？
— 発達段階3：意見や提案、独自の行動がない

周囲が仕事を振る時に背景や目的について問うてみる
自分ならどう考える？どうしたい？
— 発達段階4：意見や提案の対立に苦しむ

周囲との対話を促す質問をする
彼の考えたメリット・デメリット・目的って何なんだろうね？
認知フレームの根底にある信念を掘り下げる質問をする
(アルバート・エリスのABCDE理論)
§ 発達段階は行ったり来たりを繰り返す
本人の体調や心情、向き合う事象に応じて発達段階の発露は変化すると言われています。
したがって、そのときの言動で発達段階を断定せず、いまはそうなんだなとありのままに受け入れ、フラットに接するようにします。

メンバーの成長と可能性を強く信じましょう。会社という環境により制限されているだけで、プライベートな場では異なる発達段階にあるかもしれません。外気と温度計の関係だと思えば良いのではないでしょうか。

§ 時間を味方につけよう
育成には時間が必要です。
短期間で詰め込みすぎたり、答えだけを教えると、自ら成長する方法が身につかず、教えてくれる人がいなければ成長できなくなってしまいます。
これ回避するためには、適切な課題と支援をベースとした育成が必要になりますが、育成方法の特性上どうしても時間がかかります。

発達心理学では、ピアジェ効果と呼ばれるものがあります。
適性や構成を考慮せず無理に能力を伸ばすことを強制させることで人の成長過程が歪んでしまい、成長が止まってしまう現象です。

育成は長期に渡り継続的に行うものであり、会社の評価システムとタイムスパンが異なるものです。評価においては、評価者がメンターの育成した行動を評価することでバックアップしていきます。メンターを指定する側の人は、育成には時間を要することを理解しておく必要があります。

もし組織が育成の結果を出せと言ってきたら、一体どのような結果を期待しているのか対話する必要があるでしょう。


Photo by Justin Luebke on Unsplash
4. エンジニアリングマネージャー自身は何をすればいいのか
§ 自分の育成が不可欠
発達段階に応じた育成は、育成する人の発達段階が高くなければなりません。発達理論では、自分よりも高次にある発達段階は理解できないと言われています。

発達論に基づいたコーチングについて、前述『心の隠された領域の測定:成人以降の心の発達理論と測定手法』では次のように述べています。

コーチの発達段階がクライアントのものよりも低次である場合、それは発達的に有害です。
なかなかセンセーショナルな一文です。発達段階の低いマネージャーは育成ができないどころか、有害であることを示唆しています。

どうやら育成する人は、発達段階を上げなければならないようです。
発達段階を上げるためには内省が必要です。批判的なフィードバックを受け入れ、自己を変えていくことになるでしょう。つらい。自己の変革を促してくれるコーチの存在が必要かもしれません。

加えて、発達段階を上げていく過程で、組織に求められていることから自分を切り離し、自身の価値体系を塗り替えていく必要がありそうです。
それができれば、エンジニアリングマネージャーのみならず、一人の人間として一段違う景色が見えてくるのではないでしょうか。

おわりに

今回は成人発達理論の一端を紹介し、発達理論の視点からエンジニアリングマネージャーが育成に対してどのように向き合えばよいのかを整理してみました。

組織横断的な育成方針や文化の醸成に対して舵を切っていくためには、プレイングマネージャーのようなチーム内での育成とは異なる発想が必要です。
発達理論は一般的な企業の育成にも適用できるものですが、エンジニアリング組織においてよりクリエイティブな仕事をしていくためにはそれぞれが持つ自己の枠組みを超えた発想が重要であると考えており、注力すべき領域ではないかと思っています。

あと、文章が長すぎた。びっくりした。

— 成人発達理論に関する書籍等を紹介しておきます

なぜ人と組織は変われないのか ― ハーバード流 自己変革の理論と実践
成人発達理論による能力の成長 ダイナミックスキル理論の実践的活用法
組織も人も変わることができる! なぜ部下とうまくいかないのか 「自他変革」の発達心理学
心の隠された領域の測定:成人以降の心の発達理論と測定手法
Engineering MangementTraining

良いチームとは何か、そして良いチームであり続けるために何が必要か
チームビルディング
この記事は、Engineering Manager Advent Calendar 2018の17日目のエントリーです。

はじめに
まず、以下がざっくり私が現在置かれている状況です。

SIerで新規プロダクト開発のPO兼スクラムマスター
スタートアップでプロダクトチームのリーダー
いずれも試行錯誤で日々失敗の連続を繰り返してる真っ最中です。
そんな中でも常に意識していることがあります。
それが良いチームとは何か、そして良いチームであり続けるために何が必要かです。

この記事では、良いチームとは何か、そして良いチームであり続けるために何が必要かについて自分なりに考えていることを書いてきます。

チームとは
まずはチームについて考えていきます。
個人的には「いま話題の「心理的安全性」について、本気出して科学的に分かりやすく説明してみた」にある以下引用部分が非常にしっくり来ています。

「チームとは、人々が互いに新しいアイディアを生み出したり、互いに答えを見つけたり、互いに問題を解決したり、するための活動である。」(2012, Edmondson)

これが、チームが「動詞：チーミングだ！」と彼女が主張する、その意味です。

つまり、チームとはチーミングする集団であり、さらにこのチーミングを自分なりの言葉にすると、互いに成長し続け、常により良い成果を挙げ続けることと考えています。
よって、チームとは互いに成長し続け、より良い成果を挙げ続けることが出来る集団と考えています。

次項以降で、互いに成長し続け、より良い成果を挙げ続けることが出来る集団をもう少し深掘りしてみます。

成果とは
前項ではチームを互いに成長し続け、より良い成果を挙げ続けることが出来る集団としました。

次に成果とは何か、ここについて考えてみます。

「成果(セイカ)とは - コトバンク」を見ると、

あることをして得られたよい結果

こう書かれています。
ではよい結果とは何でしょう？
短期的に見れば利益が上がることもよい結果でしょうし、働く人が幸せになることが中長期的に利益に繋がればそれもよい結果だと思います。
非常に定量化することが難しく、一言では言い表すことが難しいものです。

またしても「いま話題の「心理的安全性」について、本気出して科学的に分かりやすく説明してみた」の引用になりますが、

過去の成功事例や、偉い人の書いたマニュアル通りにやればオールオッケーなチーム(実行志向のチーム)は減っていて、「不確実性と難度の高い挑戦」が求められるようなチーム(学習志向のチーム)が、増えてきているのではないでしょうか。

上記を自分なりの言葉にすると、中長期的に何が成果になるのか以前にも増してわからなくなっているです。

こうなってくるともはや一般的な成果を何かしらの言葉で一括りにすることは無理なので、組織ごとにOKR、KPI、KGI等色々な数値をもとに成果を定量化しているという流れになっていると捉えています。

また、組織ごとに成果を定量化したとしても、それは常に変動していくものであり、都度見直していく必要があるものとも考えています。

つまり、成果とは

画一的なものでない
流動的なものである
の2点が言えると考えており、自分なりの言葉にまとめると現時点で最良と思われる結果の指標であると考えています。

チームであるためには
チームの話に戻ります。
前項ではチームを互いに成長し続け、より良い成果を挙げ続けることが出来る集団としました。

より良い成果を挙げ続けることが出来なければそれはチームではないわけですが、上記に記載した通り成果とは組織ごとに個別に決めていく必要があります。
つまり、チームであり続けるためには何らかの方法で成果を定量化し続けていかなければならないと考えています。

ではどのように成果を定量化していけば良いのか？
こちらについてはあまりにも範囲が広すぎるのですが、少なくとも観点のひとつとして、メンバーが成長し続けているかを含める必要があると考えています。
もちろん成長した結果が組織に貢献していなければ組織としては意味がないわけですが、さきほど成果を現時点で最良と思われる結果の指標とした通り、何が組織にとって貢献になるのかさえ可変的で不明瞭になっていきていると考えています。
ここまで来ると、成果とは何かを常に考え続ける必要はあるにしても、少なくともメンバーが成長し続けていればそれは成果の一つとして捉えて良いのではないかという答えが自分の中で出てきます。

つまり、メンバーが成長し続け、成果とは何かを常に考え続けることがチームであるための条件だと考えています。

メンバーが成長し続けるためには
前項では前項ではメンバーが成長し続け、成果とは何かを常に考え続けることがチームであるための条件としました。

とすると、メンバーが成長し続けているかを見る必要があるので、本項ではそこについて考えていきます。

まず、成長とは何か？
「成長(せいちょう)とは - コトバンク」

生物が卵から成体へと刻々と変化している間に，大きさ，重量を増していく現象。もちろん一時的な水分の添加などによる変化は意味しない。この間，細胞の増殖を伴う。この現象において形態の変化を伴うが，その点を主眼点としてみる場合は発生という。生長とも書き，使い分けは明確でない。また発育という語との区別も一応のものである。

こう書いてあります。
わかりづらいですが、これを自分なりの言葉にすると、何かしらがインクリメントされるです。
これでもまだふんわりしているので、何かしらをいくつか列挙していきます。

プログラミングスキルが向上した
設計力が向上した
業務スピードが向上した
高い視座で考えられるようになった
今まで悩んでいたことが解決された
他のメンバーに言えなかったことが言えるようになった
etc...
少し挙げるだけでも非常に多岐に渡り、それぞれ個別に見ればある程度定量化することは出来ますが、これらの指標を全て定量化して成長を判断するのは非常に難しいと考えています。
そうなると、自分自身で成長出来たと実感出来たかが重要になってくると考えています。

では、どうすれば自分自身で成長出来たと実感出来たかを測ることが出来るのか？
私なりの答えは振り返りに尽きます。

何かしらがインクリメントされたかどうかを測るためには、過去と今を比較することが不可欠で、そのためのツールとして振り返りは最も強力で唯一のツールだと考えています。

その振り返りにも種類がありますが、個人的に行っているのは

日々の日報で1日を振り返る
スプリントレトロスペクティブで個人、チームとしてのKPTを振り返る
1on1で個人だけでは気付けない部分を振り返る。
の3つです。
3つ以外でも振り返りの方法はたくさんあると思いますが、方法はともかく短いサイクルで振り返ることが重要だと考えています。
人間は非常に忘れやすい生き物だと思うので、感覚が広がれば広がるほど過去のことを忘れてしまいます。
そうなると過去と今を比較がしづらくなってきてしまいます。
もちろん短すぎると成長の実感があまり出来ず振り返りの効果が薄れてしまいますが、いずれにしても振り返りを行わない限りメンバーの成長を測ることは出来ないと思います。

よって、短いサイクルで振り返りを行うことがメンバーが成長し続けるために必要がことだと考えています。

良いチームとは
前項では短いサイクルで振り返りを行うことがメンバーが成長チームであるための条件としました。

前項まででチームであるために何が必要かを考えたので、本項ではその先にある良いチームとは何かについて考えていきます。

しつこいようですが、良いとはどのようなことを指すのか、「良い - コトバンク」を見ると、

人の行動・性質や事物の状態などが水準を超えているさま。

こう書かれています。
つまり良いとは何かと比較して、その比較対象より優れている状態と考えています。

ここで、良いチームについて改めて考えてみます。

良い
何かと比較して、その比較対象より優れている
チーム
互いに成長し続け、より良い成果を挙げ続けることが出来る集団
上記がそれぞれの解釈なので、チームに対して何かしら比較対象を設け、それと比較した結果優れていれば良いチームであると言うことが出来ます。

では何を比較対象とすれば良いのか？
私の中の答えはチームの成長度合いです。

まず、成果について、画一的でなく流動的なものとしました。
そして、その成果はチームの構成要素のひとつであるため、チーム自身も画一的なものにはなり得ないとすることが出来ると考えています。
とすると、比較対象を外部にすることには無理があり、チーム内部で何かしらを比較する必要が出てきます。
次に、チームであるためには成長し続けている必要があるため、以前と今の力の比較は良いかどうかよりも手前の話になります。
外部と比較出来ず、以前と今のチームの力とも比較出来ないとなると、残るは成長度合いしか思い浮かぶものがありませんでした。

つまり、私の中で、良いチームとは、成長し続けるだけでなく、成長度合いを指数関数的に伸ばしていけるチームであると考えています。

良いチームであり続けるためには
画もなく文字ばかりになってしまいましたがそろそろ終盤です。

前項では、良いチームを成長し続けるだけでなく、成長度合いを指数関数的に伸ばしていけるチームとしました。

本項ではどうすれば成長度合いを指数関数的に伸ばしていけるチームになれるのか、またあり続けられるのかについて考えていきます。

指数関数的に伸ばしていくためにどうすれば良いのかを考える上では、「エクスポネンシャル思考」が非常に参考になりました。

上記書籍を簡潔にまとめることは非常に難しいのですが、私なりに指数関数的に伸ばしていくために必要な要素を簡潔にまとめると、

常に今を疑う
ムーンショットな目標を掲げる
あえて曖昧にする勇気を持つ
外部の人を積極的に活用する
目先のことのとにかく熱中する
素早く実行し、小さな失敗を繰り返す
このあたりがポイントになると考えています。

上記ポイントのそれぞれを自分なりにチームの活動に置き換えると、

常に今を疑う
「普通は」「常識的に」「当たり前に」という言葉を絶対に使わない
ムーンショットな目標を掲げる
「出来ない言い訳」よりも「どうすれば出来るか」を真っ先に考える
あえて曖昧にする勇気を持つ
ジョブディスクリプションだけに囚われない
外部の人を積極的に活用する
人の入れ替えだけでなく、ハンガーフライト等の交流で常に新しい風を入れていく
目先のことのとにかく熱中する
やることとやらないことを明確にする
素早く実行し、小さな失敗を繰り返す
短いサイクルでスプリントを回す
このようになりました。

つまり、これらのことを達成することが出来れば、成長度合いも指数関数的に伸ばしていくことが出来るのはないかと考えています。

前項までは自分なりに一言でまとめてきましたが、本項の良いチームであり続けるためにはを一言でまとめることはできないため、上記をまとめとさせて頂きます。

まとめ
ひたすら文字だけの投稿になってしまったので、一応各項をまとめておきます。

チームとは
互いに成長し続け、より良い成果を挙げ続けることが出来る集団

成果とは
現時点で最良と思われる結果の指標

チームであるためには
メンバーが成長し続け、成果とは何かを常に考え続ける

メンバーが成長し続けるためには
短いサイクルで振り返りを行う

良いチームとは
成長し続けるだけでなく、成長度合いを指数関数的に伸ばしていけるチーム

良いチームであり続けるためには
「普通は」「常識的に」「当たり前に」という言葉を絶対に使わない
「出来ない言い訳」よりも「どうすれば出来るか」を真っ先に考える
ジョブディスクリプションだけに囚われない
人の入れ替えだけでなく、ハンガーフライト等の交流で常に新しい風を入れていく
やることとやらないことを明確にする
短いサイクルでスプリントを回す
さいごに
自分なりに普段からなんとなく考えていたテーマでしたが、ここまで言語化して考える機会は今までありませんでした。
言語化したとは言ってもまだまだわかりづらく、間違っているところも多々あると思います。
ここはおかしい ここは間違っている 等ありましたらぜひご意見頂けますと幸いです🙇

良いチームを成長し続けるだけでなく、成長度合いを指数関数的に伸ばしていけるチームとしましたが、自分自身も指数関数的に成長していくという強い想いを胸に、平成最後の残り数日を、精一杯生きていきたいと思います。

褒める組織
マネジメント
心理安全性
こんにちは。 mixi AI ロボットチーム の開発マネージャーをしているインコです。
この記事は Engineering Manager Advent Calendar 2018 の18日目の記事です。

この記事では褒める組織を作った話をします。

私の環境
環境が違えばマネジメントの方針も変わります。
ここでは私の環境を書きます。

mixi という Web 企業の、研究開発からハードウェアまで関わる新規事業
まだ製品は出ていないフェーズ
私
開発チームのマネージャ
企画やデザインを含む事業全体のスクラムマスター（上記と兼ねている時点で良い SM ではない！）
実装・研究とマネジメントそれぞれ半々
スクラム開発
上司から大きめの裁量をもらっている
機械学習の研究寄り人材からハードウェアエンジニアまで多様なメンバー
問題：研究からハードまで扱うチームの情報共有
多様なメンバー
さて、環境にも書いたとおり私のチームは多様な人材がいます。

ディープラーニング(もしくは End to End 学習)主義者
元ベイジアン今ディープラーニングな転向者
自然言語処理er (ディープでない)
インフラ+サーバーエンジニア
メーカーからやってきたハードウェアエンジニア
ニューラルネット大好きエンジニア(インコ)
ざっと眺めるだけでそれぞれ全く違う言語を喋ってそうです。

技会
私達のチームには２つの特徴があります。

研究開発： 研究では広さより深さが必要です。各人が自分の専門を深く掘っていく必要があります。
新規事業： 新規事業ではチーム全員が同じ方向を向いてゴールを共有しながら進む必要があります。そうしないと空中分解します。
上のメンバーの多様性と合わせて、チーム内のコミュニケーションを意図的に増やしていかないと各人が自分の領域に閉じこもってしまいやすい性質の事業です。

そこでチームでは初期の頃から技術的知見共有会、略して技会という会を毎週開き、そこでは自由に技術系のネタを話せるようにしています。

ネタは業務上の共有（新しく作ったモジュールの説明だとか機械学習の知見）のような真面目なものから、特に業務に関係ないけど面白かった論文のシェアやデモ、俺の好きなアルゴリズムなどなんでも OK です。
毎回開催時に「今日ネタある人〜？」と聞いて適当に話します。

褒める・感謝する
技会（やその他いろんな会議）をファシリテーションするにあたって気をつけていることがあります。

発表してくれたことをまず感謝すること。褒めること。盛り上がること。

いちばん大事なのは、相手の話に興味を持つことと、それを素直に口に出すことです。
「めっちゃ面白いですね！」といった直球なものはもちろん、「〜〜はどうなってるんでしょうね」みたいな質問も内容への興味を持ってるんだよという姿勢を明確に出すようにします。言い方の例を出すと繕っているような印象になってしまいますが、思ったことを口にちゃんと出すのはとても大事なことです。

私の哲学ですが、「知らないことを恥じる」よりも「知らないことを知ってる人がいて面白い」という感覚を持つことが重要と考えています。知らないことを恥じて勉強するのは良いことですが、その気持が強いと知らないことを人は隠そうとしてしまします。知らないことを開示して、単純にそれを教えてくれたことに感謝しましょう。より知識が増えたらそれをまたチームに還元していきましょう。

褒めることは難しい
褒めるという行為は難しいです。
関係が悪化してしまうと、褒めることは自分を下だと認めることと感じてしまったり、逆に上から目線と感じさせる事になったりしてしまうこともあります。
関係がニュートラルなうちから素直に相手を尊重する文化を作り、育てて行くことが大事だと思っています。

また、上に書いたような事を明示的に伝えて賛同してくれるメンバーを作るのも大事です。
チームで褒める文化の価値を伝えたり、1on1などでそういう行動を取ってくれるメンバーに感謝を伝えたりしています。

褒める文化で起こること
Engineering Manager Advent Calendar でも重要なキーワードになっている「心理安全性」の高い組織ができます。

私のチームでは以下のようなことが起こっています。

マウンティングしなくなる
私はマウンティングは防衛本能のようなものだと思っています。他人に否定されないための防衛。
褒める文化の中では、まず最初に自分が受け入れられるところから始まるので防衛の必要性が下がります
（ただし、これはもしかしたら元々マウンティングとったりしなさそうな人を採用してるからかもしれません）
自分を開示しやすくなる
いろいろな話が共有されやすくなります
自分の好きなもの
今作ってるもので決めかねているところ
etc.
他人や他分野に興味を持つようになる
話す方も聞く方も楽しげになってくるので、自然と他分野に興味がわきます
よくわからない怖い世界が、専門じゃないけどなんとなく聞いて知ってる世界くらいになります
また他人に対する敬意も生まれます
これがT型人材を育てやすい環境を作っていきます
建設的な議論の土台になる
浅くはあっても言葉や知識の共通部分ができるため、議論をしやすくなります
肯定的なコミュニケーションを定期的に行っているため心理安全性がたかまり、建設的な対立する意見も言いやすくなります
といってもここは個人差があり、真っ向から異論を言いにくい人もいます
そういうところは1on1でケアしましょう
スケジュールの都合で開催されないこともありますが、これまで1年以上だいたい毎週技会は開催されていて、話す人がいなくてスキップとなったことはおそらく無い（あっても1,2回？）という高い継続率で運用されています。

課題点
課題点というほどではありませんが、人はそれぞれ発信したいタイプの人もいればそうでない人もいるので、発表者が偏る傾向はあります。
発信はしたくないというタイプの人に無理やり話させるのは良くないですが、発信したいけれども自信が無いという人に対してファシリテーションなどでうまく話をふるのをやっていかないとと思っています。

最後に
マサカリを投げ合う殺伐とした現場もエンジニアの一つの理想形かとは思いますが、私は肯定と相手への興味がベースになっている文化を広めていきたいと思っています。
ポエミーな感じになってしまい恐縮ですが、褒める組織が増えることを願っています。

本記事はEngineering Manager Advent Calendar 2018の19日目です。

エンジニアリングマネージャーをやっているとメンバーの退職というイベントが発生することがあるかと思います。
この退職というイベントはエンジニアリングマネージャーにとってはとても悩ましくどう対処すべきなのかが難しいイベントでもあるにも関わらずテーマがテーマだけにあまり知見が共有されない話題のように思います。

そこで今回は退職についてどう向き合うべきなのかを私の観点から書きたいと思います。

退職云々の前に普段から考えておくべきこと
メンバーがいなくなるとどうなるかを考えて組織戦略を考える
退職に関わらず、怪我・病気や、ライフイベントなどでチームからしばらく離れることがあると思います。

そういった場合にチームのアウトプットにどのような影響があるか、その影響は事業の持続性、システムの持続性にどのような影響を与えるのか。 影響がある場合取れる選択肢はなんなのかを普段から考えて組織戦略を考えておくべきです。

事業の持続性、システムの持続性に関する影響例

システムの運用が止まるもしくは遅くなるか
他のメンバーで回せる業務か
縮退運転が可能か、その許容期間はどれくらいか
収益への影響がどれくらいの期間でどれくらいの金額になるか
監査への影響がどれくらいあるか
...
このような事業の持続性、システムの持続性に関して判断するためには、メンバー、そしてチームのスキルセットを正しく把握しておく必要があります。

チームでスキルマップを作ってみるなどのワークをチームビルディングの過程などで一度はやっておくとよいでしょう。

我々はなぜここにいるのか
これは根源的なテーマです。 多様な働き方を選択できる世の中になった今あえてその組織において働く理由はなんなのでしょうか？
人によってその目的は様々だと思いますが、マネジメントとしては全メンバーのWillを把握しておくべきです。

そこから組織に期待されていること、組織として提供できる価値そしてその優先順位を明らかにすることができます。

またその目的がどれくらいのタイムスパンで達成されるものなのかも考える必要があります。

達成した先に新たな目的を考えるべきなのか、その組織を離れて次のチャレンジに移行するのか、組織の提供価値と期待がずれてきていないかを判断する基準になるからです。

できればこの組織に期待されていること、組織として提供できる価値は経営陣とも認識をすり合わせておけると理想です。退職に関しての捉え方がずれていると経営陣からのマネジメントに関する評価においても不幸な結果につながる可能性があります。

メンバーとの信頼関係
これがもっとも重要です。
上で述べたようにメンバーがその組織にいる目的や将来のビジョン、マイルストーンについて普段から腹を割って話せる関係であることが非常に大事です。

フラットな関係で双方向のフィードバックをできなければ組織の持続性において重要なインサイトを見逃すことになります。

退職したいと言われたら
以上のような前提の上で、退職の相談をされたらまずは理由を聞きましょう。
仕事を変えるというのは人生において大きな決断です。
その決断をしたということはそこに大きな理由があるはずです。

やりたいことをやり尽くした
起業する
引っ越す
人と合わない
方針・価値観が合わない
報酬が合わない
やりたいことができない
...
それがポジティブ、ネガティブ関わらず、考えていた組織戦略の中で想定できていたものなのかが重要です。

想定できていた理由だった場合
想定できていた理由であれば素直に送り出しましょう。

ただし、上で述べたようにメンバーがその組織にいる目的が達成されたかどうかがポイントになります。
目的が達成されていないようであれば、メンバーが抱えている問題に対して退職という解決策が適切でない可能性もあります。
そのようなケースの場合は引き止めにならないように気をつけながら率直なフィードバックを試してみましょう。

メンバー自身の課題の可能性がある場合、

この課題についてはどう思っている？
何が問題だと思う？
誰が解決すべき問題だと思う？
自分の力では解決できないと判断したのはなぜ？
それは誰かに相談した？
などです。
場合によってはまだ残ってチャレンジするという決断に変わるかもしれません。

想定できていない理由だった場合
想定できていない理由だった場合、その決断のきっかけとなった課題をなるべく聞き出しましょう。

課題をヒアリングしたらマネジメントメンバーでその課題を分析し組織としてのアクションを考えます。場合によっては経営陣を巻き込んで課題解決に向かう動きをしていきましょう。

課題をそのままにせず、必ず解決に向かっていくことを本人、そしてその他のメンバーにも伝えていきましょう。逆に課題を放置してしまうとさらに人が離れていってしまう原因に繋がってしまいます。

引き止めをすべきか
引き止めによって残る決断をし結果的に組織としてはよかった、というケースもあるかもしれません。

しかし、私は基本的に引き止めには前向きではありません。
なぜなら、引き止めは普段から期待値と提供価値がずれてしまってきていたことを見逃した挙句言われてやるというマネジメントとしてはまったくバリューを出せていない行為だからです。

想定していなかった理由で退職の相談をされた時点で手遅れという見方をしたほうがよいでしょう。

普段から先手を打てるようにインサイトの収集に時間を使いましょう。

メンバーへの伝え方
伝えるべきメンバーの数が少ない場合はメンバーを集めて伝えるのもよいです。
チームメンバーなど関わりが深い人たちへ先に本人から伝える場を設けるのもよいでしょう。

伝えるべきメンバーが多い場合は、事実の周知と今後の方針について先にチャットなどで伝えた上で1on1等の心理的安全な場で感情面も含めたケアをしていくのがよいでしょう。

ここでの重要なことはマネジメントとして退職についてそもそもどういう考えを持っているかを伝えること、課題があればそれに向き合っていくということをきちんと伝えることかと思います。

長く一緒に働いてきたメンバーが離れるのは寂しいですが、感情面だけでなく事業・システム・組織の持続性の観点から論理的に捉えることも重要です。

1点気をつけたいのは伝えるべき人に本当にきちんと伝えられているかということです。個別に伝える方針をとった場合、情報の非対称性が起きるリスクが高くなります。人づてに聞いて「知らなかった・・」となるのは最悪です。

組織の持続性について
チームそして組織はなるべく固定化して長く同じメンバーで試行錯誤し続けることでナレッジが溜まりパフォーマンスの向上につながります。

一方で、同じメンバーで同じ仕事をする期間が長くなりすぎるとダブルループ学習がしづらくなるという問題もあります。

チームは短期的な観点では固定化したほうがよい反面、長期的な観点では小さな流動性を持たせたほうがよいと考えています。

取り組むミッションを変えたり、チームを異動したり、退職したり、こういった変化は短期で大きな変化を起こすことはアンチパターンですが、長期で小さな変化を起こしていくことはむしろ組織の持続性の観点で重要です。

ということで、何を伝えたいかというと退職というとネガティブなイメージを持たれることが多いと思いますが、ちょうどいいタイミングというのも存在すると私は思っていまして、エンジニアリングマネージャーとしては真剣にやるが深刻になりすぎないようにするのが心理的な負担を考えてもよいのではないかなということです。

最後に
エンジニアリングマネージャーをやっていると組織のいろいろな課題に向き合わなければならず、ときに辛いときもあるかもしれませんが、退職のような難しいテーマについても正しく捉えることできっとうまく付き合っていけると思っています。

退職したあとも副業で手伝ってくれたり知見を交換しあったりそんな良い関係を作れたときはうれしいですよね。既存の概念に縛られずどう人とのつながりを作っていくかがエンジニアリングマネージャーの仕事の醍醐味とも言えると思います。



どうもこたにんです。

心理的安全、確保してますかーーー？（してるーーー！！）
チーム、自己組織化してますかーーー？（してると思うー！）
リーダーシップ、発揮してますかーーー？（してる、かな、、、）

というわけで本記事は Engineering Manager アドベントカレンダー 20日目の記事です。

はい、目次どん！

リーダーシップについて
「リーダーシップ」と聞いて抱くイメージって？
ELASTIC LEADERSHIP で語られる3種のリーダーシップ
1. 指揮統制型リーダーシップ
2. コーチ型リーダーシップ
3. ファシリテーター型リーダーシップ
本記事で語るリーダーシップ
サーバント・リーダーシップ（支援型リーダーシップ）
サーバント・リーダーシップとは？
サーバント・リーダーシップの10の特性
サーバント・リーダーシップとHRT原則
煽り型リーダーシップ
煽り型リーダーシップとは？
なぜ煽ろうと思ったのか？
煽ると何がいいの？
How To 煽り
CASE1：緊急対応をしなきゃいけないとき
CASE2：新しい領域に挑戦したいとき
CASE3：タスクの役割分担をするとき
煽り型リーダーシップに徹してみて感じたこと
煽りを適用するまでの準備は大事に！
みんななんだか楽しそう！（に見える！）
私も煽られるようになる！
まとめ


リーダーシップについて
「リーダーシップ」と聞いて抱くイメージって？
リーダーシップ、leadership。
leadとは日本語で「導く」と訳される、リーダーシップと聞くとこういうイメージ。

民衆を導く自由の女神 - Wikipedia

先導をきって民衆（チーム）を進むべき方向に導く指揮統制力の高い人。
そういうイメージを抱くのではないかと思います。

「あの人リーダーシップあるよな」と思い描く人は、得てしてこういうイメージ。
間違ってないイメージ、そうやって育つから。


ELASTIC LEADERSHIP で語られる3種のリーダーシップ
ただ本記事は Engineering Manager という枠での記事なので、少し定義が異なります。
以下書籍から引用します。

エラスティックリーダーシップ ―自己組織化チームの育て方
ELASTIC LEADERSHIP では、自己組織化されたチームを作り上げるために必要なリーダーシップとは？を掘り下げています。
ただ、チームを取り巻く環境や現状によって、必要とされるリーダーシップのかたちが異なる、と。


1. 指揮統制型リーダーシップ
「サバイバルフェーズ」と定義する状態があります。
サバイバルフェーズとは、山積するタスクをとにかくこなしていかなければならない。
時間のない中ひたすらに気力と体力で乗り切らなければいけない、そんな状態。
一言で言えば「炎上案件」の渦中にいる状態。

そのような状態で必要とされるのは「指揮統制型リーダーシップ」と。
チームメンバーが少しでも安定して時間を作りタスクに集中できるようにする。
現状把握、課題解決、作業割り振り、とにかくチームに目配せをして導く役割。


2. コーチ型リーダーシップ
「学習フェーズ」と定義する状態があります。
学習フェーズとは、サバイバルフェーズを抜け出したチームが入るフェーズ。
時間的ゆとりをもって自分たちの成長・スキルアップに時間を使える、そんな状態。

そのような状態で必要とされるのは「コーチ型リーダーシップ」と。
チームメンバーが自分たちで課題解決・学習・挑戦ができるように、あえて試練を与える。
失敗してもそれを責めずに課題解決を促して見守る、とにかくチームを自立に導く役割。


3. ファシリテーター型リーダーシップ
「自己組織化フェーズ」と定義する状態があります。
自己組織化フェーズとは、学習フェーズから昇華したチームのかたち。
自分たちで課題解決ができるようになり、意思決定できる、そんな状態。

そのような状態で必要とされるのは「ファシリテーター型リーダーシップ」と。
チームの生産性を維持しつつ目標達成ができるように、強く干渉することはしない。
新たな取り組み・実験を行っていき、チームをさらに発展させるよう導く役割。


本記事で語るリーダーシップ
リーダーシップというのは、チームを自己組織化させるために必要となる役割。
本記事では、そういう役割の「リーダーシップ」についてのお話です。


サーバント・リーダーシップ（支援型リーダーシップ）
本題に入る前にもうひとつ。
前項3種類のリーダーシップとはまた少し異なる、サーバント・リーダーシップなる役割があります。


サーバント・リーダーシップとは？
NPO法人日本サーバント・リーダーシップ協会

こちらのページにどういうものかの記載があります。

「リーダーである人は、まず相手に奉仕し、その後相手を導くものである」というリーダーシップ哲学です。
サーバントリーダーは、奉仕や支援を通じて、周囲から信頼を得て、主体的に協力してもらえる状況を作り出します。

奉仕や支援をするサーバントに徹して、メンバーの自立を支える、縁の下の力持ち的な役割。


サーバント・リーダーシップの10の特性
先程のページにサーバント・リーダーシップの10の特性、というものが提唱されています。
サーバントとはどういう役割なのか、特性を見ると理解しやすいので引用します。

傾聴：相手が望んでいることを聞き出すために、まずは話をしっかり聞き、どうすれば役に立てるかを考える。また自分の内なる声に対しても耳を傾ける。
共感：相手の立場に立って相手の気持ちを理解する。人は不完全であることを前提に立ち相手をどんな時も受け入れる。
癒し：相手の心を無傷の状態にして、本来の力を取り戻させる。組織や集団においては、欠けている力を補い合えるようにする。
気づき：鋭敏な知覚により、物事のありのままに見る。自分に対しても相手に対しても気づきを得ることが出来る。相手に気づきを与えることができる。
納得：相手とコンセンサスを得ながら納得を促すことができる。権限に依らず、服従を強要しない。
概念化：大きな夢やビジョナリーなコンセプトを持ち、それを相手に伝えることができる。
先見力：現在の出来事を過去の出来事と照らし合わせ、そこから直感的に将来の出来事を予想できる。
執事役：自分が利益を得ることよりも、相手に利益を与えることに喜びを感じる。一歩引くことを心得ている。
人々の成長への関与：仲間の成長を促すことに深くコミットしている。一人ひとりが秘めている力や価値に気づいている。
コミュニティづくり：愛情と癒しで満ちていて、人々が大きく成長できるコミュニティを創り出す。

サーバント・リーダーシップとHRT原則
上の10の特性からも感じ取れると思いますが、サーバントはとにかくチームメンバーのためを思います。
謙虚に、尊敬し、信頼する。
これは、HRTの原則だ！！

以下書籍の引用です。

Team Geek ―Googleのギークたちはいかにしてチームを作るのか

謙虚（Humility）
尊敬（Respect）
信頼（Trust）
これらの価値を大事にすることで、チームの心理的安全性を高め、素敵なバリューが生まれると。
これがHRTの原則。
そのような働きかけを行うことが、サーバント・リーダーシップのかたち。


煽り型リーダーシップ
ここまで、複数のリーダーシップについて話しました。
ここから、本題。

煽り型リーダーシップ
という新しい役割を提唱します。

よし、初出！
わたしが提唱する言葉なので、あんまり難しい単語・用語は使いません。
思った言葉で気楽に書きます。


煽り型リーダーシップとは？
文字通り、煽ります。
行動するように焚きつける、仕向ける、競争心を誘う、勢いをつける。
感情を逆撫でしかねない煽り文言が、メンバーを鼓舞する魔法の言葉になる。

チームメンバー全員がフラットに煽り合い、鼓舞し合い、高め合う。
そんな心理的安全性の高いチームを作り上げる新しいリーダーシップのかたちです。


なぜ煽ろうと思ったのか？
わたし自身がチームマネジメントをはじめたのは27歳のとき。
それまではチームマネジメントの経験はなく、とても不安だった。
わたしが管理するチームは、わたしが一番年下。
年齢的にも、経験値的にも、やっぱりどうしても不安な部分が多かった。

そんな不安を補うためにいろんな書籍でいろんな知識をドーピングした。
取り入れたはいいのだけど、どうやってそれを実践していくか考えた。
ただ闇雲に支援に徹することで実現可能ではありそう。

それを実践していっている中で、自問自答した。
今の自分のキャラクターを変えてまでサーバントに徹して、やりごたえあるのかしら？
わたしらしく、わたしの色が出てるのかしら？

そういう、個性を重視したいという考えがよぎった。
先駆者たちの確立したリーダーシップ手法を吸収しつつ、もっと楽しく素敵にチーム作りはできないか。
：
よし、煽ろ！
無理に着飾ってがんばりすぎず、ありのままの自分のキャラクターで役割を作ろう。
自然体の中に、さまざまな手法やマインドを織り交ぜていこう。

これが煽り型リーダーシップをはじめた経緯。


煽ると何がいいの？
結論、心理的安全が高まってメンバー全員が楽しそうに仕事をするようになります。
なるはず、なると思います。
Noと言えるチーム、のさらに先です。
え？と言えるチーム、喧嘩したいわけではないよ。

煽りを取り入れてから感じたチームの変化、よかったことを箇条書きしてみる。

チームメンバー同士やマネージャーとの会話が増えた
言いやすい雰囲気を持ったチームの文化が醸成されていった
突貫の緊急案件を楽しく捌くようになった
タスクの取り合いが発生するようになった
チームの内情・状態の変化を拾いやすくなった
手法は違えど、先駆者の提唱したリーダーシップが目指すチームの姿と同じものになることがわかりました。
メンバーや他チームからも、雰囲気良くなったとかすごい言い合ってるね大丈夫？とか言ってもらえるようにもなりました。


How To 煽り
煽り、それはわかった。
実際にどういう感じで煽っていくのか、いくつかのケースでご紹介します。
伝わるか伝わらないかわからないけど、サンプルケースをご覧ください（ほぼ実話）
K...こたにん　A, B, C...メンバー

CASE1：緊急対応をしなきゃいけないとき
A「たぶんこうすれば出来ると思うんだけどー・・・」
K「え？やるっしょ？」
A「やるし、やるから完了するまで黙っててください」
K「ウッス」

緊急対応という、決定判断を急がなければいけない場面での一幕です。
緊急対応や障害対応などは、焦りを生んだり苛立ちが目立ったりしがちです。
そのような不安定な心理状態になる前に、煽る。
一気に焚き付けて、メンバーが即座に決定を下せるようになる、そんな例。


CASE2：新しい領域に挑戦したいとき
A「次こういう技術使ってみたいな」
B「でもどうですかね、学習コストかかっちゃいますかね」
K「え？やるっしょ？やんないの？あれれ？」
A「やりたいから時間くれ...」
K「ウッス」

時間の余裕があることがわかり、何か新しい取り組みを検討している場面。
その取り組みから見えるチームのアウトプットが、チームとして間違っていなさそうであれば良し。
それに挑戦すること自体は背中押しをして、阻害要因を潰してあげる動き方をしたい。
メンバーから課題解決を求められるようになる、そんな例。


CASE3：タスクの役割分担をするとき
A「今日のこのタスク、僕がやります」
B「いや、私にさせてください」
C「私も今日時間あるのでできそうです〜」
K「え？じゃあわたしやろっか？」
ABC「どうぞどうぞ」
K「えっ、えっ」

チームのタスクをメンバー全員で確認中、自分たちで意思決定をしはじめている場面。
干渉することなくチームは回ってきはじめているので、決定をすることに対して煽って遊びにいってるだけ。
逆に煽られるようになる、そんな例。


煽り型リーダーシップに徹してみて感じたこと
煽りを適用するまでの準備は大事に！
煽り型リーダーシップの根底には、サーバント・リーダーシップ、HRTの原則があります。
謙虚さがあるかと言われたら、それは少し違うかもしれないですね。

煽りは、圧倒的横柄さを備えています。
「謙虚（Humility）」の対義語は「傲慢・横柄（Haughty）」
ということは、HRT原則には変わりない！

しかし、その横柄さを適用するには、尊敬と信頼というものが絶対に必要です。
ある日突然、急に煽ってくるようになっても、それはとてもびっくりさせるだけ。
とにかくメンバーとの信頼関係を築きましょう。

それは1on1かもしれないし、ランチや飲み会かもしれない、軽い雑談かもしれない。
やり方はそれぞれあると思いますが、煽り煽らないに関わらず、信頼関係を築きましょう。

信頼関係を築いて尊敬し合えるようになり、横柄さを表に出して煽ることができる。
準備はだいじに。


みんななんだか楽しそう！（に見える！）
煽って煽られてを続けていくうちに、みんなが楽しそうになった。
本気で煽って喧嘩したいわけではないので、冗談交じりの会話が増えた。
常に自分が会話のハブにならなければいけないということがなくなる。
メンバー同士や他チームとの交流が盛んになり、明るくなった。

ように見える！
（みんなにフィードバックもらお）


私も煽られるようになる！
うん、煽られる。
これは完全に予想外でした、少し考え巡らせれば当たり前にわかることなのだけど。
煽る以上、煽られることを想定しなきゃ。

でもそれって、かなりチームの状態が良いということを表している、素敵な姿じゃないのかしら。
外から見るととても異質な状態（お固く言えば、部下が上司に口語で楯突いている状態）なのだろうけど。
それがチーム文化として受け入れられ、生産性を高める取り組みになっているのであれば、それもひとつの答えなのかな。

ただ、煽る煽られるは、場面は弁えましょう。。。
（お客様の前とか、そういう、ね、大人なら大丈夫だろうけど）


まとめ
煽り型リーダーシップ、どういうものか認識してもらえましたでしょうか。
心理的安全を高めるためのひとつの回答、という具合に参考にしていただければと。

提唱する背景が、わたし自身の個性を発揮できるかたちのリーダーシップの模索、だったのですが。
チームを自己組織化に導いていくリーダーシップを求められる方、そういう役割を担いたい方、それぞれで個性は違います。
リーダーシップに必要となるとても大切な共通の考え方というものはしっかりと認識しておきつつ、それを自分なりにアレンジして、自分のキャラクターを織り交ぜて、何か自分の色がついたリーダーシップを見つけていってもらえると何よりです。


それでは、最後に煽って締めさせていただきます。
「シェアするっしょ？」


エンジニアリングマネージャーと組織デザイン
組織
EngineeringManager
この記事はEngineering Manager Advent Calendar 2018の12/21日の記事です。

これまでの記事を読んでいると同じことを考えている方がいたり参考になる記事も多く学びの多い年末となりました。

はじめに
RettyでVP of Engineeringをやってるkosakoです。

Rettyではこの一年開発組織における課題発見とその解決に向けて様々な取り組みを行ってきました。

課題を洗い出して、課題感が高くかつ解決しやすいものから優先的に取り組んできましたが、一方でどのように組織を設計していくのか？といったことを考えるようになりました。

まだ自分の中でも明確な答えは出ていないのですが現時点での考えを整理してみたいと思います。

よくある課題
プロダクトを作って運用を続けると必然的に技術負債が増えていきますが、今後どのように取り組んでいくか？いつのタイミングでどう解決するのか？といったことはよく議論にあがります。

また過去に作ったプロダクトがあるが運用責任者がいなかったり、オーナーのいない機能やツールなど宙に浮いた責務問題などもよく見かける課題だと思います。

その他にもエンジニアのhuman managementはエンジニアがやったほうがよいということがよく言われますが、やりたがるエンジニアがいなかったり、いても人数が足りなくて一人に負荷が集中するといったこともよく聞く話です。

役割を作る
開発組織において、様々な役割は存在しており

CTO
VP of Engineering
Engineering Manager
Product Manager
Tech Lead
などがあります。

その他にもシニアタイトルやアーキテクト、リードエンジニアなどもありその定義も明確なものではなく、なんとなくのイメージはあるものの組織に合わせて定義されるものだったりすると思います。

ここで、この課題を解決する役割の人はTech Leadがあっているようだといったことをしていくと短期的には課題が解決されたりしますが別の課題が出てきます。

似たような役割がふえてしまい結局責務が曖昧になってしまったり、役割ではなく役職になってしまい責務はないのに肩書がある人がふえてしまったり、一つのことに複数の責任者がいることになってしまったり(指揮系統の混乱)、役割を担える人数が足りずにチームをまたいだ兼務の人が増えすぎてしまったりといったことなどが考えられるかと思います。

もちろん組織の規模により必要な役割は増えていきやすいものですが、基本はできるだけシンプルに保つほうがよいはずです。

必要なことは組織やチームで必要な責務を明確にすること、そしてその責務を果たす人がちゃんといることです。

そのためには役割はできるだけシンプルにしてある程度抽象的な役割にしておき、実際の責務をだれにどう割り振るかはそのチームごとに決定するほうがよいと考えています。

その決定事項をjob descriptionとしてチームで共有するといったことなども有用だと思います。

ちなみにどうしても担える人がいない責務はチーム外にアウトソースする選択肢を持つといったこともありでしょう。

では様々な役割がある中でどのような役割を設置すればいいのでしょうか？

それを考えるにはエンジニアや開発だけを見るのではなく組織全体を見ながら考えることが必要になってきます。

事業部制組織と機能別組織
組織の形の話をするときによく出てくるのがこの2つになります。

事業部制組織
事業部制組織はプロダクトや顧客といった単位で事業を区切って組織を作る構造です。

区切り方はサービスごとだったり、toC・toBといった顧客のタイプだったり、営業組織などでは関東や関西といったエリアごとになったりします。

WEBサービスの開発ではにおいては、アプリチーム、検索チームといった形が一般的でしょうか。
そのチームの中にチームリーダー、デザイナー、エンジニアなど様々な職種の人間で構成されます。

メリットは意思決定がチームに与えられるためスピードが早く、全員がチームの目標に向かえるためモチベーションも高い傾向にあります。

デメリットとしてはチーム関連系が弱くなり全社でのノウハウ共有や共通化といったことが問題になりやすいといったものがあります。

機能別組織
機能別組織はR&D、エンジニアチーム、デザイナーチームといった機能別だったり職種別で組織を作る構造になります。

メリットとしては知識の共有が進み専門性が高めていけるところだったり、効率性を非常に高めることができます。

デメリットとしては最終的なプロダクトに対する意識が低くなりやすかったり、職種をまたいだ連携がやりにくくなったりするといったものがあります。

また、意思決定までのラインが長くなりがちで問題が起こったときに各部門だけで意思決定できなくなってしまうといったことも問題になります。

マトリクス組織
それぞれにメリット・デメリットがあるわけですが、スタートアップにおいては基本事業部制をとっているところが多いと思います。

理由はいろいろあると思いますが、不確実性が高い状態においては、意思決定までのコミュニケーションパスが少なく調整コストが低い事業部制が有利になります。

一方で、技術負債の蓄積などによりサービスのフルリニューアルや基盤の統一化といったことをが必要になった時に理解が得られにくい、決断できないといった課題を抱えてるケースも多く見られます。

そこで機能と事業の両方の軸を取り入れたのがマトリクス組織となります。

事業部制と機能別のいいところどりをしようとして導入される形態ですが、もちろん銀の弾丸ではありません。

完全に権限が同じだとうまくいかない例が多く、一人に二人のbossがつくことになるため信頼関係がより強くなった方に嫉妬が生まれるといったことも起きやすくなります。

基本的にはマネジメントの難易度が高く難しい形態であり、調整コストも高くなりがちです。

したがって何を優先するべきかを考えた上で権限、責務の差をつけるようにしたほうが難易度は下がると思います。

プロダクトの成長やマーケットフィットが優先事項の場合は事業部を強くする
高度な技術の開発や基盤の構築が優先事項の場合は機能部門を強くする
今の自分たちに必要な組織デザインとは?
では結局どのようなカタチにすればいいのでしょうか?

エンジニアだけ見てあるべき論で役職や役割を設定してしまうと既存の組織デザインとコンフリクトすることもあり、対立構造になってしまうリスクがあります。

今が間違ってるとかあるべき論が正しいとかではなく、現在の組織がどのような意図をもってデザインされているのか?それが事業フェーズや組織の成長によってリファクタリングが必要なフェーズに来ているかどうかといった視点で考えてみる事が重要ではないかと思います。

またエンジニア組織が事業においてどのような役割になっていて、解決するべき課題はなにかといったことを考えて変えていかなければ、実情にそぐわなくなってしまう危険性があるので注意したいところです。

過去現在未来何を重要と設定してきてどう変化していくのかという観点から、全体の組織デザインを考えること。そして今と未来が繋がるように移行プランも考えながら実行していくことが重要ではないでしょうか。


エンジニアリングマネージャーとしてこころがけていること
EngineeringManager
これはEngineering Manager Advent Calendar 2018 22日目の記事です。
(遅刻しました、ごめんなさいごめんなさいごめんなさい。)

とあるIT企業で、エンジニアのチームのマネージャーをやっています。1

スロースターターかつスローモーなもので、10年以上マネージャーをやってきて、ようやくここ数年、自分なりのマネジメントのやり方に自信とか確信とかいうようなものができてきました。それまでは、上司や先任のマネージャーにダメを出されて自信がぐらぐらすることが多かったように思います。自信をぐらぐらさせながらも続けてきたことが結果になって表れるのを何度も経験したことと、同じ考えでマネジメントをやっている方々が自分以外にもたくさんおられることを最近知ったことで、「あ、俺、意外と間違ってなかったじゃん」と思えるようになってきた次第です。
そんな私の自分なりのやり方、意識してこころがけてきたことを、初めて文字にしてみました。EM Advent Calendar を書いている方々/読んでいる方々にとっては、あたりまえのことも多いかと思いますが、ご笑覧いただければ幸いです。

1. チームを心理的安全性の高い場にするために
マネージャーになった当初から (当時は「心理的安全性」という言葉はありませんでしたしそんな高尚なことを考えていたわけでもなく) 妙に気をつかった堅苦しいコミュニケーションをするのもされるのも嫌いで、私とチームのメンバーとの間もメンバー同士の間も、言いたいことをフランクに言い合える間柄にしたいと思っていました。そうなるように、と言うよりも、そうならなさそうで嫌なので避けていたことがこんな感じです。

上下関係にしない。 (「部下」「上司」という言葉を使わない、役職で呼んでもらわない)
辞令が出たその日に「課長って呼ぶの禁止な」と宣言しました。「部下」「上司」という言葉を使うのもやめました。
自分のダメなところも隠さず晒す。
私が、マネージャーとしてどころか社会人としてどうよっていうくらいのダメっぷり ─ 期限を守れないとか…このエントリみたいに ─ なもので、隠そうにも隠しようがなかったというのがほんとのところです。
叱らない、提案する。人前ではやらない。
否定しない、なにごとも一旦は「共感」する。
自分が「上司」からやられてモチベがだだ下がりになったことが反面教師になりました。
褒めない、感謝する。みんなの前でやる。
お気づきかと思いますが、アルフレッド・アドラーの受け売りです。これはごく最近知って、変えました。
2. チームを自律的組織にするために
「自律的な組織にしましょう」とは昔も良く言われていたのですが、そのわりには、いちばんダメ出しを食らって自信がぐらぐらしたのがこのあたり、指示しないこと、決定・決断しないことでした。

指示しない、提案・アドバイスする。
決断・決定しない、チームに任せる。チームの決断・決定は無条件に支持し責任をとる。
私が、適時的確に、指示したり決断したりできるほど有能ではなかったってだけです。 その代わりというか、私にでもできることは「ケツを持つ」ことくらいだと思ってそこは徹底しました。
情報は原則オープン。アクセスを制限しない。
どうも日本人は (って主語大きすぎかもですが)、原則「非公開」例外的に「公開」なことが多くて不満だったことの裏返しです。ただし、制限はしてませんが、積極的に共有できているかというと、なかなか大変でまだまだできているとは言えません。
思いを、ありたい姿を語る。常に、何度も。
「マネージャーは組織のビジョンをチームのビジョンにブレークダウンしてチームに伝えるべし」みたいなことをよく言われますが、そう簡単に伝わりゃ苦労はしません。組織の/チームのビジョンを自分の「思い」まで消化/昇華して、何度も何度も「あー、また言ってるよ」と言われるくらいまで、ことあるごとに語らないと伝わらないよなと、これだけは長年やっていたおかげで、実感しました。
3. 人を活かす
得意がない人はいない、だめな人もいない。全力で得意を見つける。
問題行動は「場」が原因、場を改善して解決する。
問題の原因は人ではない、コト。
このへんも昔からなんとなく思っていたことですが、ここ数年の実体験で確信に変わってきました。 得意なことが見つかったり、場が (心理的安全性が高いとかに) 変わるだけで、人って変わります。 ただし、得意なことを見つけたり、安全な場で心を丸腰にして動けるようになるまでに、年単位の時間はかかります。
得意をメンバー間で相互補完する。不得意を無理に改善させない。
多様性を全面的に肯定する (得意不得意、性格、考え方、働き方、etc)
学生のときは「不得意科目の点数を伸ばしなさい」とよく言われたものですが、それは得意科目には100点満点という上限があったからなんですね。でも社会に出たら満点も上限もありませんから得意なことは伸ばし放題、不得意を改善するよりも、本人にとってもチームにとってもはるかにお得だと思うのです。
4. サーバント リーダーシップ
これも、言葉を知らないころから、自信はないながらもなんとなくそのように行動していました。最初は Simon Sinek だったと思いますが、この考え方を知って膝を打ちました。その後、前述のアドラーやロッシェル・カップさんなど、いろいろな方の知見で

「信用」ではなく「信頼」する (無条件に信じる)。性善説に立つ。
チームとメンバーを守る盾になる。
5. 技術
技術力では、チームメンバーにはまだ負けないぞ、と思っています。もちろん、技術のディテールや実践経験でチームメンバーを上回るのは難しいですが、自分の知識・知見を常にアップデートして、チームが技術で困ったとき・悩んだときには一緒に悩めるように、高い視点と広い視野は維持し続けたいと思っています。

チームに高い視点と広い視野を提供する。
悩むときは一緒に悩む
私のこういう「こころがけ」がどれだけ奏功しているかは検証できていませんが、今のところチームは、私が年寄りゆえに研修や啓蒙などの業務に引っ張って行かれてなんだかんだで1週間くらいオフィスに顔を出せなくても何の問題もなく(?)回っているし、親子に近いくらい年齢の離れたメンバー同士が相互に教え・教えられしているし、いい感じに回っていると思います。でも実は私には見えていない問題を抱えているかもしれないし、近い将来何かをきっかけにおかしくなり始めるかもしれない。この「こころがけ」は、EM Meetup や EM.FM や、ここ集まったみなさんの知見も参考にさせていただきながら、アップデートし続けていかないといかんと思っています。

実は、マネージャーになった当時の肩書は「課長」だったとか、今は既に役職定年して「マネージャー」という肩書ではなくなっているとか、細部が正確ではありませんが、そこは本題ではないのでよしなにお願いいたします。 ↩

消極的なキャリア選択を減らすためのEngineering Manager入門
10

serima

2018/12/23 04:08
こんにちは。
株式会社GameWith で Engineering Manager をしています @serima です。

この記事は Engineering Manager Advent Calendar 2018 の 23 日目の記事です。

問題提起
Software Engineer が足りない！と叫ばれている昨今ですが、それと同じくらい、もしくはそれ以上に Engineering Manager が足りていないと言われています。
いわゆる Web 業界も成熟期を迎え始め、ミドルマネジメントレイヤーの重要性が増してきているのだと思います。

よくあるソフトウェアエンジニアのキャリアパスとして「マネージャー」か「スペシャリスト」があると思いますが「マネージャーになりたくないから、スペシャリストを志向する」という消極的なキャリア選択を少しでも減らせると良いなと思っています。

Engineering Manager というキャリア選択をした私の事例によって、今後だれかがキャリア選択をするときの参考になれば幸いです。

目次
・どのようにして Engineering Manager になったのか
・Engineering Manager 入門
・Engineering Manager の醍醐味
・Engineering Manager の目的と手段の話
・どのように手段を磨くのが良いか
・終わりに

どのようにして Engineering Manager になったのか
私は 2017 年 3 月に株式会社GameWith にサーバサイドエンジニアとして入社しました。
以前の職場では小さなチームのテックリードやエンジニアリーダーに就いたことがあり、今後はより一層マネジメントに携わりたいという思いがありました。
しかし、会社として「いまは手を動かせるソフトウェアエンジニアが必要であり、マネージャーのポジションをすぐに用意することはできない。将来的にということであれば」ということで入社しました。

2017 年 3 月というのは GameWith が東証マザーズに上場する 3 ヶ月前で、サービスも成長を続けている、そんな時期でした。

開発チームは少数精鋭で、この規模感のサービスを 10 人程度で開発運用しているのかと驚いたのを覚えています。

前述の通り、入社 3 ヶ月目で東証マザーズに上場したこともあり、ポジティブな意味で会社を取り巻く環境がおおきく変わるのかな？と期待していた部分がありました。

たとえば、私が入社したあと数ヶ月間ソフトウェアエンジニアの採用が一切決まらなかったのですが、上場することで認知度が向上し、選考プロセスに乗る候補者も自然と増えていき、チームも自然と拡大していくのかな…と勝手に思っていましたが、それは幻想に終わりました。

入社後半年ほどはサーバサイドエンジニアとして、他のメンバにたくさんの教えを請いながら機能開発や改修を行っていたのですが、やはりエンジニアの採用がうまくいかない問題は、徐々に大きな組織課題として浮き彫りになってきました。

そこで、サーバサイドエンジニアとしての役割はいったん脇に置いて、業務時間のすべてを採用活動に注ぎ込むことにしました。
思えばこのあたりから「足りないピースを埋めに行く」行動を自然としており、あえて言い換えるなら Engineering Manager 業に片足を突っ込み始めていたのだと思います。

その後、多くの方とご縁があり、開発組織は少しずつ規模を拡大し続けています。（そのあたりの話はこちらのスライドで）
その結果、新たなサービスを生むことができるようになったり、会社として Advent Calendar を行うことができるようになったり、外部のエンジニアに対する技術的ブランディングも強化されたりと開発組織として着実に強化されてきています。

その一方で組織が拡大していく過程では、今まで発生しなかったような課題が立ち現れます。そのたびに、それらに正面から向き合い、解決していくということを繰り返していきました。
ここに至るまで意識的にリーダーシップを発揮してきたというよりは目の前に困っている人がいたり、放っておくと自分を含め他の人が困ることになるので、やるしかない…という一心でした。

そして、約半年前から私は Engineering Manager として働いています。

Engineering Manager 入門
それでは Engineering Manager になったらまずは何をしたらよいのでしょうか？そして、どのような心構えで臨むとよいのでしょうか？

あくまで、ひとつの意見として捉えてもらえればと思います。

Do or Don't.
まず Engineering Manager をキャリアとして選択する際には、自分なりの覚悟は持っていたほうが良いと思います。

後述する役割次第ではありますが、一般的に Engineering Manager という役割にはピープルマネジメントが期待され、コードに触れる時間は間違いなく減ることになります。
そのような状況をあなたは受け入れることができるのかという一種の覚悟は必要だと感じています。

他の職種でも同じようなことがあるかもしれませんが、ソフトウェアエンジニア → Engineering Manager というキャリア選択には少なからず不可逆性があると感じています。
つまり、Engineering Manager としてのキャリアを歩み始めてからソフトウェアエンジニアの道に戻るには、スキルや勘を取り戻すためにそれ相応の時間が必要になるのではないかと考えています。

Engineering Management の醍醐味
私には、自分ひとりでは到底なし得ることができないことを、組織としてなし得ることができるようになることに対して喜びを感じるという特性があります。

また「昨日できなかったことが、今日できるようになる」という成長を見ることや成長を促すことに対してもモチベーションを感じます。

もちろん自分も成長を続けていかないと、その役割を果たすことができなくなってしまうため日々努力が必要です。

Engineering Manager はその役割上、ソフトウェアエンジニアが扱う領域よりも不確実性が一段高い問題に対処する必要があると思っています。

発生タイミングが読みにくい組織的な課題が突発的に現れても、柔軟に対処する必要がある点もハードではありますが、乗り越えたときの達成感はより大きいように思います。

役割を明確にする
たとえば「明日から Engineering Manager」と言われたとしたら、まず絶対にやるべきなのは「Engineering Manager は何をする役割なのか」という認識をすり合わせることです。
ただでさえ曖昧な役割なうえに、会社のフェーズや規模によって期待されることが大きく違います。
この認識が違ったまま走り始めると、全員が不幸になってしまうと思います。

口頭だけの確認ではなく、Engineering Manager に対して期待することを Job Description として書いてもらい、気になることがあれば対話し、双方で合意しましょう。

上司だけでなくチームメンバーとも認識のすり合わせを行うと、より良い関係値が築けると思います。

目的からの逆算思考
何をする役割なのかが明確になったら、それを達成するために今のチームに何が足りないのかを観察しましょう。

Engineering Manager 界隈でよく話題になる 1-on-1 や採用は目的でなく、手段です。ゆのんさん(@yunon_phys)が書かれている通り、真の組織課題を見つけ、そこにアプローチする必要があります。

もし組織課題がエンジニアのマネージメントであるなら、EMがそれにフルコミットするのが良い。 裏を返すと、全員が評価に満足しているのなら評価の話題をしないで良いし、いつでも困ったことを相談出来る関係性を築けているのであれば1on1もやらなくて良いし、既存のメンバーで理想の未来を描けるのであれば採用も不要である。 真の組織課題を見ずに、EMの仕事として評価・1on1・採用をもしやっているのだとしたら、危険信号かもしれない。
Engineering Managerをエンジニアのマネージャーとするのはやめませんか？ - Unknown Error
この記事はEngineering Manager Advent Calendar 2018の9日目の記事です。 vol.2
yunon-phys.hatenadiary.com
観察した結果、真の組織課題がチーム内に存在する場合もありますし、もっと大きな組織構造が原因であることも当然あります。

そのような場合でも、自分では手に負えないと匙を投げるのではなく、一歩ずつ着実に良くしていくという粘り強いメンタルと実行力を持つことも大事です。

手段の磨き方
これについては、いろいろな方法があると思います。

おすすめなのは、まずは書籍で全体感を把握し、個別の事象についてはブログで他の方の事例で学んだり、自社や他社の Engineering Manager と知見を共有し合ったりするのが良いと思います。

最近では Engineering Manager Meetup というイベントが定期的に開催されているため、こちらに足を運んで頂くのは特におすすめです。

それ以外にも、会社でマネジメント研修を行ったりしている場合は積極的に参加してみることもおすすめします。（自ら研修をやりましょうと働きかけるのも良いと思います！）

しかし座学や研修ではやはり限界があり、実際に体験してみないと分からないことが多いのも事実です。
会社のフェーズや組織規模などコンテキストによって対処法もぜんぜん違うので、書籍で学んだパターンがそのまま適用できるとは限りません。

そのうえでおすすめな本をざっと紹介しておきます。
ザ・定番で恐縮ですが、読みやすさや重要度などを考慮して、上から読んだほうが良い順としています。

エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング
amzn.to
2,570円
(2018月12月23日 03:22時点 詳しくはこちら)
Amazon.co.jpで購入する
コーチングのプロが教える　「ほめる」技術
amzn.to
Amazon.co.jpで購入する
エンジニアのためのマネジメントキャリアパス ―テックリードからCTOまでマネジメントスキル向上ガイド
amzn.to
2,808円
(2018月12月23日 03:23時点 詳しくはこちら)
Amazon.co.jpで購入する
ピープルウエア 第3版
amzn.to
2,376円
(2018月12月23日 03:29時点 詳しくはこちら)
Amazon.co.jpで購入する
HIGH OUTPUT MANAGEMENT(ハイアウトプット マネジメント) 人を育て、成果を最大にするマネジメント
amzn.to
1,944円
(2018月12月23日 03:25時点 詳しくはこちら)
Amazon.co.jpで購入する
終わりに
私はいまの職業をとても楽しんでいます。

なので、ほかの方にも是非！とそんな簡単には言いませんが、Engineering Manager をやりたい！と思ってくれる方がひとりでも増え、消極的なキャリア選択をする方がひとりでも減ることを願っています。

この半年間、具体的にどのようなことをやってきたか書こうとも思いましたが、さらにボリュームが大きくなってしまいそうだったため、今回は断念しました。

こちらの続編なども含めて Twitter (@serima) でも情報発信をしていきたいと思いますので、フォローをお願いします！

それでは、どこかのイベントでお会いしたときは、ぜひ熱い議論を交わしましょう。

良いクリスマスをお過ごしください！

エンジニアリング組織の文化ができるまでの3年間の軌跡
マネジメント
メリークリスマスイヴ！
この記事は Engineering Manager Advent Calendar 2018 の24日目の記事です。

私 (@dskst9) が3年前、アスクルという会社のエンジニアリングチームにJoinしてから、エンジニアリング組織の文化がどのように作られていったのかというお話です。

これは、私自身のアクションと、エンジニアリングチームの一人ひとりがアクションしたことを織り交ぜて書いています。誰かがアクションし続けることで、会社は変わり続けることができるということを感じてもらえると幸いです。

この記事が伝えたいこと
どんな会社でも変えることができる
組織を変えたいなら自分自身でアクションする
組織がアクションを続けると習慣となりそれが文化になる
この記事が伝えたいこと
そもそもどんな会社
むかし
いま
ふりかえる
Forming（形成期）
やったこと
Storming（混乱期）
やったこと
Norming（統一期）
やったこと
Performing（機能期）
やったこと/やっていること
文化を作るということ
おわり
おまけ
そもそもどんな会社
むかし
3年前は、全社員比でエンジニアが 1% もいない会社でした。(5年前は0人…!!)

エンジニアリング組織の文化どころか、「エンジニア？何それ、おいしいの？」という状態。「外注すればいいじゃん」「本当に必要なの」というような感じでした。

（吉幾三がエンジニアだったら）こんな歌が聞こえてきそうです。

ハァ Gitも無ェ チャットも無ェ
Macもまったく使って無ェ
Wikiも無ェ ツールが無ェ
Excel毎日ごーりごり

そこへ、エンジニアが20名ほど Join(私も含む) して、組織が大きく変わっていくことになりました。

いま
さきほどの歌のようなことはなくなり、そこそこモダンな環境に変わったと思います。 何よりも組織としてエンジニアの立場が認められて、エンジニア側から組織に対して発信し、受け入れられるようになりました。

そして、エンジニアリング組織の文化というのが少しずつできていることを感じています。

ふりかえる
どのようなフェーズでどんなことをやってきたか、タックマンモデルにはめてふりかえってみます。

タックマンモデル

心理学者 B.W. Tuckman が唱えたチームビルディング(組織進化)モデルです。
チームは形成されただけで機能し始めることはなく、チームは形成後、混乱を経て、期待通り機能するようになります。 各フェーズを「Forming」「Storming」「Norming」「Performing」「Adjourning」と呼び、下図のように表現されています。

f:id:dskst9:20181224174138p:plain

Forming（形成期）
メンバーはお互いのことを知らない。また共通の目的等も分からず模索している状態。

3年前、20名ほどのエンジニアが Join した時期です。
当時はIT部門の1チームとしてエンジニアリングチームがありました。

20名程が短期間で入社したので、お互いを知らない、組織からも認知されていないというカオス状態でした。
この頃のエンジニアリングチームは、案件だけで繋がっていたような気がします。

社内でのエンジニアの認知度が低い、信頼されていない
よって、エンジニアから組織への声が通らない
やったこと
社内のたくさんの人にエンジニアリングチームを信頼してもらうにはどうしたらいいのだろう？

まずは、社内の信頼を積むべくエンジニアリングチームとして案件へのコミットに全力を尽くしました。

内製エンジニアの形成期フェーズでは、案件で結果を出すことが一番でした。 目に見えてリリースが早くなることで、「エンジニアってすごいのかも」という認知が広がりました。

また、エンジニアリングチームを認知してもらうために、広報、法務、総務などの部門にも積極的に関わるようにしました。理由を作ってまで、とにかく話してみるということを続けました。

これは、影響の輪を広げて増やすということを考えていました。影響の輪の詳細は記事にまとめています。

dskst9.hatenablog.com

しかし、急に信頼されるということはなく、小さな信頼の積み重ねが次へと繋がっています。活動を1年くらい続けてやっと信頼が少し広がっていきました。

Storming（混乱期）
目的、各自の役割と責任等について意見を発するようになり対立が生まれる。

今から2年前、エンジニアリングチームができて1年が経つ頃です。
小さなエンジニアリングチームは部となり、何個かのチームが存在していました。

組織では少し認知が広がってきたところ、エンジニアリングチームの中は混乱期に突入していました。

各エンジニアリングチームが何をしているのかよくわからなかった
個人個人が何を思って何を目指しているのかわからなかった
やったこと
1on1 を始めたのはこの頃です。
上司とやり始めたことがきっかけで、そこから半年くらいかけて全エンジニアリングメンバーにまで広がりました。

同時期に Scrum を導入し始めました。
これは、モダンな開発を経験してみようという勢いで始めましたが、チームでの会話が増えたということはとても大きかったです。

1on1, Scrum など、個人個人の会話が増えたことにより、チームが何をしていて、個人が何をしているというのを理解したと思います。会話によって混乱期を乗り越えたのかなと。

また、この年からアイデアソン/ハッカソンを年1回やるようになり、今も恒例行事になっています。

失敗したことももちろんあります。
社内で小さな勉強会を開いたのですが、これが大失敗でした。
自分の想いだけで開催して、誰もついてこれずに1回で終了してしまいました、まさに混乱期（笑）

Norming（統一期）
行動規範が確立。他人の考え方を受容し、目的、役割期待等が一致しチーム内の関係性が安定する。

今から1年前、エンジニアリングチームができて2年が経つ頃です。
エンジニアリングチームとしてはお互いを知ることができて、チームとしてチャレンジしていこう空気になっていました。

エンジニアリングチームとしてのアクションをやり始めた
他部門から信頼されの意見が通るようになった
やったこと
プロダクトともっと向き合うべく、 LeSS の導入がチャレンジングで面白かったです。

コンポーネントチームがフィーチャーチームになることで、エンジニアの技術領域も広がり、新しいコミュニケーションも生まれました。
しかし結果としては、フィーチャーチームを作りきれず、残念ながら LeSS チームは解散しました。

インセプションデッキ、ポストモーテムをして、プロジェクトとしっかり向かい合おうという取り組みもやりました。とくにインセプションデッキはプロジェクトの同じゴールを見ることができて、効果が大きかったように感じています。

個人的に一番嬉しかったことは、社内の勉強会を開催できたことです。（この時期になってリベンジできました）
今度はたくさんのエンジニアが参加してくれて、今では月1回の恒例行事になっています。

この時期から技術ブログを立ち上げる相談を広報などとはじめました。

Performing（機能期）
チームに結束力と一体感が生まれ、チームの力が目標達成に向けられる。

そして、今年です。
1年間いろいろとありましたが、エンジニアリングチームの影響の輪が大きく広がりました。

会社の中でもエンジニアリングチームが一目を置かれるようになっており、社内への技術的な提案や改善を推し進めることができるようになりました。エンジニアも外と交流するようになってきました。

いろんな人からさまざまなアイデアやアクションが生まれた
エンジニアリングチームが外へと踏み出した
やったこと/やっていること
びっくりしたことに、月1勉強会から派生して週1勉強会が自然発生しました。
混乱期の失敗を思うと、他のエンジニアから勉強会が生まれた瞬間は感無量でした。
さらにさらに、月1勉強会にエンジニア以外の他部門の人も参加してくれるようになりました…！

勉強会の他にも、会社の技術ブログが開きました。
たかがブログですが、開設し、更新を続けることというのはこの時期だからできたと感じています。

社外勉強会を自社で開催することもでき、とにかくアクションをし続けていました。

そしてこれから、
エンジニアバリューを作りビジョンを浸透しようとしたり、
OKR でプロダクトにフォーカスしようとしたり、
新しい挑戦を始めているところです。

文化を作るということ
「Forming」「Storming」「Norming」「Performing」とフェーズをなぞってきました。 「Forming」では存在しなかった習慣が、いま存在を感じて、この習慣こそが文化だと思っています。

文化は作れるものであり、作るのはそこにいる自分自身含めたみんなです。
アクションしたことがずっと続くことで習慣が生まれ、習慣が続くことでそれは文化になっていくと思っています。

おわり
文化を作っていくということも EM の大事な仕事ではないかと思っています。

これを意識すると、明日起きる誰かの小さなアクションが文化の芽となっていくことに気づくかもしれません。

おまけ
この軌跡をエモいストーリーにまとめて話したことがあるのでリンクしておきます。


なぜ、組織のつくりとソフトウェアアーキテクチャは似てしまうのか
UX
アーキテクチャ
技術的負債
CleanArchitecture
このエントリーは、Engineering Manager Advent Calendarの25日目、最終日の記事です。

はじめに
拙著「エンジニアリング組織論への招待」では、ソフトウェア自体の構造とソフトウェアを作り上げる組織の構造が似てしまうという「コンウェイの法則」についてたびたび引用しました。

この「コンウェイの法則」は、ある一定規模の組織で働いたことのあるエンジニアであれば、実感を持って捉えることができるのでしょう。

しかし、何故、どのような力が働いて、「組織構造」と「ソフトウェアの構造」が似通ってきてしまうのかと問われると説明の難しいものです。

拙著においては、ロナルド・コースの取引コスト理論をベースに、社内取引においても取引コストが存在し、その取引コストがソフトウェアの構造をも変えていくという説明を行いました。

本記事は、さらに踏み込んで、組織やビジネスに働く力学と、システムで働く力学が同質のものであることを示しながら、技術的負債現象が引き起こる機序をより高い解像度で理解するための一つの考察です。

そして、このテーマはエンジニアリング組織論への招待の第6章の一部になる構想だったのですが、一定の難解さと説明の煩雑さがあるため割愛しました。

アーキテクチャってなんだろう
アーキテクチャという言葉はわかるようでわからない曖昧な言葉です。建築やソフトウェアにおける「構造」をさしていて、何らかの基礎となる仕組みや大まかな形、”つくり”を意味しているように思われます。

ですが、アーキテクチャにはどのような目的があり、どのような性質があるのかと問われると非常にやっかいで理解しづらいものです。

ここでは、法学者のローレンスレッシグの定義をうまく採用して、理解を深めていきたいと思います。彼は「CODE―インターネットの合法・違法・プライバシー 」において人間の行動を制約するもの（権力）の１種類として「アーキテクチャ」をあげました。

その中で、「ある選択肢を選びやすくする」「ある行動が不快になるようにする」という性質を環境に与えることで、人々が自発的・自律的に特定の行動を促すようにするものを「アーキテクチャ」と呼びました。それらは社会のそこかしこに、あるいは卑近にWebサービスの中にもあるものです。

たとえば、Amazonのレコメンドシステムはユーザーに対して以前購入したものと同じような書籍を購入しやすくすることで、より消費をすることを促すようになります。

たとえば、公園や高速道路の下に置かれた排除型ベンチや排除型アートと呼ばれるものは、公園で眠るホームレスを寄せ付けにくく、行政の手間を下げるように作られており、批判を浴びることになりました。

たとえば、Ruby on RailsなどWeb Application Frameworkは、Webサービスを作りやすくする代わりに、様々な制約を課します。このような制約を遵守する限りにおいて、特定の種類のサービスを作りやすくしています。

このように「しやすさ・しにくさ」を提供し、「ある方向に」人々を導く構造のことをアーキテクチャとして理解すると曖昧だった言葉が少しだけクリアになりました。

では、この定義によるとシステム全体をめぐるアーキテクチャは果たして、ソフトウェアアーキテクチャだけなのでしょうか？

たとえば、「ビヨンドソフトウェアアーキテクチャ」においては、ビジネスやユーザーの振る舞いに対するアーキテクチャを『マーケテクチャ（Market + Architecture）』とよび、いま風にいうのであれば、プロダクトマネージャの仕事を『マーケテクト』と呼びました。

同じように、ソフトウェアを描くチームと技術的な市場変化に対してのアーキテクチャを『ターキテクチャ(Tech + Architecture)』と呼び、今風にいうのであればエンジニアリングマネージャやテックリードの役割のことを『ターキテクト』と呼びました。

これらの区別は非常に重要な示唆です。アーキテクチャというとどうしても「技術上の話」だけだと捉えてしまいがちなのですが、そこには「導かれる人々」がいて、「導かれる方向」が存在するのです。そして、どちらもその意味ではアーキテクチャには違いないのです。

これらはUXの文脈や認知心理学の文脈で言うところの「アフォーダンス」と言う概念もまたアーキテクチャと類似する概念だと言えます。つまり、何かをしやすく、あるいはしにくくする誘発性をどのように理解するかということです。

デザインつまり設計という概念がアーキテクチャと切っても切れない理由はこのあたりにありそうです。

「エンジニアリング組織論への招待」においても、何かをしやすく・しにくくするもの、そして見えない坂道のように知らず知らずに人を一方向に動かすものが組織に働いていることを言及しました。

このような視点で見ると、あるシステムの中には：

ビジネスのアーキテクチャ
ソフトウェアのアーキテクチャ
デザインのアーキテクチャ
組織のアーキテクチャ
など複数のアーキテクチャが混在しているように思えます。

選択肢と権力と依存
誰かが「何かをしやすく・何かをしにくくする」ということについて考えるのであれば、「選ぶ」と言うことについて考えてみる必要があるでしょう。社会交換理論や権力依存論を援用しながら「選ぶ」こととアーキテクチャについて考えてみましょう。

私がたとえば、今日の夕食を考えるとして、

近所のラーメン屋
遠くの高級火鍋
という選択肢があるとしましょう。

このとき、すごく寒い日であれば、火鍋という選択肢はとても魅力的に移ります。しかし、寒い中を移動する必要があります。さらに高級店なので値段も高いのです。近くのラーメン屋であれば、手軽でリーズナブルです。そこそこ体も暖かくなるでしょう。

このような状況の中で、たとえばUberEatsのような宅配サービスが登場し、しかもキャンペーン中であったため、格安で遠くの火鍋が自宅に届けられることになったとします。宅配サービスでは近所のラーメン屋は選べませんでした。これより価格と距離という２つの選択を妨げるアーキテクチャが変更され、私は火鍋を食べることを自然と選ぶようになりました。

このように選択肢の優先順位が変わったり、他の選択肢が見えなくなったりすることで、個人の自由意志で選んでいるはずが、知らず知らずに選ば"される"ようになってしまいました。

さて、その後、私は高級火鍋を頻繁に食べるようになります。体も温まり味も美味しいので、値段はともかく食べたいと思うようになりました。このようなおり、宅配サービスはキャンペーンが終わり値上げをするようになります。いつの間にか火鍋の刺激に慣れてしまった自分は、値段が上がったとしても宅配サービスを利用するようになっていきました。これはある種の依存です。

実は、この依存というものは、ソフトウェア設計においても非常に重要な概念であるだけでなく、アーキテクチャと選択肢の関係を考えるためにも重要な概念なのです。
image.png

アーキテクチャが何か１つの方向に人々を導く背景には、「見えない力」が働くからです。そしてそれは、「選ぶ側」から「選ばれる側」に対して働くことになります。

言い換えるなら、「選択肢を持たないもの」は、「選択肢を持つもの」よりも理不尽な目に遭いやすいということです。このような力のことを「権力」と言います。

たとえば、絶世の美男美女との恋愛を考えてみましょう。彼ら/彼女らにとってパートナーの選択肢は無数にいます。そのため、多少のわがままも許されるでしょう。かぐや姫のストーリーなどまさにそのようなものです。

たとえば、DVを行う夫がいる妻を考えてみましょう。女性の経済的自立が難しい社会や離婚が社会的に是認されていない社会においては、残念なことにその夫が唯一の選択肢に見えます。その結果、理不尽な暴力に晒されやすく、権力の影響を受けやすくなってしまうのです。

たとえば、現在のエンジニアの求職状況を見てみましょう。ソフトウェアエンジニアは、平均求人倍率が8倍程度あり、都内で働く優秀なWebエンジニアであれば10倍~20倍は超えるでしょう。このような状況では、求職者は『選ぶ側』になります。そのため、権力は求職者に宿ります。結果的に待遇や環境はよくなっていくことになります。最近の働き方改革などのムーブメントはこのような求人が増えてきたことと無関係ではないでしょう。

一方、求人倍率の低い時代、また労働流動性の低い時代であれば、会社に従業員が尽くすといったロイヤリティを求めることがあります。これは、「権力」が会社側に存在しているからだと理解することができます。

このようにして、「選択肢を豊富に持つ側」から「選択肢を持たない側」に対して何らかの力学、「権力」が働くことになるのです。

これにより、権力を持つ側は、持たない側に対して、望まない理不尽な選択肢を選ばせることができてしまいます。このような望まない理不尽を受け入れざるを得ないような状態を「依存」といいます。

もし、別によい選択肢を持っていれば、また別の選択肢を提供する仕組みがあれば、依存は発生しません。ブラック企業に勤めている人であっても、他の条件のいい転職先があれば（そしてあることに気がつければ）、理不尽を受け入れることなく転職していくでしょう。理不尽な暴力に苦しむ女性も、経済的自立や助けを求める手段があれば、依存から逃れることができるでしょう。

一方、選択肢が他にない、つまりは交換不能な依存関係のことをソフトウェアにおいては、「結合」と呼びます。理不尽は結合から生まれるのです。

このようなとりうる選択肢（オプション）の不均衡が、社会的な意味での「依存」と「権力」を生み出します。社会的な関係性の明晰な記述に過ぎないソフトウェアアーキテクチャにおいてもこの関係は成り立つのは当然のことだと言えます。

あるシステムを作る時、そのパーツを交換可能で「他に選択肢がある」ように維持するということはアーキテクチャを考える上で重要な視点です。たとえば、GoFのストラテジーパターンなどをつかって、複雑なアルゴリズムや処理をコンポジションによってあとから差し替え可能に設計することは、あるパーツを交換可能に維持するための工夫の１つです。

これはテストを書くことやインタフェースに依存することも同じです。何かを良くするためには、異なるものに「交換できる」という条件が必要不可欠です。ユニットテストやインターフェースは、つまりはある用途を満たすコードを別のより良いコードに交換するために必要な条件です。

そのため、テスタビリティが高いコードは、疎結合になりやすいといった現象やDIコンテナを用いたコードがテストしやすいという現象が発生します。これらはどちらも交換可能であるということを維持し、結合に伴う権力の作用を避けることができるからです。

システムのコントローラビリティ
このような「交換可能である」がゆえに良いものにできるという関係性は、ソフトウェアの一部だけでなく、そのシステムをとりまく価値のすべてにおいて成り立ち得ます。

システムの一部や部分の「変化」を受け止めるためには、その変化に見合った一部または全部を交換する必要があります。しかし、交換可能な部分が少なければ少ないほど、コントロールが効かなくなります。

たとえば、20年前に作られて今なお現役で動いているシステムを考えてみましょう。

社内には誰も担当者や外部仕様すら正確に知っている人がいない、その上、ソースコードも管理されていない。自動テストもなく、受注側の企業の担当者もすでに離職している。こんなとき、このシステムを部分的に交換しようとするのはとても難しいことです。受注側もリスクの割に実入りが少なければ、あまり受けたい仕事ではないでしょう。このようになると、交換が非常に難しいシステムになります。

一方、同じ２０年間動いていても、社内の同じチームや近い位置に意思決定者もデザイナーもエンジニアもおり、頻繁に修正をかけながら、自動テストやサービスの分割、継続的デリバリーの進んでいるシステムであればどうでしょう。部分的な要求変化に対して、素早く高い生産性が出せるでしょう。

これは、システムの一部を常に別の選択肢へと「交換しやすいアーキテクチャ」を手に入れるために、マーケティング、チーム文化、セキュリティ、プロセス・プロジェクトマネジメント、ソフトウェア設計、テスト品質管理、運用監視、意思決定フローなどバリューチェーンの全てにおいて余分な依存や結合を排除してきたことから生まれる生産性です。

コントローラビリティの喪失とホールドアップ
ある取引関係において、「他に代替手段がない」ということから、理不尽な要求をうけてざるを得なくなってしまうことを経営学的にはホールドアップ状態といいます。このような状況では通常より高い料金を受け入れたり、理不尽な要求を飲んだりする必要があるため、避けなければならない事態です。

特定のベンダー製品に依存していて、別の製品に置き換える時に非常にコストがかかるため、その手段が取れないことを指して、「ベンダーロックイン」と表現することがあります。ホールドアップ状態というのは、ベンダーロックインと同一線上にある状態です。

システムの開発において、徐々に別の選択を選ぶコストが高くなっていき、最終的には全てを入れ替えなければならなくなるという現象を我々はよく知っています。それを技術的負債と呼ぶのです。技術的負債という現象をミクロに捉えるとソースコードレベルの理解を要求するものですが、マクロに捉えると、非常にありふれた経済現象なのです。

ある取引関係において、ホールドアップリスクを避けたければ、もっともシンプルな手段は、取引コストをゼロにする戦略が考えられます。それが内部化です。これはシステムにおいても同様です。

このようにある組織がシステムを持つ場合、より良くするためには、一部または全部をより良いものに交換するという選択を持つ必要があります。このシステムに対しての交換可能性（コントローラビリティ）は、大雑把には５つの段階が考えられます。

image.png

レベル１：制御不能レベル
どこで、どのように動いているのか、そして何を要求して何が満たされているのか、見当がつかない状態。担当者が丸投げした上に退職し、契約書も残っていないなど、信じられないかもしれませんがこのようなシステムは数多く存在します。

誤解をしないようにしたいのは、この制御不能レベルにあるソフトウェアのコードの品質が高いか低いかは関係がないということです。仮に非常に高い品質のエンジニアが書いたとしても、その企業がまったく理解していなかったら、どんなことが起こるのかわからない爆弾になってしまいます。

レベル２：外部仕様レベル
発注者が優秀で、要求事項がすべてドキュメントで残っており、最新に維持されています。そして、変更のたびに検収のプロセスを多重に動かしているため、「何を求めて」「何が出来上がったか」については、かなりコントロール下にあるというレベルです。

しかし、プロジェクトマネジメントの主体やソースコード、要件レベルの内部ドキュメントは、自社に存在しないという状態です。

これらの要求レベルのドキュメントがあれば、最悪、別のシステムとしてを作り直すのは至難の技ではありますが、不可能ではありません。しかし、システムの中身自体を理解しているのは特定の外部業者という状態です。このとき、ソフトウェアの大きさが大きくなればなるほど、全体を交換するのにコストが巨大になります。こういったことから、その外部業者を別の業者に交換することが徐々に難しくなってしまいます。

レベル３：ソースコードレベル
複数のベンダーまたは、フリーランサー、自社人材で編成されたチームによって、

要件レベルのドキュメント
プロジェクトマネジメント
ソースコードのバージョン管理
デプロイ自動化
モニタリング
開発プロセス
などがマネージされている状態です。

この状態であれば、ホールドアップリスクとして顕在化する前段階の、技術的負債に自社として気がつくことができます。そもそもレベル１、２では経営的危機として顕在化するまで、技術的負債の存在にすら気がつけないのです。

システムの内製化について取りざたされる時、たとえばSIやSESの業態で働く人々の品質問題として語られることが多いのですが、実際にはどの業態であっても優秀な人も優秀でない人もいます。

内製化とは、自社で何も理解していない状態でコアコンピタンスとなる事業のシステムのコントロール権を喪失してしまうことを避けるための手段に過ぎません。むしろ、事業のコアコンピタンスでないのであれば、外部業者を利用することは合理的な選択肢です。

カレー屋さんはお米は自分で作らず買ってきますが、カレールーは自分で作ったほうがいいでしょう。何が事業価値の源泉かを特定して、そこに資源を集中するのが経営の基本です。

レベル４：アーキテクチャレベル
レベル３の段階に加えて、ビジネスとシステムの両面の理解をもった人物が、次のような抽象的な構造をビジネスとシステムの中に見出し、アーキテクチャレベルでコントロールが効いている状態：

戦略的技術選定
レイヤードアーキテクチャ
コアドメインの抽出
システムのセグリゲーション
インフラ自動化・デプロイ自動化
継続的インテグレーション
ソースコード品質のモニタリング
コードレビューガイドライン
プロジェクトマネジメントの成熟
これらが満たされていると、しばらく長い間システムはコントロールできているように見えます。実際には、卓越したアーキテクトの仕事がそのプロジェクトで一時的に機能していただけのケースに過ぎないかもしれないのです。

そのアーキテクトが退職してはじめて、彼がSPoF（単一障害点）であったことに気がつきます。交換不能な存在だった彼に対しての依存度が高くなってしまい、アンタッチャブルな存在になってしまったり、英雄的犠牲を彼に強いてしまったりということもままある話です。このような歪な関係のもと、システムが腐らずに済んでいる状態とも言えます。

レベル５：チーム文化レベル
最終段階のレベル５は、中長期にわたって、レベル４で実現する品質を維持したり、より良くしていくことができるチーム文化や組織風土のレベルでシステムをコントロールできている状態です。

ADR(Architecture Decision Records)の記録
TDD・モブプログラミング
機能横断型チーム・全体論的多様性
学習する組織
継続的デプロイメント
トランクベースの開発
多能工・T型人材
進化的アーキテクチャ
DevOps
シフトレフト
心理的安全性の高さ
この状態になると、「システムが満たしたい目的」に対して、時代の変化や技術的背景の変化などがあっても、チームのレベルでそれを吸収し、より目的に合致したシステムに変更していくことができるようになります。事業も、ある瞬間のシステムのスナップショットを提供するのではなく、継続的に価値を提供するソフトウェアサービスを提供することになります。

つまり、よくできた買い切りのパッケージ製品がレベル４のシステムであれば、継続して改善されていくサブスクリプション型のSaaSがレベル５のシステムだと言えます。

その意味では、ソフトウェアサービスとは、ある機能を提供しているのではなく、継続的にその目的を果たしつづける組織やチーム文化を提供しているビジネスと言い換えることができるのです。

モダンアジャイルやDevOpsの潮流というのは、取るに足らない流行り廃りではなく、ビジネス環境がより継続的なソフトウェア価値の提供を求めるようになったというマーケットの変化に呼応したものなのです。

ハードウェアをソフトにしたものか、ウェットウェアをハードにしたものか
ソフトウェアシステムのコントローラビリティを上げていき、より良いものに交換可能な状態を維持しようとすると、自然とチーム内のコミュニケーションや文化といった無形の資産の蓄積が不可欠になってきます。

エンジニアリングマネージメントが注目を集めはじめた最大の理由は、ソフトウェアを作りっぱなしではなく、継続的に機能提供をしていくことの難しさと価値に対して、ソフトウェアとそれを作るチームというものを構築する必要性があったからと言えます。

多くの旧来的なソフトウェアの価値観は、ハードウェアの付随品として、設備投資と同じように提供できるものだと認識されていたように思います。つまり、ハードウェアを少し柔らかく変化させやすくしたものという理解がされているように思います。この世界観では、一度投資したら、ほぼほぼずっと使い続けられるものであるように見えます。

ですが、実際にソフトウェアサービスを提供している感触としては、ハードを柔らかくしたものではなく、チームやビジネス上の暗黙知として存在するウェットウェアをより明晰にハードにしたものだと見えています。この世界観では、継続的・持続的に提供するチームが、企業内部に入り込む形で作られるものであるように見えます。

変わりやすいもの/変わりにくいもの
ソフトウェアにしても、ビジネスにしてもその外的な条件から、「変わりやすいもの」と「変わりにくいもの」が存在します。たとえば、人類がうまい食べ物を必要としているということは、あと１００年くらいはそのままな気がします。でも、チーズダッカルビを食べたいと思うのは、ここ数年くらいのものでしょう。

ペースレイヤリング
このような変わりやすさと変わりにくさに注目して、それを建築の分野に取り入れたのが全地球カタログでも有名なスチュアートブランドでした。

彼は、「How Buildings Learn」の中で、ペースレイヤリングと呼ばれる概念を創出しました。それは建物の変化と時の流れがどのような関係を持つかを示したものです。

５つの階層が建物の変化には存在していて、変化のスピードがそれぞれ異なるということを
image.png

用地（Site）は、建物よりも長く永遠に近い期間持続するもの。そしてのその上に建物(Structure)が建てられて、数十年から数百年は持続する。外装(Skin)は10年程度で、リフォームされ、その中にあるキッチンやエアコンなどの設備は5,6年で老朽化していきます。どんな風に部屋を使うか(Space Plan)は1年や2年は同じだけど、日用品 (Stuff)は毎週変わったりします。

ここで重要なのは、依存は常に「変わりにくいもの」に対してのみ行われるということです。「変わりやすいもの」に「変わりにくいもの」が依存するようになると、全て丸ごと交換する必要が出てきます。

たとえば、部屋の中であれば、インテリアや日用品のラインナップと同じ周期で引っ越したり、建物を立て替えるような人はいません。でも、床色やインテリアに合わせて、日用品を選ぶことはあります。

不動産屋さんに言わせると、他の不満はなんとかできるけど、立地の不満だけはなんともできないことが多いから、まずは立地から決めていくことが多いそうです。これも一種のペースレイヤリングです。

ペースレイヤリングという考え方は、建築だけでなく、Webシステムにおける情報アーキテクチャやUXの5Sへと転用されていくことになります。

image.png

また詳しくは、「思想としてのペースレイヤリング」という大変素晴らしい記事がありましたので、こちらをご参照ください。

ソフトウェアにおけるペースレイヤリング
image.png

ソフトウェアにおけるペースレイヤリングとして有名なのは、ガートナーのSoR/SoE/SoIの議論です。システムの変動性に合わせて:

SoR( System Of Record　 )
SoE( System Of Engagement )
SoI( System Of Innovation )
という三階層に分割でき、それぞれが異なる開発サイクルを持つという発想です。ガートナーの分類は、ここからさらに踏み込んで、開発プロセスや開発手段とが階層ごとに異なるやり方が適切であるといういささか我田引水がすぎる主張をしているきらいがあります。

しかし、ペースレイヤリングという観点をアーキテクチャに持ち込むのは非常に重要な論点だと思っています。むしろ、ペースレイヤリングの重要性が導かれるのは、その抽象性と依存という関係からです。

ソフトウェアの設計原則に、抽象依存の原則(ADP:Abstraction Dependency Principle )というものがあります。依存するならば、より抽象的なものに依存しろという原則です。

また、もう一つ重要な原則に、安定依存の原則(SDP:Stable Dependency Principle )というものがあります。依存するならば、安定しているものに依存しろという原則です。

たとえば、配列をソートする関数があったとします。このとき、利用する側は、ソートするという目的を果たせればいいので、ソートアルゴリズムはそこまで気にしません。より、抽象的なものに依存してコードを書くようにすれば、ソートのアルゴリズムが変わっても利用側のコードを変える必要はありません。

このように、より抽象的(より目的に近い）コードに依存し、より具体的（手段に近い）コードを交換可能にしておくことで、ソフトウェアは変化に強く設計できるようになります。逆に、特定の手段を変更するときに引っ張られて、広い範囲に影響してしまうと修正にたくさんの時間をようすることになります。

これは、抽象的な目的の方が変化しにくく、具体的な手段の方が変化しやすいという性質から導かれているのです。これは、クリーンアーキテクチャやオニオンアーキテクチャと呼ばれる階層型のアーキテクチャが生まれた機序と同じものです。

image.png

ですので、アーキテクチャ設計をする際には、変化しにくい部分を抽象構造として見つけ出し、それを抽出する必要があります。これが、コアドメインオブジェクトの抽出や蒸留と呼ばれるような設計上の重要な視点になります。

ビジネスアーキテクチャ：ゴール設定と抽象のはしご
さて、私たちがビジネスを組織やチームで行うとき、ミッションやビジョンを設定することがあるかと思います。あるいは、戦略を決めて、行動に落としていくというように、より不確実で、抽象的で複数の手段を取りうる「目的」から、より具体的で選択肢の少ない手段へと落としていくことでビジネスを展開していきます。

戦略人事目標設計フレームワーク.png

これらは、つまりはペースレイヤリングであり、ビジネスのアーキテクチャなのです。

たとえば、「世界を平和にする」というミッションがあったとします。これは、組織の存在理由なので、なかなか変化する事はないでしょう。しかし、これだけでは抽象的すぎて、どんなときに使ったら良いかわかりません。

これをさらに、数年後のビジョンを考えます。到達したいと思うある未来の状況をよりクリアに伝えるのがビジョンです。一緒にゴールのタイムマシンに乗り込むことがビジョンです。

その数年後のビジョンを達成するにはどうしたらいいのでしょう。より具体的な筋道を考えていく必要があります。この筋道、どんな道を通っていくかが戦略です。

その戦略を実現するための作戦があり、そしてそれが個々の行動へとつながっていきます。

しかし、これらは下の階層に行くほど、目的に対して、手段という関係なので、無数に選択肢が存在するため、変動しやすくなります。組織におけるゴール設定については、また別の記事で詳しく述べます。

いずれにせよ重要なのは、目的の方がより変わりにくく、手段の方がより変わりやすいという階層構造を持っている事です。

そして、目的に対して手段が交換可能でなければ、それは悪い依存として、組織の目的を果たして行くのに支障がててくるという事です。

アーキテクチャのフーリエ変換と不確実性の波
image.png
目的と手段、抽象と具体という階層構造における交換可能性がアーキテクチャと呼ばれるものの正体でした。交換しにくければ、それは理不尽な権力となって無駄を生み出します。

そして、これは、外的なマーケット環境に潜む不確実性から織り成されるものです。不確実性は波のようなものです。複数の激しい周波数成分の波とゆっくりとしか変化しない波があります。これらは、いつもは折り重なっているので、その１つ１つを抽出する事は難しいのですが、アーキテクトはこれらを見極め、段階的にこの構造を構築して行く必要があります。

これはあたかも、プリズムが白色光を七色に分解するようなもので、数学的にはフーリエ変換のようなものです。異なる周波数成分に分解し、レイヤリングすることで変化に対して必要最低限のアクションで対応できるようになります。

コンウェイの法則の成り立つ背景と相互作用
コンウェイの法則が成り立つ背景には、ビジネスとソフトウェアの２つアーキテクチャが同じ不確実性の波に向き合っていることがあります。そのため、意図せず類似する構造を持つようになるのです。

また、ビジネスのアーキテクチャに従属して、組織構造が作られるので、組織構造に合わせたソフトウェアの設計がされがちですし、ソフトウェアのアーキテクチャのつくりによって、実現しやすい仮説検証とそうでないものが決まってしまうため、ソフトウェアアーキテクチャに合わせて組織が作られることも起こりえます。

image.png

組織の構造とシステムの構造が相似形になってしまうのであれば、プラスの価値のある組織からは優れたアーキテクチャが生まれ、逆にマイナスの価値を持った組織からは技術的負債が生まれるようになるということが導けると思います。

また、その逆に優れたシステムの構造が、良い組織構造を生み出すことも起こり得ますし、同様に技術的負債が組織の悪しき硬直性を生み出すことも起こり得るのです。その意味で、組織とアーキテクチャには密接な相互関係があります。

これは、抽象と具体、目的と手段の構造が本質的に同じ１つの階層構造に同居しているはずだからです。にもかかわらず、アーキテクトとビジネスオーナーという情報が非対称である二人の頭の中にだけ存在していることが多いものなのです。

そのため、エンジニアリング組織論への招待では、技術的負債という言葉がそもそも取りざたされるのは、この情報の非対称性にこそあり、技術的負債現象自体に拘泥すると本質を見失うのではないかという論を展開したのです。

参考図書
クリーンアーキテクチャ
アジャイルソフトウェア開発の奥義
権力の予期理論
How Buildings Learn
選択しないという選択
交換と権力―社会過程の弁証法社会学
Hatch組織論
おわりに
結構、長い話を短く納めたので、わかりにくところが多いと思います。
補講をちょっとずつ足したいな。

エンジニアリングマネージャーになってハマった2つの罠
#マネジメント
本記事は Engineering Manager vol.2 Advent Calendar 2018 の1日目の記事になります(何故か空いていたので後追いで投稿しています)

自己紹介
@takochuu といいます。
エンジニアリングマネージャー歴は、前職を含めて約3-4年と言ったところです。
主にマネジメントしているメンバーの数は ~ 10人。評価・育成・チーム運営がお仕事です。(実装も3-4割ぐらいやっています)
主にプロジェクトマネジメントが得意ワザだと認識しています。

本記事の対象読者はエンジニアリングマネージャーになって1年ぐらいの新人マネージャーのみなさまへ僕がハマった事についてお伝えします。

TL;DR
正しいロジックで伝える事よりもコミュニケーション頻度を意識して振る舞うことで納得してもらえるようにする
組織(チーム)マネジメントの目的は事業の成長・達成に紐づけて考える
正しい結果を言おうとしてしまう罠
例えば一介のエンジニアからエンジニアリングマネージャーへ役割の変更がなされた際、多くの人たちは以下のような新しい仕事を受け取る事になります。

評価
1on1など、「話す側」から「聞く側」への変化
このようなケースにおいて、ハマっていた罠が「正しいことを話す」ということを目的にしてしまうことです。
例えばメンバーが何かに悩んでいた時に、話せる関係性であれば、悩みや問題を話してもらえます。以前の僕は、ここで正しい答えを出してあげてしまっていました。

これは良く言われる話ですが、「気付きを与える」事で納得してやってもらうのが目的であるとするとあまり相応しい行動ではありません。
頭ではわかっているがどうもモヤモヤする、というのはみなさんも経験がある話だと思います。例えば自分が1on1で話をする側だった時を思い浮かべると理解できるかと思います。

そこからの学びとして、1on1や普段のコミュニケーションでは「正しい結論」を伝えるのではなく「正しい問い」を立てる事によって、気付きを与えて成長してもらうのが今の自分なりの考え方になりました。

チーム運営・組織運営と事業運営は両輪というおはなし
僕の場合はですが、あまり経験がないEMだった時は「チームを上手くいかせる」ことに必死だったなと思い出しました。
具体的には以下のようなことです。

チームのキャパシティプランニング
心理的安全性の担保
仲の良さ、風通しの良さの担保
個人の成長の担保
確かにこれは大事なのですが、1つ重要な観点として「何のために」やっているのかということです。
ブチャラティも「任務は遂行する、部下も守る。両方やらなくっちゃあならないってのが幹部のつらいところだな」と言っていますが、当時の僕にはチームを守って、任務を遂行するという観点が抜けていました。

そうすると一見チームは仲がよいように見えますが、サイロ化ではないですが何のためにやるのかという要素が抜けてきます。抜けてくると大きな課題発見や技術的チャレンジに目を向けられないチームになってしまいます。

今のマネジメントスタイルとしては「EMとして大きな課題発見に取り組む、その課題の解決によって、チームの成長を実現する」という考え方に変わってきています。
あくまでエンジニアのマネージャーだということを考えると、課題発見とその解決アプローチに足る技術力を持っていなければいけない、というのも重要な観点です。

チームと事業、どちらかではなくどちらもやる。これがEMのつらいところだな。

おわりに
ちょっと雑になってしまいましたが、これが最近得た学びとしてあります。
ぜひEMのみなさんと意見交換などしたいな、と思っているので共感頂けたら @takochuu までmentionいただければ是非ランチでもよろしくおねがいします。

次はhidenorigotoさんのエンジニアリングマネージャーとソフトウェア設計者に共通するスキルを考えてみた です。
@hidenorigotoです。現在はメルカリJPのBackendチーム全体のマネジメントをしています。以前のキャリアではマネジメントもやっていましたが、どちらかと言えば1人のエンジニアとして、ソフトウェアの設計と数多く向き合ってきました。その過程で、良い設計を生み出す設計者は、どのようなスキルを持っているものなのかと疑問を持ち、アレコレ考えることがありました。
今、メルカリでマネージャーとして仕事をする中で、この疑問は次のように形を変えました。

「マネジメントが上手いマネージャーはどのようなスキルをもっているのだろうか。」

そして、私の中で1つの仮説が浮かびあがってきました。それは、「良いソフトウェア設計者」と、「良いエンジニアリングマネージャー」には、仕事をより良く遂行するためのコアなスキルとして共通する部分がある、というものです。

ソフトウェア設計者の仕事
ソフトウェア設計は、1つの正解に向かって一本道を進むように行う活動ではありません。ましてや、パターンを当てはめたり組み合わせたりするような作業では決してありません！ 多くの場合、ソフトウェアの設計とは、正解の用意されていない問題に取り組む活動です。問題に対して何らかのアプローチを試み、さまざまな関連要素間の折り合いを付けながら、どうにかしてソフトウェアとしての良さを引き出すのがソフトウェア設計ではないでしょうか。あくまで1つの見方ですが、ソフトウェア設計者の仕事は、ソフトウェアに対するさまざまな要求、ソフトウェアの実行環境、ソフトウェアを記述しメンテナンスするプログラマーという3方向を同時ににらみながら、ソフトウェアという人工物の構造を調整することと言えます。設計者が直接ソフトウェアに手を入れて、機能する構造を作り出す場合もあれば、概念の枠組みだけを与えて意図した設計方向へ向かうように仕向けるといった、間接的な方法をとることもあります。

エンジニアリングマネージャーの仕事
一方、エンジニアリングマネージャーの仕事はどうでしょうか。Googleのreworkには、マネージャーの行動規範として次の10項目が挙げられています。

良いコーチである
チームに任せ、細かく管理しない
チームの仕事面の成果だけでなく健康を含めた充足に配慮し、インクルーシブ（包括的）なチーム環境を作る
生産性が高く、結果を重視する
効果的なコミュニケーションをする - 人の話をよく聞き、情報を共有する
キャリア開発をサポートし、パフォーマンスについて話し合う
明確なビジョンや戦略を持ち、チームと共有する
チームにアドバイスできる専門知識がある
部門の枠を超えてコラボレーションを行う
決断力がある
Googleマネージャーの行動規範より

この10の行動規範からも分かるように、マネージャーの仕事の対象は、主としてメンバー、つまり人です。しかし、人だけを見ていれば良いマネジメントができるわけではありません。ましてや、マネジメントの教科書に書いてあることをマニュアル通りに実行する作業では決してありません！ メンバーや組織を取り巻く様々なことに目を向け、耳を傾け、関わり、行動し、得た情報を自分の頭で解釈して整理し直すことも同時に行わなくてはいけません。解決すべきビジネス課題、会社全体や他部門との協調、エンジニア個々人の状況や成長するための戦略という3方向を同時ににらみながら、エンジニア組織の構造を調整することが、エンジニアリングマネージャーの仕事だと言えるのではないでしょうか。

ヘンリー・ミンツバーグは著書『ミンツバーグ マネジャー綸』で、情報、人間、行動をマネジメントの3つの次元とした上で、「あらゆるマネジャーは、行動の世界と人間の世界と情報の世界を結びつける存在でなくてはならない」と言い、「バランスのとれたマネジメント」を強調しています。

より良く仕事を遂行するために必要なスキル
上に挙げたソフトウェア設計者の姿、そしてエンジニアリングマネージャーの姿は、かなり恣意的に取り上げたものですが、そこには「緊張関係にある複数の要素に対して、なんとかバランスを取る」という共通の構造があります。そして、活動の対象は違えど構造的に同じであるならば、その活動を上手く行うための本質的なスキルは同一のものだと思います。しかし、この本質的なスキルが具体的に何であるのかはまた別の話で、諸説あるところかと思います。私は、次の3つが重要だと考えています。

視点
フォーカス
説明力
「緊張関係にある複数の要素」という図式を見出したり、そのバランスを見極めるには、対象を様々な視点で観察できるだけの視点の自由さを備えておかなくてはなりません。ソフトウェア設計で言えば、要求されている内容と実装するコードとのバランスだったり、ある機能のためのコードと別の機能のためのコードの緊張関係といったものです。また、メンテナンスのしやすさとパフォーマンスとの緊張関係は、ソフトウェア設計における永遠のテーマのようなものですね。 エンジニアリングマネージャーであれば、良い意味で、さまざまな緊張関係の間で仕事をすることは日常茶飯事です。しかし、時には目の前にある複雑に絡み合った緊張関係を解きほぐして、本質的な要素にスポットを当てることが大事だと思います。

「緊張関係にある複数の要素」は、1つだけが見出されるのではなく、複数の可能性が浮かび上がってくることが普通です。その時、今の状況では何に重点を置くべきかを加味し、それによってどの可能性を選択すべきかを判断します。ここで必要なのが、状況における重点にフォーカスするスキルです。

また、要素を見出す過程や、見出した要素のバランスを取る過程では、人を相手に説明するスキルも必要です。ソフトウェア設計であっても、その設計の要所を言語化して説明できないのであれば、それは設計とは呼べないのではないでしょうか。また、できあがった設計の説明だけでなく、その設計にいたる過程、つまり要素を見出す過程においても、その時点で問題となっているポイントを関係者に説明しながら情報を引き出すこともありますので、説明力は重要です。 エンジニアリングマネージャーの場合、説明力を求められる機会はもっと増えます。エンジニアメンバー、つまり人をマネジメントするためにマネージャーが使える主な道具は、コミュニケーションです。マネージャーは、チームが向かうべきビジョンと現状との差分を頭に描きながら、個々のメンバーと1対1で向き合ってコミュニケーションし、その中で様々な説明をしていきます。状況にあった説明、相手に合わせた説明、簡潔な説明や詳しい説明など、バリエーションも必要ですね。これを繰り返すことで、結果としてチームを方向づけることができるんですよね。

おわりに
いろいろ書いたことを一言でいうと「地頭の良さ」と表現されるスキルなのかもしれません。しかし、この一言からはこぼれ落ちてしまう様々な具体的な内容があり、それを拾い集めてこそ、地に足の着いた豊かな理解が得られると思います。

メルカリでは、エンジニアリング組織強化の取り組みの一貫として、Engineering Manager Drink Meetupなどのイベントも開催しています。エンジニアリング組織のマネジメントについていろいろ思いのある方は、是非ご参加ください！ （既に申し込みは締め切られていますが、参加したい方は @hidenorigoto までご連絡ください。）

このブログ記事は Engineering Manager vol.2 Advent Calendar 2018 3日目の記事です。


Engineering Manager Advent Calendar 2018 - Qiita
エンジニアリングマネージャのためのアドベントカレンダーです。 + チーム運営の方法 + プロジェクトマネジメント/プロダクトマネジメントのノウハウ + 心理的安全性のハック + エンジニアリング組織運営のプラクティス などなどいろいろなノウハウを公開して行きましょう。 埋まったので(
qiita.com

Engineering Manager vol.2 Advent Calendar 2018 - Qiita
エンジニアリングマネージャのためのアドベントカレンダーvol.2です。 - チーム運営の方法 - プロジェクトマネジメント/プロダクトマネジメントのノウハウ - 心理的安全性のハック - エンジニアリング組織運営のプラクティス などなどいろいろなノウハウを公開して行きましょう。 (
qiita.com
楽天株式会社で新規事業のエンジニアリングマネージャーをやっている @TAKAKING22 です。

最近「エンジニアリングマネージャー」が流行っていますね。弊社にはそんなかっこいい役職名はないんですが、いわゆる開発部のマネージャーをやっているのでエンジニアリングマネージャーがわかりやすいと思って最近使っています。

意識低いエンジニアリングマネージャーを目指して
意識低いエンジニアリングマネージャーを目指してやったことについて書いてみます。

なぜ「意識低い」なのかというと、そもそもマネージャーにはなりたくなかったのでできる限り要領よくマネジメント業務を効率化してその分プレイヤーとして仕事をしようと考えたからです。なんと意識が低いのでしょう。

でも「俺がマネージャーだ！（ドンッ）」みたいにマネージャーになっただけで偉そうに振る舞ううざいマネージャーになるよりは意識が低いマネージャーの方がマシだと思うのと、実際になってみてわかったことがたくさんあるので誰かの参考になればと思って書いてみます。



エンジニアリングマネージャーの方はもちろん、エンジニアリングマネージャーに興味が無い方も読んでいただければ。

エンジニアリングマネージャーになったきっかけ
コンテキストを少しだけ（興味ない方はこの章は読み飛ばしてください）。

私は2年くらい前にプレイングマネージャーになることを決めたんですが、正直なところできるならマネージャーにはなりたくなかったです。なぜかというと、

現場もエンジニアリングも大好き
現場にいる方が自分のパフォーマンスを発揮できる
マネジメントは自分よりも得意な人がいるハズなのでその人に任せたい
マネジメントなんてかったるい
という思いがあったからです。以前にも何度かマネージャーになるタイミングはあってもことごとく断ってきたんですが、

最高のチームとその仕事を外部から壊されたくない
やったことがないのに文句を言うのはダサい
「自分がマネージャーだったら…」が溜まっていたのでそれをやってみようと思った
まずはやってみてマネジメント業務を圧縮すればプレイヤーでいられるのでは？
という理由でやってみることに決めました。

意識低いエンジニアリングマネージャーが意識したこと
意識したことはたった1つだけ、「チームが仕事に集中できるようにする」ことです。

幸いなことに自分は「チームやメンバーは最高だ」と自信を持って言えるので、彼らが集中して仕事ができればよい結果が生まれるという確信しています。ど素人のエンジニアリングマネージャーにできることは限られているので、まずはそれだけをやろうと思って取り組みました。

意識低いエンジニアリングマネージャーになってやったこと
やるからには意識低いエンジニアリングマネージャーを全力でやろうと思ってやったことを少しだけ紹介します。

勉強する
エンジニアリングマネージャーだからといって、エンジニアの上位互換なわけではなく、まったく別の役割を担うことになるので勉強が必要です。ドラゴンクエストで例えると、戦士が僧侶に転職したようなものなのでLV1からのスタートです。効率よくレベルアップするには勉強するしかありません。具体的にやったことは以下です。

「この人すごい！」って思う社内外のエンジニアリングマネージャーの話を聞きに行く
マネジメント系の勉強会に参加する
マネジメント、組織論、教育学、心理学などの本を読む
最近の本だと以下の2冊が面白かったです。


エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング

posted with ヨメレバ
広木 大地 技術評論社 2018-02-22
Amazon
Kindle
楽天ブックス
楽天kobo

エンジニアのためのマネジメントキャリアパス ―テックリードからCTOまでマネジメントスキル向上ガイド

posted with ヨメレバ
Camille Fournier オライリージャパン 2018-09-26
Amazon
Kindle
楽天ブックス
勉強会だと最近はEngineering Manager Meetupが定期開催されていてアツいです。Slackグループもあって、勉強会の告知やいろんな現場のマネージャーの話を聞けるので良いです。


Engineering Manager Meetup
## 概要 エンジニアリングマネージャと聞いたときにどういう役割を思い浮かべるでしょうか。 私が知る限りだと日本のソフトウェア業界で統一された定義・見解を見ることはほとんどありません。会社や人それぞれによって思い描く姿やその実態・運用が異なり、それ ぞれの創意工夫や悩みがあるのではないかと思います。 本イベントは...
engineering-manager-meetup.connpass.com

Create Account | Slack
engineering-manager.slack.com
またそれだけでなく、エンジニアリングやビジネスに関する勉強もより積極的になりました。もともと勉強が好きなので、本を読んだり手を動かしたり勉強会に参加するのは趣味のようなものだったんですが、マネージャーになってからはより意識して取り組むようになりました。

プレイングマネージャーだからということもあるのですが、それ以上にマネージャーとして知らないことで自分がボトルネックになることを避けるためです。マネージャーの役割を担うことでプレイヤーとしての時間は減ってしまうので、ボトルネックにならないように必要になりそうな技術要素やドメイン知識に関してはインプットを怠らないように気をつけました。



意識低いエンジニアリングマネージャーは、効率的にレベルアップし、かつ現場のボトルネックにならないようにするためには勉強をするしかなかったのです。

情報を筒抜けにする
マネージャーに降りてきた情報はほとんどすべてメンバーに伝わるようにしました。

組織のマネージャーにいると、わざわざピラミッドの上から順々に情報を流していく大きな滝が存在します。そして大して理由もなく「いったんマネージャーまでで」と謎の制限がかかります。

ですがそんなことは関係なく、自分が得た情報は自己判断でリアルタイムにチームに共有するようにしました。「ほとんどすべて」と書いたように、さすがにまずいと思うものは止めておこうと考えていたのですが、役員レベルならいざ知れず自分のような末端のマネージャーに降りてくるものには機密性がある情報などありません。むしろ人の動きや社内のルールの変更などはやく知っておいて損はないことがほとんどなので、マネージャーでワンクッションおいてスピードを落とす必要はないです。

フィルターになる
やってみるまではマネージャーほど普段何をしているかわからない役職はありませんでした。評価面談などのタッチポイントやわかりやすいものは想像できるものの、正直なところそれ以外の日常の生態が不明でした。

なのでいったんすべて自分で受けるようにして、どのような仕事があるかを把握し、その上でムダだと思ったものは徹底的に排除するようにしました。



例えばレポーティングに関しては、チームの仕事を誰に対してもオープンにすることで、レポーティング自体を極力しなくてもよいようにしました。特に私達のチームではモブプログラミングをしていたので、自分の上司には「いつでも参加してください」と伝えていました。結局来てくれたことはないけど、うまくいっているのでよいということでしょう。幸いなことに自分の上司も協力をしてくれたので、極力めんどくさいことは自分でやったり、自分の上司におしつｋ・・・お任せをして、本当に必要なものだけ現場に協力してもらうように心がけしました。


モブプログラミング | TAKAKING22.com
「モブプログラミング」の記事一覧です。
takaking22.com
マネージャーがフィルターになってムダを取り除くことで、現場のメンバーが全力で仕事に取り組めるならばそれが一番だな、と思います。

そして意識低いエンジニアリングマネージャーはムダなことをしたくないので、改善に必死でした。

意識低いエンジニアリングマネージャーとして今思うこと
最後に、実際にエンジニアリングマネージャーを経験してみて思ったことを共有します。

エンジニアリングマネージャーって面白い
やってみてエンジニアリングマネージャーって面白い仕事だな、と思いました。

何が一番面白いかというと、ムダがたくさんあるので改善しがいがあるところです。マネージャーは多くの人や組織と関わることになるので複雑になりやすい仕事なので、その分ムダが生まれやすい仕事です。そのムダのとり方のほとんどは、現場でやってきた改善活動とそれほど変わらないのでいくらでもやりようがあります。マネージャーになる前に感じていた「もやっとしたこと」はあながち間違いではなく、それをマネージャーとして主体性を持って一つずつ潰していけばいいだけでした。

最初に書いた通り、マネジメントなんてかったるいと思っていたのですが、自分が想像しているつまらないマネージャーがかったるいだけでした。組織・チーム・メンバー・プロダクトのためにやれることは無限にあるので、主体性を持って取り組めばやりがいがある仕事です。

Manage＝うまくする

manageの意味・使い方 - 英和辞典 Weblio辞書
manageの意味や使い方 【動詞】 【他動詞】1a〔+to do〕どうにかして〈…〉する，うまく〈…〉する; 《反語》 愚かにも〈…〉する.用例I managed to get out... - 約1088万語ある英和辞典・和英辞典。発音・イディオムも分かる英語辞書。
ejje.weblio.jp
動詞であるManageを日本語にすると「うまくする」「なんとかする」という訳があって、「管理する」よりもこっちの方が好きです。

どうしてもマネージャー＝管理者というイメージが強く、意識しすぎるとメンバーを子供扱いしたり、不要な上下関係ができてしまいます。マネージャーはエンジニアやスクラムマスターやプロダクトオーナーと同じくロールの1つに過ぎません。マネージャーは親でも先生でもネ申でもなくただの人です。

「この組織・チーム・メンバー・プロダクトを、うまくいかせるためにはどうすればいいだろう？」

と考えて、メンバーを信頼して、メンバーに信頼してもらって、肩肘張らずに、意識だけ高くならずに、自分ができることをやっていけばそれでいいんじゃないかなーと思いました。

『なんでもはできない、できることだけ』ですね。

次は
今回はちょっとネタっぽく書きましたが、

子供扱いをすると子供として振る舞う
主語が僕らになるか彼らになるか
マネージャーは孤独だ
などなどネタはいろいろあるのでまたどこかで。

次は @nakahashi さんです。お楽しみに！

オフショア先と社内システム開発をエンジョイした話
この記事は、Engineering Manager vol.2 Advent Calendar 2018 4日目向けに書きました。

弊社では、UUUM Advent Calendar 2018 も公開していますので、こちらもどうぞよろしくお願いします！

開発兼マネジメントを担当しているナカハシ（@k_nakahashi）です。

先日まで半年間、ベトナムのオフショア先と一緒に社内システムの開発を行いました。

個人的にオフショア先との共同作業は初体験でどうなることかと思っていましたが、とりあえず形にはなったのではないかと思います。

やってみて初めてわかったことが多かったですし、そのとき試した進め方や感じたことなどを書いておこうと思います。

何を作った？
今回オフショア先と開発することになったのは、Rails製の社内システムです。

ビジネス的に重要な情報を蓄積して長くメンテナンスしていくことが前提となるため、設計や可読性に関してはある程度の水準を達成する必要があります。

とはいえ、社内システムゆえにハードな非機能要件はありません。設計もスタンダードな、いわゆる「Rails way」なアプリです。

どんな協業先？
もともと弊社では、他のシステム開発でベトナムにあるFramgia社と協業しており、今回も同社にお願いすることになりました。



最初のオフショア先としてFramgia社を選定していた理由ですが、同社の他社との協業実績がすでに多くあったことと、サポート体制に信頼が置けそうだったからです。今回の開発のPM兼エンジニアの私は、それに乗っかった形です。

開発がスタートする前の月、ベトナム・ハノイにあるFramgia社のオフィスを訪問しました。

ハノイの街並みは、東南アジアらしいカオスっぷりが印象的でした。2車線の車道でも信号は少なく、徒歩で横断するにはおびただしい量のバイクをすり抜けながら進むスキルが求められます*1。



出張でベトナム来ました！ #hanoi #交通量

Framgia社が入居しているビルは、ベトナムらしい伝統的な街並みの中にいきなりモダンなデザインで建っていています。オフィスの中にはものすごいおしゃれなカフェとかあって、控えめに言って弊社よりすごいかも(?)w

そもそもエンジニアが全社で700人もいて、エンジニア組織としては相当な規模です。エンジニアのレベル区分も洗練されていて、今回の要件に合うような要因のアサインもしっかりやってくれました。

キックオフミーティング＋α
キックオフミーティングでは、開発してほしいシステムの概要や利用してほしいライブラリなどの要望や調整、開発フローの確認などを行いました。

この際に技術的な議論をしたのですが、質問の内容や深さも「このひと達WebやRailsのことよく知ってるなー」というレベルで、安心感が増しました。

弊社のRailsプロダクトではテストでminitestを採用していたのですが、彼らとの議論で今回はRSpecを使うことにしました。

弊社でも当然そういった議論はあって、RSpecのデメリットなどを認識した上で採用を見送っていました。ですが個人的には使ってみたかったしw、彼らの経験値を活かすのもよさそうと思い、こういった形にしました。（依頼を受ける側の彼らに「自分たちの要望を聞き入れてくれる」という風に思ってもらったほうが今後のコミュニケーションもうまくいくかも、という考えもちょっとよぎっていました）

夜は、チームのメンバーとキックオフディナー（というなの飲み会w）に参加しました。

今回私が担当するシステムの開発メンバーの他に、従来から継続して開発をお願いしているチームのメンバー、現地の日本人スタッフの方たちが一緒だったのですが、乾杯の音頭が日本の「カンパイ！！」の10倍位長い上にハイテンションですごかったw 基本的に私の英語の能力は壊滅レベルなのですが、通訳なしで少しでもチームメンバーと話せたのは、今振り返っても良かったと思います。

デカいボールの中に白濁な現地のお酒が出てきてコップですくって飲むのですが、口当たりが良すぎて危険だったことはよく覚えています。

チーム編成
チームの編成ですが、依頼する側の我々はPM・エンジニアとしては主に私一人で、技術的な支援（相談相手）としてチーフエンジニアのnazoさんやCTOのBTOさんなどのメンバーにときどき手伝ってもらうという感じでした。

オフショア先のFramgia社ですが、

Railsエンジニア : 3名
QAエンジニア : 1名
ブリッジSE（通訳兼PM的なポジション） : 1名
というチーム編成になりました。

今回の開発では、以下のようなコミュニケーション上の制約が念頭にありました。

ネイティブ言語*2が私とオフショア先とで異なる
物理的にフェイスtoフェイスのコミュニケーションは、基本的にない
ビジネス上の背景やシステム要件は、全て私経由で伝える必要がある
一言で言うと「ツラい」のですがw、彼らもそういった状況は慣れたものなわけで、コミュニケーションやマネージメントをサポートしてくれるブリッジSEなる存在がこの辺のツラみを様々な形で軽減してくれました。

もちろんエンジニア間で直接コミュニケーションも取れるのですが、必要に応じてブリッジSEと日本語で連絡するというオプションがあるのはありがたいです。

進め方
今回の開発は、納品日に一気に納品してもらうウォーターフォール＆請負型ではなく、スクラム風スタイルで進めていくことにしました。

社内の他のシステム開発に倣って、一週間ごとに定例ミーティングを開いて作業と問題点の確認を行いつつ、コミュニケーション上の特性を考慮して以下のようにしました。

Slackチャンネルを共有
週次定例ミーティングはSlack Callで
要件はGitHub Issueで私から共有・管理（この時点ではいわゆる「ストーリー」レベルの抽象度）
要件の分割・詳細化はFramgiaチームに任せる
開発環境の整備（開発環境のインフラ・CI・利用するユーティリティ的なGemの選定や組み込みetc...）は私が実施
GitHubフロー、レビューは英語、マージは私とFramgiaチーム全員のエンジニアのapprovedを必要にする
日報などはもらわない（Framgiaチームに日毎の管理は任せる）
エンジニア陣の技術力は十分であるものの、（私の言語的な問題もあって）コミュニケーションコストが高いので、彼ら個人ごとの進捗管理は基本的にFramgiaチームでやってもらうという方針です。*3

ですが、彼らからの出口（マージ）は私を必ず通すことにして、このシステムに求められる保守性の担保をするようにしました。（ある意味力技ですが...w）*4

また、開発環境の整備に関しては希望要件を全部伝えるのは大変なので、ここは私が一気に実施することでコミュニケーションコストを抑えるようにしました。同様に開発の初期段階では、DBのスキーマ設計などは私が実施していました。（途中で先方の技術力がわかってきたため、それも含めてお願いするように変えていきました）

開発を始めてみて
要件まとめ＆レビュアーが私一人で、Railsの手練が3人＋αという体制、思ったより多勢に無勢という感じでしたw

もともとは私自身もコードを書こうと思っていたのですが、彼らの開発速度が速すぎて私のレビューが間に合わなくなり、Slackで「@nakahashi_k plz review 😘」というメンションを貰うこともしばしば。しかも彼らはPR作成時点でQAを済ませているため、基本的に品質もよかったです。

自分でコードを書く時間をなかなか取れなくて不本意ではあったのですが、黙っているとコードがpushされてきてそれをapprovedするだけ(?)で開発が進むため、なんだかゲーム実況をみているようなちょっと楽しい気分になっていました。

ありがたかった（うまくいった）ところ
私としては上記のように手がいっぱいになってしまうことが多かったのですが、週ごとの開発ミーティングのアジェンダ作成で先方が主導して作ってくれたり、仕様のQ & Aをスプレッドシートにまとめてくれるなど、PM業務もある程度手伝ってくれたため、助かりました。*5

またレビューも不安だったのですが、英語での議論も意外と何とかなるし、説明に困ったらコードをPRコメント内に多めに書いて伝えるようにするとスムーズに通じるため、思ったよりは苦労しなかった印象です。

なによりpushされてくるコードの品質がよかったし、指摘するといい感じに手早く修正してくれるのがよかったと思います。

うまくいかなかったところ
当初、こちらからのIssueによる仕様伝達も英語にして先方のエンジニアに直接伝えられるようにしようと思っていたのですが、私の英語力の問題で間に合わなくなり、結局私は日本語でIssue書いていました。

これに関しては、そのために先方にもブリッジSEがいるし、ブリッジSEがベトナム語に訳してくれるため先方のエンジニアもその方が楽そうでした。結果的にはこちらのほうがよかったかもしれません。

また、自分はPRの説明文に関しては割とちゃんと書いて欲しいと思う方なのですが、PRのテンプレートをコードベースに入れてはいたものの、ここの重要性がなかなか伝わらずに苦労しました。作業が必要になった背景などは確かにミーティングの議事録やQ & A集などをみればわかるのですが、PRの説明文にも多めに書いてもらうとレビューの時に安心感あったのですが。。。

とはいえ、全般的に開発はうまくいったし、ボトルネックは（前述の通り）私にあることが多かったですw

現在
以下の理由で、現在ではFramgia社のエンジニアチームによる開発は終了しており、内製に切り替えています。

稼働に必要な最低限の機能開発が終了した
開発内容に社内の他システムとの連携が多くなり、外注しずらくなってきた
彼らが開発したコードに関しては、基本的に私が目を通せていたので内容に関しては把握できていますし、社内の他のRailsアプリと設計も同様に開発してきたので、内部のエンジニアにも共有しやすいようになったと思っています。

まとめ
オフショア先であるFramgia社と一緒に開発した半年間は、振り返ってみるとあっという間でした。

この間のきちんと動くコード、作った経緯を記述したドキュメント群といった成果物は確実にありますし、一緒に作業していた私としても納得感のあるクオリティを担保できていたのではないかと思っています。

また、RailsのベストプラクティスやGitHubフロー、スクラム開発といった手法はもともとグローバルなものなので、国が違っても通じやすいものだと感心しました。なので、こういった手法を採用せずにオレオレ開発を続ける個人や企業の場合、オフショア先との協業はよりハードルが上がるでしょう。

何より、彼らのエンジニア陣の技術力の高さ、チームワークの良さに何度も助けられました。

言語や文化の違う会社との共同作業には不安もあったのですが、彼らとのコミュニケーションに関しても（少なくとも私にとってはw）ポジティブに進められたのは嬉しかったです。最後のミーティングは、お互いを褒めまくって終わりましたw

これからも、いろいろな形態のチームで開発を行うことが出てくると思いますが、ツボを押さえて楽しく作業ができればいいなと思っています。*6

*1:意外に慣れます。コツは歩きながら目でバイクに乗ってるひとを牽制すること

*2:話し言葉のことです。一応...w

*3:Framgia社内のマネジメントも洗練されていたので、そっちは利用させていただく方向

*4:そもそも、長く保守することが前提のこういったシステムを社外のエンジニアで開発するのもホントはよくないのですが、システム自体の需要の高まりとのバランスでこんな感じになりました

*5:これは、彼らからするとトラブル防止の意味もあったかと思います

*6:ハノイの街並みやベトナム料理、現地の方々の温かさなどすべてよかったので、またベトナム行きたい...！　会社の近くのベトナム料理屋によく行くようになりました

エンジニア採用を通じて学んだこと
採用
EngineeringManager
この記事は
Engineering Manager vol.2 Advent Calendar 20185日目を担当してみます！ヨシナガです。

エンジニアリングマネジャーにとって、エンジニア採用は超重要な仕事です。ただ、採用プロセスに関わると、

急に差し込まれる面接の予定 :calendar:
山積みになる書類選考 :books:
真面目に書くと大変なスカウトメール :e-mail:
のような業務に圧倒されてしまいます。そんな中で内定承諾されない状態が続くと、へこたれてしまうこともあるのではないでしょうか？

この記事は、エンジニア採用に関わる人に向けて、採用に関わるとこんな学びがあるよ！ということを紹介したいと思います。

想定読者
エンジニアの採用プロセスに携わっているエンジニア、エンジニアリングマネジャー
（エンジニアに採用に協力してほしい）人事・採用担当
前提
私が経験した採用業務は、基本的には以下の選考プロセスでした。

書類選考
一次面接（面接官2名）
二次面接（面接官2名）
最終面接（社長による面接）
一次面接の前にカジュアル面談が入る場合もあります。カジュアル面談は選考するというより会社を紹介してお互いのマッチングを見極めるために行います。
私が主に担当していたのは書類選考から一次面接のプロセスでした。

一次面接は、だいたい以下の流れで実施していました。
- あいさつ
- 候補者の自己紹介(~5分)
- 候補者への質問タイム(~15分）
- 会社、募集しているポジションの紹介（~15分）
- 技術的なスキルチェックのための質問(~15分)
- 質疑応答（~10分）

ここからが採用を通じて学んだことの紹介です！

会社のブランディングに対する理解
一次の面接官は、採用候補者にとっては初めて会う自社の人、というケースがほとんどです（有名人、有名企業でもない限り）。一次面接が会社の第一印象を決めるといっても過言ではありません。もちろんこちらが選考するという観点もあるのですが、会社も選ばれる立場であるという自覚を持って面接に臨むようにしていました。これは会社のブランディングの一部を担当している、ということになると思います。
また、技術コミュニティの登壇やスポンサーをきっかけに会社のことをすでに知っていたという候補者と出会うことがあり、そういう時は素直に嬉しいものです。今では会社を知ったきっかけを候補者の方に必ず聞くようにしており、コミュニティ活動の採用への貢献度を測れるようにしています。

会社のミッション/ビジョン/バリューに対する理解
一次面接では自社の説明を行います。その中で欠かせないのが会社のミッション/ビジョン/バリューの説明です。ここの共感がないとそもそもマッチしていない可能性が高いですので、必ず説明するようにしていました。
これを面接のたびに毎回やっていると、私自身の会社のミッション理解度も徐々に深まってくる、ということを体験しました。面接を担当することで、口に出して何度も繰り返す、ということが自然にできていたからだと思います。困難に陥った時に立ち戻るポイントが会社のミッションですので、それを自分なりに腹落ちして理解できるということは、マネジメントにおいても助けになるのではないでしょうか。

コミュニケーションスキルが向上する
面接では、初対面の人に対して質問する、ということを繰り返します。数ある企業の中でせっかく自社に興味を持っていただいたわけですから、何かしらその人の良さや特徴を引き出したい、と考えていました。この考えのもとで面接を続けてきたことにより、自分自身の傾聴する力が鍛えられました。この力は1on1などでも活かすことができました。
また、選考の結果を出す時に、その理由を言語化・文章化するプロセスが発生します。たった一時間しか会っていない人の評価をするなんておこがましいと思いつつ、面接の記憶が新しいうちに評価申し送りを書いていました。これを繰り返していることで気づいたことは、人を評価するときには自分の信念と向き合うことで結論を出している、ということでした。時には厳しいことをメンバーに伝えなければならないのがマネジメントのしんどい部分ではありますが、信念の確認を定期的にできていたことで日和らずにフィードバックできていたように思います。

人事・採用担当にエンジニア文化を伝えられる
採用活動は、人事・採用担当との連携が欠かせません。私の場合は、スケジュールの調整やスカウトメールの清書など、多くのことを手助けしてもらっていました。このように仕事を連携して進めていく中で、エンジニアの考え方や文化が浸透したように感じました。採用のタスク管理にはGitLabのイシューを使っていますし、Slackの活用方法も自然と広まっていきました。新規の技術カンファレンスになにか関わってみたい、といったときに、それを後押ししてくれるようになりました。

おわりに
私が採用を通して学んだこと、実感したことを整理してみました。正直な話、自分は人と話すのが苦手なタイプなんですが、採用活動を続けたことで変化できたこともあるように思います。それに、採用の結果、入社した人が活躍するのを見るのは他では得られない喜びで、採用に関わった人へのご褒美なのだと思います。採用はエキサイティング :muscle: がんばっていきまっしょー :exclamation:

研修中に爆睡して学んだ 1on1 で「待つ」ことの大事さ(How I learned the importance of patience in one-on-one MTGs from sleeping)
(English follows)

前置き
この記事は Engineering Manager vol.2 Advent Calendar 2018 6日目の記事です。

メルカリで Engineering Manager をしている masartzです。
今日は、先日自身が体験したことから得た、1on1の学びについて書いてみようと思います。

1on1コーチングの研修
メルカリでは、急拡大する組織に対応するため、Managerなどの中間層の教育・育成も急務となっております。Managerとしては、HR部門のサポートもあり研修プログラム等も受講する機会が与えられます。

先日 「1on1コーチング」のための時間があり、外部のプロコーチの方を相手に「コーチングを受ける側」の立場から勉強しようという機会でした。

当日、会議室に着き、挨拶と自己紹介を済ませ、いよいよ本題です。

コーチ:「最近の課題はありますか？」
masartz:「（もちろんない訳ないので、）あります」
コーチ:「例えばどんな課題ですか？」
masartz:「Aとか、Bとか、あるいはCとか、、（他にもたくさんある。。）」
コーチ:「なるほど、そうですよね。その中で敢えてこの場で話したいものはありますか？」
masartz:「うーん・・・」

ここで、とても困ってしまいました。失礼ながら赤の他人にいきなり話したい話題でもない。 俺としても日々悩みながら、周りと相談しながら進めていくべき事で、パッと答えが出るとか期待してないし、期待しちゃいけないとも思っているからです。

そんなようなニュアンスは伝え、「じゃあ、もっとたわいのないことでも、なんでも良いですが、どうですか？」と話題を振り直してもらいましたが、どうしても「この場を有意義に使えるような、何か適当な話題を探さなければ」という思いが頭から離れず、ウンウン唸るばかりでした。

実はこの日とても体調が悪く自分でも、頭回ってないなー、と思っていました。

さすがにラチがあかないので「ゴメンなさい、体調悪くて本当に頭が回らないです」と正直にお伝えしました。その後も、ストレッチをしてみましょう、とかなんとかきっかけを探そうとしてくれたのですが、最終的に「今、仕事関係なく本当に何をしても良いなら何したいですか？」と問われたので、答えました。

「正直、、寝たいです。。」

その返事は、ビックリするもので

「わかりました、じゃあ寝てみましょう！」

でした。

徹夜プロジェクトでよくやる、会議室の椅子を繋ぎ合わせた簡易ベットをその場で用意していただき、本当に寝ることになりました。その際に、「あとで起こしますね」と言っていただいたので、5分か10分仮眠したら起こしてくれるのかなと思って、試しに寝てみることにしました。

その後、起こされた時は研修時間の終了5分前でした。
90分の枠を用意していただいて、最初の30分が最初の話題探しの時間、なんとその後60分近く寝ていたそうです、、

「無理にアクションしても得られるものはない、まぁこういう時もありますよ」と全く意に介さない笑顔で場を絞めてくださったプロコーチの方には申し訳無さと共に、大きな勉強をさせていただいた感謝がありました。

この件から学んだこと
一種のコミュニケーション研修でしたが、そんな状況だったのでコミュニケーションした上でなにかを得たっていうものはぶっちゃけなにもありません（当たり前）。

しかし、この異常とも言える機会は、1on1において 相手の状況が好転するまで極限まで待つ という事の究極のベンチマークだったなと思います。 これはこれまで自分がメンバーとの1on1の場において、 その場をいかに充実させるか 、っていう事を考え、苦心していた身として完全に真逆のアプローチでした。
あそこまでのベンチマークを取る事はなかなかできません。60分寝かせて、MTGを無価値のまま終わらせる事を許容できるのが本当にすごいし、俺が外部の人間として顧客企業で研修する立場なら絶対途中で起こすだろうと思いました。

それ以降の自分の1on1スタイル
前述の通り、自分の1on1の課題はいくつもあります

業務の細かい連絡や確認など、自分から話す・伝える時間が多い
典型的に気をつけなければいけない事例の一つ、1on1の主役はあくまでメンバーです
メンバーへの効果的な話のフリができない
せいぜい「最近どう？」からの雑談レベルに終始してしまう
メンバーからの話題を引き出す力が弱い
引き出そうとしても「うーん、特にないです」という返答をよくもらう
ダメなあるある典型例ではないでしょうか。
だからこそなお頑張って充実させようと思うと、より自分の話す時間が増えてという無限ループですね

なので、この件以降に決めた事としては

例え相手が寝る事だって受け入れる、もし寝て起きたらスッキリした頭で「そういえばこの前こんな事を考えて・・」とでも話を切り出してくれたら最高

と考えるようにしました。

具体的に1on1の途中でネタ切れしたら、
「じゃあこのままお互い自分の仕事でもして、なんか思いついたら話してー、なんも思いつかなければそれでも良いよ」
と言いつつ一緒に過ごす、などのアクションをするよう心がけています。

もちろんこの件をグローバルメンバー含めたチーム全員にも伝えようと思い、この記事も日英で書いています。

まとめ
1on1の方法論に限りませんが、対極的な考え方・やり方から思考の幅を広げるのは様々な場面で有用です。 それが難しいのは、対極的な考え・行動を自分自身ではなかなかできない（だからこそ対極にある）からです。 今回、プロコーチという非常に思考の幅の広い方の助けを得て、そのような事を学べたのは非常に良い機会でした。

宣伝告知
さて、メルカリではまさに様々な思考を持ったEngineering Managerを探しています。 俺のポジションも絶賛募集中であり、研修中に寝るやつより働ける！と思う方からのご応募お待ちしております。


mercari.workable.com

メルカリのこれからを担うMicroservicesのPlatform部分を作る大事な仕事です。 どうぞよろしくお願いいたします！

明日は fukuo33 さんです、どうぞお楽しみに！

夫婦生活にも使えるマネジメント術
Management
マネジメント
まえがき
この記事は、Engineering Manager vol.2 Advent Calendar 2018 7日目向けに書きました。

@fukuo33 です。株式会社サイバーエージェントでエンジニアリングマネージャーを3年ほどやっています。
突然ですが、今年めでたく結婚いたしました。お相手は社内のエンジニアです。
今年一年はより円満な夫婦生活を送るために、業務で培ったピープルマネジメントを活用しようといろいろ試してきました。
今回は、我が家の夫婦生活において、業務でのマネジメントと同様な手法が使えたところ、使えるが気をつけたほうが良かったところ、を公開しようと思います。

前提
今回のお話は、僕と妻との関係が 同一会社、同一職種 であり、コンテキストが近い関係であることに注意してご覧ください。
また、基本的にこちら2冊の本から考えを拝借しています。
エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング | 広木 大地
パフォーマンス・マネジメント―問題解決のための行動分析学 | 島宗 理

テクニック その1: 傾聴(1on1)
傾聴は、夫婦生活において「ねぇ、今日さ、こんなことがあったの」のような妻の何気ない一言から始まります。まず気をつけることは、始めから自分の意見(アドバイス)は言わない ようにしています。これは通常の傾聴と同じで、まずは吐き出すことで妻の気持ちが整理されることを期待します。

通常の傾聴と変えてるところは、①問題整理に入る前に、より長く話を聞く ことと、 ②共感をより多めに使う ことです。

①に関しては、業務での1on1は限られた時間の中で実施するので質問を使い相手の思考整理をサポートしますが、妻とは長い時間を共にすることもありまずは吐き出すことによる妻の自己整理を優先させています。本音を言うと、僕自身も業務での1on1並に頭を使い質問をすると、疲れてしまうというのもあります。
②に関しては、適度なあいづちとともに共通の課題に向かってる姿勢を示し、①同様妻の自己整理を期待します。気をつけてることとしては「スマホやテレビばっかり見ない」。問題の深刻度に応じて、スマホを置く、テレビを消す、ようにしています。家でのリラックスタイムとはいえ、気は抜きすぎるのも禁物ですね。

テクニック その2: 二人で決めた状態にする
「夕飯何食べたい？」が持つ理不尽さと、ベストな返答の考察 | 自分の心を殺してはいけない
上記のブログにもあるとおり、夫婦生活を送っていると、妻の「夕飯何食べたい？」という質問は度々発生します。このブログ内でもベストな返答は提示されていますが、マネージャー兼夫としても深掘って考えたいと思います。

まず、考え方の核となるのは 「他者説得を自己説得に」 です。

業務でのマネジメントでは、トップダウンな意見にしないために 相手に決定の裁量を与える=選択肢を提示する ことをします。
夫婦生活では、僕(夫)が決めた/妻が決めたではなく 二人で決めた 状態を目指します。

僕(夫)が独断で決めてしまうと妻はトップダウンのように感じますし、それに対して意見を言われることは僕自身のアイデンティティを侵されたように感じてしまいます。逆も然りです。
二人で決めた状態にすれば、問題があっても二人で反省できるし、良かったことは二人の共通認識になります。具体的には
妻「夕飯何食べたい？」僕「僕はxx食べたいけど、何が作れるんだっけ？{妻}は何食べたいの？」妻「xxx」僕「xxx」
のような感じで要は対話ですね。

テクニック その3: 「(僕は)悲しい気持ちになった」
これは妻がナチュラルに使っているので、僕も真似して使うようにしているテクニックです。

何か相手の行動を直して欲しいときに、相手の行動を直接注意するのではなく、「(僕は)あの行動、気になったかも」のようなメッセージにしています。
直接的な注意に対しては、反発の原理が働くことがあり素直に意見を聞けなくなることがあります。ここで主語を自分にすることで、妻への攻撃ではないという態度を示し、妻が考えるきっかけ作りになるようにしています。

これは逆に業務でのマネジメントにも応用するようにしています。

テクニック その4: 夫婦喧嘩
僕自身はあまりアイデンティティの範囲が広くないので感情的になることは少ないのですが、それでも何度か夫婦喧嘩がありました。

この反省を踏まえて気をつけていることは、アイデンティティの範囲 と 反発の原理 です。

夫婦生活の中では、僕の何気ない行動が妻を怒らせたり、何気ない指摘で怒らせたり、してしまうことがあります。'地雷' や '空気を読む' のようにも形容されますが、アイデンティティの範囲は目に見えません。故に 相手が何を大事にしてるのか、何をアイデンティティとしているのかを学ぶようにしています。
また その2 と同様に問題に対しては 二人で解決する ことを意識します。幸い我が家はふたりともエンジニアなので、機械の力を活用することが多いですね。
妻「いつも電気つけっぱなしじゃん！」僕「ごめんね」 -> 二人で考えて「Nature Remoで管理するようにしよう」

また、何気ない指摘で相手を怒らせてしまったときはさらに慎重に対処するようにしています。なぜなら反発の原理として妻の意見が僕への反論にすり替わってしまうことがあるからです。この反論に対して僕が腹を立ててしまうと喧嘩に発展していってしまいます。
対処としては、この 反発の原理があるということを理解する こと。
これが理解できていれば、相手の反論に過剰に反応せず、相手を怒らせてしまった=アイデンティティを侵してしまったという 自己反省に切り替える ことができます。

まとめ
とりとめのない感じになってしまいました。
実際のところは、僕だけでなくむしろ妻のたくさんの努力があって、今の所我が家は家庭円満です。この場を借りて、妻に感謝したいと思います。
「いつもたくさんのサポートありがとう。そのおかげで僕はがんばれます」

※ 率直な感謝も大事ですね^^;

スタートアップでのマネージメントについて
マネージメント
スタートアップでのマネージメントについて
前書き
はじめまして！エンジニアリングマネージメントをしている鷹雄です。
Qiitaで初めてブログを書くのでドキドキしながら書いています。
マサカリ投げる場合は投げ方を気をつけてくださいｗ

エンジニアリングマネージャーを始めたのは2014年の頭くらいから。
大企業の1つの部署で共通組織としてインフラを管理する部署を立ち上げました。
私が部署を立ち上げたとき、メンバーはみんな私より年上で
最初はマネージメントするのがとても大変だった記憶があります。

最近以前の部署を卒業し、
今年の8月にBlockchainを活用したサービスを作る新しい部署を立ち上げました。

以前は共通組織としてしっかりした基盤を作ったり、
インフラのコスト削減とかをしていました。

コストセンターな部署だったのでもともとビジネスをしたいと思っていた私は
ブロックチェーンでなにかビジネスを作るという話が出たときに
すぐに飛びつきました。
しっかり引き継いでくれたメンバーには頭が下がる思いです。

今回、新しいスタートアップの部署で始めたエンジニアリングマネージメントについて
気をつけていることを書ければと思います。
前書きが長いですねｗ

ブロックチェーンを活用したサービスを作るスタートアップ
今の部署での目的はブロックチェーンで何かサービスを作ることです。
ものすごい数のICOを見ていたら、
ブロックチェーンを使ったビジネスって今後いろいろな
やりようがあるんだなぁと思っていたのですが
実際に仮想通貨以外でうまくいっているブロックチェーンビジネスが
現状ほとんど無いことに気づいたときは絶望しましたｗ

ですが、事業責任者の「この技術はすぐにはお金にならないことは分かっている。
目先のお金ではなく、何年後にしっかりしたビジネスを起こすために今から
投資していくことが重要なんだ」と言ってくれた言葉に助けられ、
また、優秀なメンバーが集まってくれたことにより
今ではブロックチェーンを活用したビジネスを研究し、
ブロックチェーンを活用したサービスを実際に作ってみたりしています。

スタートアップでマネージメントする際に気をつけたこと
入ってきたエンジニアはみんなとても優秀で、
みんな合理的な考えをしっかり持っているメンバーが集まってくれました。

そんな中で、入ってきたメンバーと今主流のSlackでのコミュニケーションや
GithubのPull Requestでの会話だけでモクモクと進めていたのですが、
1on1をしているときにあることに気づかされました。

それが「圧倒的なコミュニケーション不足による心理的安全性の欠如」です。

無駄な会議は不要ですし、
仲良く会話しながら開発する必要は無いと思っています。

ですが、すべてテキストのコミュニケーションだけでは
相手が何を考えているのかが分かりづらく、ミスコミニケーションが起き、
次第にプルリクを送るのですら恐怖を覚えるようになりました。

優秀なエンジニアであればあるだけ完璧を求めようとしますし、
細かくお互いにチェックしていたため、
キツい表現になってしまっていたり、
意見を言ったら何倍にもダメだしを食らうような環境に
いつの間にかになっていました。

そこで、みんなで相談した中で取り入れたことがいくつかあります。

1つめは寛容になることです。
お互いに寛容になることで、しっかり相手を尊重し、
コミニケーションを円滑にすることが、
実際に自分にも返ってくるんだという話をしました。
そもそも自分自身がもっと寛容にならないといけないんだというのも認識しましたし、
メンバーもしっかり理解してくれたように思います。

2つめに朝会です。
今までも朝会はやっていたのですが、Slackで今日やることを箇条書きに出すものでした。
すごく合理的な気もするのですが、心理的安全性が無いと
書いたテキストに突っ込みを入れるのも結構勇気がいるものです。
そこで、実際にディスプレイの前に集まって、
スプリント計画を見ながら今日やることを宣言するような形にしたら
その場でいろいろなディスカッションができ、
うまく回るようになってきました。

3つめはムービングモチベーターです。
ムービングモチベーターはManagement 3.0で出てくるトピックの1つで
仕事をする上でモチベーションになっているものに順番をつけ、
お互いに話し合うことです。
実際にムービングモチベーターをやってみたところ、
お互いに知らなかった価値観について共有でき、
今までに無いぐらいコミュニケーションが弾みました。
実際に、仕事をする上で何をモチベーションにしているかをお互いに知っておくことで、
コミュニケーションを円滑にしてくれます。

また、ムービングモチベーターは熟達、権力、名誉など、
仕事をする上での本当のモチベーションとは少し離れているんじゃ無いかという話が出て、
リアルムービングモチベーターもやってみました。

元になったムービングモチベーター
受容・好奇心・自由・地位・ゴール・名誉・秩序・熟達・権力・関係性
自分たちで考えたムービングモチベーター
コミニケーション・お金・プライベート・仕事・技術力・ポジション・健康・働き方・労働環境
何かすごい現実的な感じがしますよねｗ
でも、これを実際にやってみようという話が出てくるあたり、
コミニケーションが以前よりも改善してきた証拠だと思います。

4つめはマインドマップです
https://coggle.it
メンバーの1人が見つけてきてくれたのですが、
ものすごく書きやすくてシンプル、綺麗なマインドマップ作成ツールです
元々は自分たちの技術情報のまとめを作ろうとして導入していたのですが、
個人のマインドマップを作ることによって自己紹介とかしやすそうだねという話になり、
実際に自分たちで作ってみました。

簡単な自己紹介になるのかな？と思っていたのですが、
みんな自分をどのように見せたいかこだわるんですね。
びっくりするほどマインドマップを埋めてくれて、
当初1時間のレビュー会を予定していたのですが、予定を大幅に超えてしまいました。
次に飲み会をするときにでも大きな酒の肴になりそうな気がしています。

コミニケーションが徐々に円滑になってくれば
次第に「 意見を出しやすい環境を作る 」が実現でき、
良いサービスも生まれやすくなるんじゃ無いかと思います。

何故すぐにコミニケーション改善に取り組めたか
今の部署にはゼミという何人かで集まって、業務時間の一部を使って
何かを研究してみる制度があるのですが、
その中でエンジニアリングマネージメントゼミというものがあります。
エンジニアリングマネージメントゼミでは
どのようにエンジニアリングマネージメントをしていったらいいかを考えるゼミで、
いろんな書籍を読んで話し合ってみたり、実際に自分たちの考える
エンジニアリングマネージメントについて社内向けの書籍を作って
配布したりしています。

ゼミのメンバーにコミュニケーションについて相談したところ、
ムービングモチベーターやマインドマップについて教えてもらいました。
実は私もManagement 3.0の研修を受けたことがあって、
「ああ、こういう時に使うのが効果的なんだな。」って納得しました。

エンジニアリングマネージメントとはとても孤独な役職ですが、
実際にエンジニアリングマネージメントをしている人同士で
意見交換をできる場があるのはとても重要なことだと思います。

まとめ
合理化も重要だけど、合理化しすぎてはいけないところもあるんだなと言うのが
今回あらためてわかりました。
人間と人間が関わって何かのプロダクトを作り出す以上、
コミュニケーションがしっかり重要だということを忘れないように
このブログ記事に残しておこうと思います。
ここまで見てくれてありがとうございました！

エンジニア採用どうしてますか?
これは


qiita.com

こちらのアドベントカレンダーの9日目の記事です。*1
はじまり
採用に関してここ数年、新しい動きをしていない。
何が正しいとか、何が間違っているかではないと思うけれど、なんだか自分が凝り固まっているんじゃ?という思いと、同様に考えている方がいたら一緒に考えられたらな。と思い書き出してみる。

皆さん、採用どうしているのでしょうか。
自分は社員採用する前に一緒に働くような｢お試し採用｣をちょっと試したいなと考えています。

前提
ざっくりこういうような組織での採用についてのお話。

組織規模
会社全体:50人〜200人
エンジニア:10〜50人
走っているプロジェクト:大小合わせて3~10

業務内容
Web寄りのプロダクト開発。
自社開発もしくは、受託も無くはないが協業という形である程度の制約、要求がある中での開発。
toC事業が主流。

最初に懺悔しとく
面接なのに1on1や進路相談みたいになることがある…。
これって｢不採用です。｣って、その場で言っているようなものだよね…。

技術を通して、やりたいことがある人を採用する。
事業に直結しないまでも社会的に活用される技術や活動を考えて行動している人を採用するようにしている。
逆の場合は、時間もお金もただ消費するだけだと思っている。

やりたいことがある人は、そのやりたいことを話し合えば必要なことを自発的に考えて行動してくれる。
組織的に定義づけられた自分の役割があったとしても、それを越えて行動してくれる。*2

｢開発やりたいです。｣みたいな、開発で得られることが出てこない人は、それ以外はあまり興味がなかったりする。
そうなると、事業だったりチームだったりと目的意識があっていないから*3組織的に動きづらく、成果としても良い結果が出づらくなってしまう。

面接のときにこういう発言をされた場合、念の為、突っ込んで質問をしている。
｢どんな開発をやりたいのか。｣
｢開発の結果なにが得られるのか。｣
｢なんのために開発をするのか。｣

ただし｢開発やりたいです。｣みたいな人も、手数が欲しい時や組織の方向性として特化した技術力が必要になる場合には必要な人であると考えてもいる。
手数の話は言うまでもないが、技術のアウトプットの質は、インプットを大量にした結果だと思う。
高度な質を求めるには、その技術に常に探求している必要があると思う。
しかし、常に高度な質を求めるか?というと違うことがわりかし多いと思っている。

いや、実のところ手数だとしても管理コストがかかってきたりするから止めたほうがいいと思っているんだけれどね。

正社員の場合は、組織構造を考えて採用をする。
正社員は会社を組織するメンバーになる人を採用する。
突発的なプロダクトに起因する理由などでは採用しない。
会社の事業戦略(明確なものが無かったとしても短期的にでも想定しうる計画に基づいたもの。)に合わせて人員計画をたてて採用を行う。

チームの目標は何か、その目標はいつ達成させるのか。
そのために必要なパフォーマンスは?そして、どんな人で何人構成にするのか。
誰をマネージャーにすえるのか、それをチームごとに時系列で考える。

採用から話はずれるが、プロダクトが無くなった場合のことも念の為考慮しておくこともある。
これは本当に動きづらい。

会社全体でもプロダクトのチームでも受け入れの準備も出来ていないのに人を入れることと、活動の方向性が散らばらないように所属人数と新人の方の人数比が3:2みたいになるような受け入れ方は避けたほういいと思っている。*4

突発的だったり(突発的なのは極力避けたいんですけれどね。)、準備が出来ていないがどうしても助けが必要、特定の技術力が必要という場合だけ、派遣の方や外注の方にお願いするように心がけている。(心がけている。)

契約の分だけ助けてもらってその分しっかりお支払いをする。

一緒に働く人が面接をする。
主にエンジニアだが、ポジションに寄っては営業の方や事業部?の方などにも面接してもらう。
エンジニアは入る想定のチームに拘らず、マネージャーだったりメンバーだったり、チームが解散したとしても引き続きその組織で働けるかどうかを意識している。
何度も足を運んでいただくのも申し訳ないとは思いつつも、間違いに気づくなら早いほうがいいとそのようにしている。
なので時には、四次、五次みたいな場合もでてくる。とはいえ、無駄に回数は重ね無いように、面接の順番を組んでいる。

組織によっては、人事の方が採用を決めたりする所もありますよね。
組織構造も人事の方が考えていたりする場合も。
エンジニアに限らずクリエイティブな業務の場合、人事の方が決めるのには懐疑的です。

｢開発という手段で活躍はしたいですけれど、それによって得られる結果はこのプロダクトじゃないんです。｣とか｢本当は、開発もしたいわけじゃない。｣みたいな人が入って来たときの不幸ったらありゃしない。

もしそういう組織があったとしたら、人事の人に声をかけて一緒に活動するようにするのが組織としても採用される側にとっても良いだろう。

技術的スキルは重要だけれど…。
経験年数が長いのに技術力無い方は厳しいけれども、現状の技術的スキルよりはどういう積み方をしているかを重要視している。
技術的移ろいも勿論あるけれども、事業的変化も多分にあるので、変化に対応する力というところが大切だと考えてのこと。

こういう時に｢ネットを調べてます｣"だけ"の人は苦手。大して知識吸収もしてなければアウトプットもしていないことが多い。
ネットの場合はピンポイントで必要な知識しか調べられないので知識の広さ深さが足りないと思う。*5
本や勉強会などに参加したり、自分でプロダクトを作たりして少しでも見てもらえているような人がよい。

少し話はそれるが、01の経験やリリース経験、リリース後の運用経験、クローズ経験なども頼もしいスキルだと思う。

この先、対応してくれるか、成長してくれるか。が大切だと思っている。
とはいえ、見るっちゃみるけれどね(汗笑

採用フローは定形はありつつも臨機応変に対応する。
メンバー採用の場合
一次面接:エンジニアマネージャー+メンバー
二次面接:エンジニアマネージャー+メンバー
三次面接:役員

マネージャー採用の場合は
一次面接:エンジニアマネージャー+メンバー
二次面接:エンジニアマネージャー or メンバー + 非エンジニアマネージャー
三次面接:役員

とはいえ形に拘らず、互いに納得できるよう繰り返し情報交換をする。
回数が多いと他社に負ける。みたいな場合は、
そもそもマッチングが他社よりスムーズにいかなかったのだから正しい結果だと思う。

採用活動
長くなるから省略…。
でも、一番はリファーラルだと思う。

終わりに｢採用の一つ一つを大事にする。｣
採用するにせよ、お断りするにせよ、お互いの人生が大きく変わるタイミング。
どちらにせよ自分もよい人生を送りたいし、相手の方にも良い人生を送ってほしい。

同じ方向を向いているなら一緒に頑張れるし、
違う方向を向いていたとしても｢またどこかで｣と言い合える。

そんな採用活動を心がけたいものだと思っている。

*1:書くの忘れてたので追記

*2:なんて素晴らしい人なんだ!! しかし、こういうタイプの人は積極的である反面あれもこれもと抱え込んでしまったり、その人にフォローされるが故に周りがあるべき役割を果たさない負荷のバランスが悪い組織になったりしまうので、 適宜、仕切る必要がある。

*3:"開発"がやりたいのはエンジニアだけ。

*4:とはいえ、事業をグロース、チームをスケールさせたいときもあるだろうから、そこは自分なりの覚悟を持って進める。

*5:下手したら間違っていることもある。

エンジニアリングマネージャーつらいよ問題への明日。
学習モデル
エンジニアリングマネージャー
EngineeringManager
はじめに
　どうも、みなさん、こんにちは。
　妻の批判はアドバイスとモットーとする エンジニアリングマネージャー @warumonogakari こと かとうです。この記事は、Engineering Manager vol.2 Advent Calendar 2018 10日目向けに書いています。
　Advent Calendarなるものに参加するのは何分はじめてです。PCの前で どきどき・ぷるぷるしております。どうかお手柔らかにマサカリ投げのほど よろしくお願いします。
　また、エラクないのでツイートする内容は所属・関連する組織とは一切関係ありませんこと、ご承知願えればとおもいます。

　さてさて。
　今日は いわゆる「エンジニアリングマネージャーつらいよ」問題について取り上げたいとおもいます。

エンジニアリングマネージャつらいよ問題 あるある
　エンジニアリングマネージャつらいよ問題を整理すると、まず ざっくり以下の3点が「あるある」なのではないかとおもいます。

まず一体なにをするのかもやもや
相手が計算機ではなく人間
ずっとエンジニアでありたかったのに お気持ち
　いかがでしょうか？
　これらは すべて頼まれた時点です。頼まれた時点で このもやもやした気持ちが整理できないまま「お前のほかに誰がいるんだ」「やってもらわないと困る」といった塩梅で「うん」と言わされる。

　つらい。
　つらいですよね。

　あと、しばらく続けていくと こんなこともありそうです。

どうやら 世の中ベースの価値につながっていないスキルのようだ。
この役割に特化していくと いつしか役に立たたなくなるのでは？
　この中のスキルの一つが いわゆる社内政治に対するスキルになるとおもいます。たしかに 社内政治にたいするハウツー本があるにはあるのですが、それがエンジニアリングとは全く関係ないことが記載していて、

ずっとエンジニアでありたかったのに お気持ち
をさらに大きくします。
　つまり、

機能不全をおこしている状況を是として、社内政治のなかで生き抜く、そのためにエンジニアを捨てる
か

べつの誰かに社内政治をおしつけて エンジニアといわれている役割に特化する
の2者択一を迫られていると感じるから、「つらい。。」とおもうですよね。

　わかります。
　わかりすぎです。

　しかも、だいたいこれらのもやもやを 社内の先輩に相談すると いらだちともに「何をいっているんだ！」的に言われる。
　無理もありません、そもそも彼らだって社内政治で生き抜くのを選択している方々なんですよ。もやもやに向き合えないまま現在に至っているのです。それなのに、いきなり 無邪気な後輩に いまさら そのもやもやに向き合え的に質問されたらどう思いますか？

　そう。
　実は、かれらだってつらいのです。。

　わたしもかつてそうでした。

　実のところ わたしは会社を２回かえています。いずれも社内状況の変化、社内政治の方向性と自分のキャリアが合わないことが明白になったのが契機でした。現在も、社内政治に関しては真田パパな感じでやっています。1
View image on Twitter
View image on Twitter

攻城団🏯公式
@kojodanjp
 #真田丸 今週の予告で昌幸が「源三郎、源次郎、ワシはどこでまちがった？」となげいてましたが、武田家滅亡以降、これまでの放送で昌幸が決断してきた内容を振り返ってみましょう。あなたが昌幸ならどこからやり直しますか？

2,662
10:00 AM - May 8, 2016
3,638 people are talking about this
Twitter Ads info and privacy

　社内政治の件は、正直、真田パパ以上の解決策は見いだせないので、真田丸のビデオをみることをお勧めします。
　で、ここでは、社内政治による機能不全が小さい前提で、最初の３つのエンジニアリングマネージャ問題のあるあるについてお話とさせてください。

まずなにをするのかもやもや
　そもそも エンジニアリングマネージャーとは何をする人でどういった役割をもっているのでしょうか？

　わたしはエンジニアリングマネージャーの役割とは「エンジニアリングチームの価値をより大きくすること」だとおもっています。2

　では、エンジニアリングチーム（以下、単にチームと略）の価値は何で定まるのでしょうか？
　まず一つはいうまでもなく ソフトウェアやそれにかかわる設計情報ですね。テストプログラムに代表されるテストももちろん含まれると思います。これらは事業に直接結びつく資産となります。
　もう一つは、事業に結びつかないが観測可能なもの、チームメンバの行動だとおもいます。行動によってチームの習慣や開発体験が培われ、それがいわゆる組織の文化となっていきます。よい習慣や開発体験をもったチームはよいソフトウェアを生み出す可能性が高く価値の高いチームと言えます。
　これらが観測可能な output です。

　では、チームにoutputがあるとなると、チームへのinputはなんでしょうか？
　ひとつは、過去培ってきた資産、すなわち過去のソフトウェアやそれにかかわる設計情報が inputになります。その際、基盤となる開発環境やハードウェアもinputの一つですね。世の中で使われている資産、OSSも inputとなるとおもいます。
　もうひとつは、チームメンバ自体と、そのメンバがやってきた過去のチームの行動・体験です。よくエンジニアリングマネージャーの仕事の一つにメンバの採用があげられることがありますが、チームに優れたよいメンバを inputできればチームの価値は向上することが期待できるからです。またメンバが過去経験してきた開発体験も重要です。どんなにメンバが優秀でも事業にかかわる開発体験をしてこなければ一から学習していく必要があり、最初から高いoutputは期待できませんよね。

　最後に重要なのは、チームへのフィードバックだとおもいます。どんな outputが価値があるのか、どんな行動がよいのか・あるいはわるいのか、それに基づいて何が習慣化されるのか、エンジニアリングマネージャーは的確にフィードバックをおこない、チームとともに学習し成長していく必要があるとおもうのです。

　以上、これらを図にしてまとめると以下のようになります。
あぎゃ.jpg

　このように図解化することで、エンジニアリングマネージャの役割、すなわち、開発チームのシステムをマネージする際のポイントがみえてきます。
　たとえば、行動の機敏性をあげようとすれば、行動の input のバリエーションを増やすように働きかけたいところだし、行動を深化させるなら、フィードバックにある強化スイッチにて 深化の内容を最大化させるように働きかける必要がありますよね。
　また 真ん中にあたるところがエンジンリングチームとなりますが、この組織構造の初期値をどのようにおき、そして変化を促すアルゴリズムはどうしておくよいか。けっして正解がない活動であるけど、その検討が必要となります。

　で、以上のことを設計することが、エンジニアリングマネージャの一番重要な役割じゃないかと考えています。
　過去・現在のチームへの inputが変化せず、強化スイッチも場当たりなら、チームの習慣はつらいままで固着、つらい開発体験が習慣化し、チーム自体が悪い意味でのレガシー組織になります。
　逆に、チームをよりよくするため 適切なinputをあたえ、強化スイッチも適切なタイミングと最適なフィードバックを制御できれば、きっとよい意味での組織となりシステムとなるのです。
　このように、チームをよい組織・よいシステムとしていくのが、エンジニアリングマネージャのお仕事なのではないでしょうか。

相手が計算機ではなく人間
　エンジニアリングマネージャーつらいよ問題のうち、もう一つのつらい問題とは、相手が計算機ではなく、エンジニアリングチームつまり人間にかわることですね。
　数年取り組んできてやっと計算機のことソフトウェア言語のことがわかってきた。そんな中、今度は人間を相手にしないといけない。計算機の場合、必ず正解がある。期待通り動かなければプログラマ、つまり貴方（貴女）が直せばよい。ところが人間の場合、まず期待通り動かないこともままあることですし、直せといってもどこをどうするのかさっぱりわからない。そもそも直すようにうながすことはできても、実は直せるようなものですらないのかもしれません。
　ここら辺がジョブチェンジとか「ドラゴンクエストで例えると、戦士が僧侶に転職したようなものなのでLV1からのスタート」3と言われる所以なのでしょう。
　ジョブチェンジなら、本来ならプログラミング業務にかけてきた同様のトレーニングが必要となります。ところがどういうわけか ことマネージャーとなると 全くトレーニングなし・武器もなしの状態で実践につっこまれる。これでつらくないはずはありませんよね。

ここでトレーニングがない背景には、エンジニアリングマネージャーにとって取得しておく必要があるスキル、とくに人間の心理にかかわるスキルがまだ未熟で体系だっていないことにあると思っています。
　たとえば、心理学といえば、みなさん思い浮かべるのは フロイトやユングのような精神分析ではないでしょうか？
　実は、ここ数十年、心理学も様々な方向で研究され、人間の行動に着目したシステム思考のアプローチ、たとえば、

認知行動療法
家族療法
メンタライゼーション
といった手法が提案されています。筆者の理解では、テストにたとえると、精神分析がホワイトボックステスト、これらの行動に注目した手法はブラックボックステストに相当するもののようです。
　メンバの行動をよりよくするためには、まず これらの手法をとりいれるのがよさそうのですが、筆者の場合まだまだ勉強不足で体系だった位置づけをおこない理解・試すところまで至っていません(
誰か一緒に勉強しませんか？ (^^))

　ただ、かわんじ@学習の心理学本執筆中さんが、学習のための心理学について、すばらしいモーメントの形でまとめてくださっているので下記に示します。


福々亭ひろにゃんこ
@warumonogakari
 成長とアジャイル、ふりかえり、機械学習あたりに興味がある人は、きっとおもしろいと思う。 https://twitter.com/i/moments/1025263923988054016 …

31
8:47 AM - Nov 17, 2018
Twitter Ads info and privacy
Embedded image permalink
図解「効率的に学ぶための心理学」
 かわんじ@学習の心理学本執筆中 @kawanji01
勉強や日々の学習に役立つ心理学を図解しています。心理学的に根拠のある学習法を知りたい方はぜひ！

Moments
See 福々亭ひろにゃんこ's other Tweets
Twitter Ads info and privacy
　これらは、きっと新人などの育成に参考となるとおもいますので、ぜひ参照していただければとおもいます。

ずっとエンジニアでありたかったのに お気持ち
　以上、エンジニアリングチームを図解したものと、その中でのマネージャーの役割を説明し、相手が計算機からチームメンバという人間にかわることを説明してきました。

　いかがでしょうか？
　たしかに、機械を直接相手にする必要はなくなりますが、チームの価値を最大化するという課題にたいしエンジニアリングすること自体にかわりがないことに気づかれたかとおもいます。
　そうなんです、決してエンジニアを捨てることにならないのです。むしろ事業に直結する存在としてシステムをマネージする、そういうエンジニアだととらえればよいのです。

　しかも。
　機械学習をすこし勉強された方はお気づきになられたでしょう、エンジニアリングチームの学習と成長モデルは機械学習モデルそのものです。決して機械学習の知見をそのままもってくることはできませんが、考え方はもってくることができます。機械にかわって人間を構成要素に学習モデルを試しては壊す そんな実験ができるのです。

　これって、たのしくないですか？ (^^)

おわりに
　以上、エンジニアリングマネージャーになっちゃった人むけに、

エンジニアリングマネージャーつらいよ問題、頼まれた時点でのもやもや3点の洗い出し
それぞれに対してこんな方向性でやってみたら ええ感じになるんとちゃう？
別に、エンジニアを捨てることはないのだよ
というお話をしてきました。

　ところで。
　すこしだけ話がそらします。
　実は、わが家に娘のようにかわいがっている二匹の猫がいます。このうち、おねえさんは 普段から その大きなお目目でじっと観察し、ほんと実によいタイミングでパパである わたし、ママである妻を 動機づけ うまくうごかします。
Dt30d8sU8AAHe7e.jpg

　彼女の動きをみていると、マネージャーの仕事の1割は実験準備で7割は観察なんだなと つくづく思います。どうやったらパパママがスムーズに動くか実験し観察している。当然 ねこなので 一日の大半は寝ていて労働時間はすくないようにみえます。

　このように、マネージャーの時間の大半は実は観察にさくのが理想なんだろうとおもいます。

　だから、エンジニアの皆さん。
　マネージャーがひなたぼっこして うつらうつらしていても、実はああ観察に勤しんでいるだとおもって 生暖かく見守ってくれないでしょうか？

　以上、なにかしらの参考になれば幸いです。

　ではでは、よい開発体験を。

　次回は、紫苑(@grwth1009)さんです。コミュニティ運営でおきたことをなにか書いてくれるそうです。楽しみですね(^^)

謝辞
　このような楽しい Advent Calendarなる機会をつくってくれた ゆのんさん、daichi hirokiさんに感謝します。

自分が草刈正雄さんみたいな悪い顔したイケメンだとおもうと楽しいですが、現実はただの悪い顔したおっさんです。 ↩

たとえばエンジニアリングマネージャーという仕事について - kobakei's blogの記事参照。 ↩

@TAKAKING22さんの記事 意識低いエンジニアリングマネージャーを目指してやったことからの引用です。  ↩
コミュニティ運営に関わってきた中での失敗を振り返る。
calendar
manager
2018
♯Engineering
♯Advent
このエントリは Engineering Manager アドベントカレンダー vol.2 11日目の記事です。

はじめに
コミュニティ運営における問題は、イベントを企画する際などに、顕著に表れます。
それは俗に「音楽性の違い」と例えられることが多いのですが、なぜそういった問題が発生するのか。

また、どうすればこれらの問題を回避、または緩和することができたのかを考えます。

企画におけるコミュニティ内で起きる課題
この課題の原因として考えているのが、イベント運営とコミュニティ運営は性質の違いにあると考えます。

コミュニティ運営→納期がなく、時間をかけて価値を高めていくもの。

イベント運営→納期(イベント開催日)に会わせてできることの取捨選択を行った上で当日に価値を発揮させる必要があります。

コミュニティ運営とイベント運営では性質が異なると考えます。

・コミュニティはプロダクトの性質。
・イベントはプロジェクトとしての性質

全く別の性質を持っていると考えます。

性質を見極めた上で、意思決定・役割分担・スケジュールなどイベントを行う上での組織を別で立て付ける必要があります。

それを行わず、意思決定も曖昧で決まるものも決まらない炎上プロジェクトのようになります。

そうすると、一部のやり遂げようとする人がタスクを抱え込む形となり体裁上は成功したように見えるが、裏では禍根が残り、次回以降の開催を行おうとしても内部分裂の火種を残すことにもなります。

それは、コミュニティ運営にも悪い意味で影響することにもなりかねません。
その前に何が悪かったのかを振り返り次回に同じことを繰り返さないように対策をする必要があります。

それがなければ、「音楽性の違い」として内部分裂を産む種を内に孕み続けることになります。

コミュニティは有志によって行われる活動です。だからこそ知恵を絞り少ない負担ですむようにマネジメントをすることが必要なのではないでしょうか。

コミュニティ活動は色々な、日常生活ではできない貴重な体験ができる場です。ただコミュニティを作る・活動するだけでなく、長く活動を続けられる工夫も必要だと考えます。

最後に
私は、コミュニティ活動では失敗しかしていませんが、失敗をしたからこそ得られるものもあったと思います。

コミュニティ活動は参加するだけではなく、運営にも関わりマネジメントスキルを磨いていただけたらと思います。

拙い文章ですが、読んでいただきありがとうございました。

エンジニアリングマネジメントをしながら心がけていること
4

chobishiba

2018/12/12 06:59
この記事は、Engineering Manager vol.2 Advent Calendar 2018 12日目の記事です。

私は今エンジニア15人くらいの開発会社でコードを書いたりエンジニアリングマネジメントをしたりしています。
サービスの会社ではなく、お客様の開発をお手伝いする、受託開発をメイン業務にしている会社です（ただ仕様通りにコードを書くだけではなく、仕様を相談したりプロジェクトのすすめ方を含め一緒に考えてたり、エンジニアリングにまつわる様々な問題を一緒に解決する、お客様のエンジニアリングパートナーとして価値を届けることをしています）。

出発はプロジェクトマネジメントだったと思うのですが、プロジェクトを進めていく上でエンジニアのメンタリングや組織面の問題解決というのは切り離せなくて、そうこうしているうちに、自分が直接関わっているプロジェクト以外のことも見るようになって、いろいろな人の様子を見ていると評価にも関わるようになって、どうも自分がやっていることはプロジェクトマネジメントだけではないなと思っていたところに「エンジニアリングマネジメント」という言葉を聞いて、ようやく自分の立ち位置を理解したような気持ちでした。

まえがきが長くなりましたが、今日は日々エンジニアリングマネジメントとプロジェクトマネジメントが交わった仕事している中、心がけていることをいくつか紹介したいと思います。

話す
問題を一人で抱え込んでしまった、というのが後々大問題につながることはよくあるので話してもらえる関係づくりを心がけています。なんでもない話のできない相手に深刻な話はできないと思っているので、普段から休憩時間にちょっと声をかけたりしながら少しずつ話せる話題を増やしています。
また、週1のKPTを含んだふりかえりのときに、ほんの少し案件と直結しないプライベートなことを混ぜると、ちょっとした交流になります。最近興味を持っている分野の技術から体調まで様々な話が出るので、チームメンバーについて知ったり知ってもらったりするのにとてももいい時間だなと思っています。
一時期社員間のつながりが希薄に感じていた時期があったので、その時は月1回複数人集めて今自身がどんな仕事をしているか自分が考えていることを自分の言葉で語ってもらう会をしていました（もちろん業務時間内で）。私でなくていいから誰か困った時に話せる相手が見つかればいいなという狙いでやっていましたが、今はそういう会持たなくても雑談で最近どうよって話ができているようなので心配のない状態になりました。

聞く
聞いたほうがよいなという思うタイミングがあって、こちらから声をかけたり、相談を受けたり、そういう時は会議室で対面というよりも、ご飯を一緒に食べながら聞きます。自社の人だけでなく、ときに社外の人の話も聞きます。結論はこちらから出さず、言語化の手伝いや、心の整理、感情に適切な名前をつけていくサポートをするだけでも話し始める前と後で全然顔つきが変わってくる人もいます。そんな時はいつも、教職についている学生時代の先輩に「学校教育大変じゃないですか」と聞いたときに返ってきた「(生徒は)話し足りてないね。話を聞くだけで8割解決するよ」という言葉を思い出します。昨年からは1on1を始めてみました。今までやってきたこととはまた違った切り口で難しさを感じつつ、継続することで効果の出てくるものだと思っています。

結論を言う
仕事をする中で議論したあと、なんとなく合意を形成されてそうな時があります。そういうときこそ「では○○ということですすめていきましょう」と結論を言うようにしています。特にissueなどで非同期にやりとりしたあとは流れを全部読まないと最後どうなったことかわからないし、余計な思考のリソースが必要になってきます。自分の思い込みかも？といった不安を持つ人もいるし、その傾向は当事者でなくなるにつれて顕著になります。だから、結論=方針を伝えながら進むことは安心感に繋がると感じていて、ちょっとくどいかなと思う時もあるけどそこははっきりさせて進むようにしています。

セレクトメイドとオーダメイドで作る
チームや組織の数だけ「やりやすい」があるので、チームビルディングは毎回オーダーメイドだと思っています。
いろいろな手法を知っていればそれらを組み合わせられるので、知ってる手数は多い方がいいし、試したことがあるとなお強い。全部は適応できなくても一部使える、エッセンスは使える、意外なところで使える場合もあるから面白いです。あと断然ゼロから考えるよりも早いです。
だからよくやるのは知っている手法を組み合わせたセレトメイドでとにかくはじめ、走り出してからよりチームに合うように調整してオーダーメイドにしていくことです。アプリケーション作るときも、この要件を満たすためには何を使ったらいいか、自分が造形の深い言語やフレームワークは何か、最近の技術動向などいろいろ考えて組み立てるのと近い気がしています。

楽にならないか考える
開発は毎日続くものだから手間だとやってられません。面倒なことはどれだけ大事だってわかってても続かないですよね。だからこそうまく回るよう仕組みを整えていく中で、そもそも必要か、違うことで同じ結果を得られないか、仕組みもリファクタする必要があると思います。
ものによっては開発チームだけでなく他の人も関係するようなこともあるし、そういう場合はどちらかだけでなく、両方楽になる、関わる人それぞれにとっての「よい状態」を探すようにしています。
この時「自分」も楽になることを含めるのが大事だと思います。マネージャーだけ大変、マネージャーだけが知っているといった歪な形にしておくと、急に何かあったときもそうですが、休みくらいきままに取れないとストレス溜まります。よく疲れてしまったマネージャーの話を聞きますが、すり減らないように自分のこともいたわっておきたいです。踏ん張らないといけないときもありますしね。
楽できないか考えますが、考えることまで楽するとしっぺ返しを喰らいますね。一気に負債になる。

見直す
楽にならないか考えると近いのですが、プロジェクトは生き物で、組織も生き物で、絶えず変化をしています。その時々に適切な試みがあるので、一度仕組みを決めたから安泰とはなれないことが多いです。だから仕組みは大掛かりでない方が柔軟にその時々に即したものにしていけます。個人的にメンバーが変わったりメンバーの増減があった時が見直しタイミングだと感じています。

答えは内側にしかない
セレクトメイドの話と近いけれど、今自分の抱えているエンジニアリングマネジメントの問題を、本を読んだり誰かの話を聞いたりして知った方法そのまま適応することで解決、というのはまずできないです。自分の悩みと同じに思えたとしてもそれはその人、そのチーム、その会社の問題であり、その個別の問題に対する解決方法だったからです。いろいろな場に行ってしみじみ思ったのですが、私の会社自体が結構立ち位置特殊で（規模が小さい、サービスを持っていない、スタートアップでもない）自分とまったく同じようなケースにまず出会わないんですよね。それでも本を読んだり、経験を聞いて様々な方法を知っていると活かせる部分が出てくる部分があるので、インプットし続けたほうがいいと思っています（今回のAdvent Calendarほんとありがたいです）。
メソッドやメソッドの使い方を知っている方が速くコードが書けるのと近いかもしれません。

誰がやってもいい
マネジメントというのは開発のための役割の一つだと考えています。フロントを開発する人もいれば、バックエンドを開発する人もいて、マネジメントする人もいる。そんな役割の一つだと考えています。これは私がプロジェクトをやっていく上でエンジニアリングマネジメントも必要だろうなと思ってやりはじめたからかもしれません。しかし、マネジメントをするからって全部一人でやらないといけないわけではなく、手におえないことは他の人にお願いすればいいし、マネジメントを担っている人がコード書いてもいい。チームなんだからどれも全部一人でやらなくていい。むしろ一人でやってはいけないし、やれるわけないくらいに思うのがバランスが取れそうです。任せることは任せたらいいし、育てることも忘れてはいけない。必要以上に住み分けなくていいと思います。やらなくてもせめてお互いのことを知っているのは大事だと思います。開発現場のわかるマネージャーがいいという話もありますが、マネジメントがわかる現場というのもうまく回るんじゃないかなと感じています。

目指す先
言葉を選ばずに言うと自分が不要になるような状態かなと思っています。自分がいなくても「うまく」回る仕組みにするにはどうしたらいいか考えながら日々過ごしています（いなくてもどうにかなるものの、いるからスムーズな部分は多少あるんだと思っています）。エンジニアリングは何かを解決することで、マネジメントもその役割の一つである以上不要になる＝解決できたかなと考えています。また不要になれば次のことに取り組めるのでわくわくします。だから自分がいるから大丈夫ではなく、いなくても大丈夫を目指しています。NO属人化。

健康維持
役割上決断しないといけないことや、意見を述べないといけないシーンが多くなってくるので、これは体力が落ちている時は難しいものだと感じています。疲れていると伝えないといけないことを後回しにしたくなることも…。なので適度に運動して、睡眠をよく取ることを意識的にやっています。ストレスとの付き合い方も覚えました。

気楽にいく
肩の力が入りすぎると視野も狭くなって悪循環に陥っていきます。あと余裕のない人には相談もし辛い。表面上だけでなく内面も余裕を持てるようにしたいと心がけています。うまくいかなくても命まで取られることもないし、思い描いていた状態じゃなくてもいい状態というのは存在するし、予想と外れたとしても悲観しすぎない。最終的にいい状態（気持ちよく利益を生み出せる状態）になればいい。そんな風に思っていたほうが道は開けていくと信じています。何事もなく平穏無事に過ぎていってほしいのだけど、何かしら起きるし、起きないとそれは起きないのじゃなくて見落としているだけだと思います。最初から何か起きるものと思っていたほうがよっぽど気楽です。
一生懸命になるとつい忘れてしまうので「気楽にいく」最後にこれを書いて締めたいと思います。
アジャイル / スクラム / チーム開発の［不吉な匂い］まとめ
アジャイル
ポエム
チーム開発
スクラム
チームビルディング
アジャイル / スクラム / チーム開発の［不吉な匂い］まとめ

まずはポエム
やることを考えて自力で実現できるスキルがあれば良い。何か一芸に秀でていればやり方を決めたりはそこそこ好き勝手できるし、自分のやったことに満足したら自分だけは気持ちよく帰れる。って思ってた。

時間外に月何十時間あるいは百数時間コーディングしたり、先輩に昼夜問わずコードを送りつけて見てもらったり、中途採用者のために用意してある受入課題を一人で何回もやり直したりと、あほみたいなことをやっていた。
事実それで設計とコーディング作業の生産性は数倍、数十倍になってきた。

けど、どうもイケてるってのはそれだけじゃあないらしい。ある時期急にそう思った。（遅い）

話してみると、（少なくとも僕の先輩たちのいくらかは）イケてる集団を作れる奴がイケてる奴って考え方らしい。（曲解拡大解釈誇大表現含む）

はじめに
せっかく Engineering Manager vol.2 Advent Calendar 2018 の枠があったので、［1 年前にチームでコーダをやってたとき］〜［急にスクラムマスターをやることにしてうろちょろしていた半年くらい］の間に貯めた悩みや考えをまとめて晒すことにした。

正解ではなくて現時点での自分の考えって感じだけど、どこかのだれかに似たことや活かせる点があったら良いなと思って晒してみる。

人や進捗にダメージを与えながら試行錯誤させてもらったし、ちょっとはアウトもしないと、ってのもある。

前提
ある程度の内製をしていて、アジャイルやたとえばスクラムをしていたりする
考えのとっかかりの箇条書きとしたいので、行間は多めだし詳細な話はかなり削った
（〜〜の様な状況であれば、）とか（ただし〜〜だと違うけど、）みたいなうっおとしい予防線は張らない
参考
気になり出してから「そういえばスクラムずっとやってるけどちゃんと学んでねーぞ」って思って（遅い）、 1 - 2 月で読み漁った本（読んだ順番は忘れた）

スモール・リーダーシップ	アジャイルサムライ	scrum boot camp	アジャイル開発とスクラム	カイゼン・ジャーニー	これだけ！KPT	スクラム現場ガイド	リファクタリング

ざっと読んで気になったところだけ控えて、しばらくしたらメモを見返すという形でやった。
このまとめでそのメモの整理とかもして一息つけたので、また読み返したり別の気になってるのを読んだりできる。

分類とマーク
箇条書きは段落で適当に分類して、以下のどれかのマークを適当につけてみた。深く厳密に分類したりはしてない。全てはふいんき。

:interrobang: 原因 / 予兆 / 気づきのヒント
:no_entry_sign: やめた方が良いこと
:bomb: 発生する問題
:bulb: 考え方 / アプローチ
:white_check_mark: 理想の状態（直接の対処方法ではなくて、普段の状態）

qiita の作ってくれる右サイドの見出し一覧を見て、気になったところがあったらそこだけでも役に立てば良いな。

それじゃあ、あとはツラツラと。

デイリースクラム
朝会で「座ってやろうぜ」ってなる
:interrobang: 長すぎるのかも？
:interrobang: 状況確認だけじゃあなくて、課題解決まで話しているのかも？
:bomb: だらけやすい
:bomb: 別の作業がしやすくなっちゃう
:bulb: 朝会の［目的］とか［チートシート］とかを見直す
:bulb: 課題の［整理］と［解決］は分ける
:white_check_mark: 長くても 15 分くらいが良い
:white_check_mark: 立ってやる

朝会で「あ、かんばんにはないんですけど、〜〜」ってなる
:interrobang: 今必要ないことをやっているかも？
:interrobang: プランニングが間違っているかも？
:bulb: ［やること］と［やらないこと］をちゃんと整理する
:bulb: かんばんを更新するタイミングをちゃんと作る
:white_check_mark: みんなで見ながらかんばんを更新している

バーンダウンチャートを見るときに「完了はしてないけど半分くらい終わってるので、実質は理想線です」ってなる
:interrobang: タスクが大きいかも
:interrobang: 進行中の作業が多いかも
:no_entry_sign: 集まってみんなで嘘みてもしょうがない
:bomb: まず間違いなく、最終日に全部しっかり完了なんてしない
:bulb: タスクは小さくする
:bulb: 並行作業数に上限を設ける
:white_check_mark: 実態とバーンダウンチャートが一致している

朝会であんまりかんばんやバーンダウンチャートを見ていない
:interrobang: 見てもあんまり意味がないと思っているのかも？
:interrobang: 慢性的にバーンダウンしてないのかも？
:bulb: 「実質は理想線です」問題があれば解決する
:white_check_mark: 頻繁に更新されているし、必要な情報がまとめられている
:white_check_mark: 日々予定通りにバーンダウンをさせていて、さらにそれを続けたいと思っている

朝会を毎日同じ時間にしていない
:interrobang: 朝会をしなくても困っていないのかも？
:bulb: 朝会でやるって決めたことを 1 日でやりきるサイクルを作る
:bulb: 揃ったらやるってやり方はやめる
:white_check_mark: 朝会の時間は決まっている
:white_check_mark: 朝会をみんなが必要だと思っている

アジャイル
「アジャイルなんだからさっさと終わらせて次いこうぜ」ってなる
:interrobang: ざっと引いた線表に合わせているだけかも？
:interrobang: やっていることに完了条件がないかも？
:bomb: まず間違いなく、後工程でうまくいかなくなる
:bulb: ちゃんと終わらせないと次の仮説検証にうまく繋がらない
:white_check_mark: ［やること］と［完了条件］は決めておく
:white_check_mark: 何を［仮説］として何を［検証］するのかははっきり決めておく

「アジャイルなんだからドキュメント書かなくて良いよね」ってなる
:interrobang: 「コードがドキュメント」をさぼる口実にしているかも？
:interrobang: ［事実］と［決定］と［過程］と［背景］をわけて考えていないのかも？
:bomb: 議論は多いし頻繁に方針転換をするので、むしろ議事録はしっかり残さないとあとですごい困る
:bulb: ［完全なドキュメント］よりも［動くソフトウェア］を相対的に大事にしているだけ
:bulb: ［残すべきドキュメント］と［揮発させて良いドキュメント］に分けて考えてみる
:white_check_mark: 議事録がすぐ確認できて、必要な情報もまとまっている
:white_check_mark: ［プログラムのなぜ］の部分と［システムの使い方］は開発と一緒に整えられる

リファクタリング
「テストはリファクタリングとしてあとで書きます」ってなる
:interrobang: リファクタリングって言うと免罪符になる空気になってるかも？
:interrobang: リファクタリングは［正しく動くコード］を［より良いコード］にする作業だって認識がずれているかも？
:no_entry_sign: テストを書くことをリファクタリングと言わない
:bulb: テストがないと［正しく動くコード］か判断できない
:white_check_mark: テストを書くなら実装と別の作業にしない

「コーナーケースの対応はリファクタリングとしてあとでやります」ってなる
:interrobang: 処理結果が変わるなら、そもそもリファクタリングではない
:no_entry_sign: これは［バグ対応］とか［仕様の勘違い］とかなので、リファクタリングとは言わない
:bomb: 頻発していると「なんかいつもうまくいかないな」って空気になってくる
:bomb: なんでも「あとでリファクタリングで」って言ってると、リファクタリングが「あとでやる」以上の意味を持たなくなる
:bulb: どこまで加味してプランニングしていたのか、みんなで認識を合わせる
:white_check_mark: 頻発するなら前工程のどこかがおかしいので、分析してみる

見積もり
スプリント終了時に「そのタスクは終わらなかったので 3 sp じゃあなくて 5 sp だったってことですね」ってなる
:interrobang: sp をかかった時間だと思ってるかも？
:bomb: 頻発していると「なんかいつもうまくいかないな」ってなる
:bulb: sp は［工数］じゃあなくて［やることの相対的な大きさ］
:bulb: 思ったより［時間がかかった］のか思ったより［やることがあった］のかをちゃんと分析する
:white_check_mark: 時間を見誤ったなら、ベロシティをあげるアプローチを考える
:white_check_mark: 内容を見誤ったなら、［要件分析］や［完了条件］を見直す

中期計画時にリファクタリングを計上していない
:interrobang: 任意の作業だって思っているのかも？
:interrobang: リファクタリングって言って予定を確保するのに抵抗があるのかも？
:bulb: リファクタリングは絶対に必要
:bulb: リファクタリング込みで見積もるようにする
:white_check_mark: ［バッファ］とは別に［リファクタリング］の時間を確保する
:white_check_mark: 終盤にまとめてではなく、定期的にリファクタリングが行われる

時期半ばで「進捗がヤバいから休日出勤でカバーしよう」ってなる
:interrobang: ［どうして］ヤバくなったのかわかってないかも？
:interrobang: ［どれくらい］ヤバいかわかってないかも？
:no_entry_sign: 大抵の場合、むやみに稼働をあげても解決しない
:bomb: 多分すぐこうなるチームは毎回こうなってる
:bulb: 遅れは［着手］と［進捗］と［終了］にわけて考える
:bulb: ［どれくらい遅れているか］と［どうして遅れているか］を考える
:white_check_mark: 一度止まって、一息ついてから落ち着いて考える
:white_check_mark: ヤバくなった要因をまず排除する

スプリントのベロシティに対して各タスクが大きい
:interrobang: 4 人で 1 週間に 20 sp の予定なのに、タスクが 3 sp とか 5 sp とかばかり
:interrobang: 単純計算だと 1 日に 1 人で 1 sp なので、3 sp のタスクは 1 日では終わらない
:bomb: 1 日で終わらないタスクがあると、次の朝会で「実質は理想線です」ってなりやすい
:bomb: 見積もりミスで 2 sp が 3 sp になった時のインパクトが大きい
:bulb: タスクを小さくする
:bulb: ベロシティを大きくする
:white_check_mark: 1 日に 2 - 3 タスクが完了するくらいが良い

ふりかえり（例えば Keep, Problem, Try 方式）
「ふりかえりの時間だからやるよー、はい K と P 出してー」って感じで始まってる
:interrobang: ふりかえりにテーマがないかも？
:interrobang: スプリントで何をやろうとしていたかが、はっきりしていないかも？
:no_entry_sign: バーンダウンしてないなら、別の話をしていないでまずちゃんと終わるように改善する
:bulb: 何についてふりかえるかはちゃんと考える
:bulb: KPT 以外の適切なふりかえりがないか考えてみる
:white_check_mark: ふりかえりのテーマがあって、［なんでうまく行ったか］や［なんでうまく行かなかったか］という視点でふりかえる
:white_check_mark: 慣れていなければ仮説や検証なんて難しく考えず、「これをやるぞ！」「さてどうだった？」というサイクルから作る

「この T はやったのでおしまい」ってなってる
:interrobang: T をやることが目的になってるかも？
:interrobang: T に完了条件がないのかも？
:bulb: T をやったことで P が改善されたかをちゃんと考える
:white_check_mark: T のアサインと期限と完了条件をちゃんと決めている
:white_check_mark: 過去の P と T や改善の成果を残しておく

課題分析で「別部署が悪い」とか「割り込みが多い」とかになって「どうしよーもねーし...」ってのが多い
:interrobang: 自分たちの成果に責任を感じていないのかも？
:interrobang: 事実までしか分析していないのかも？
:bulb: 自分たちにできることは本当に何もなかったのか考える
:bulb: どうしてその状況が発生するのか、背景を考える
:white_check_mark: 一挙に完全に解消できなくても、改善されるならまずはそこからみんなでやってみる
:white_check_mark: その状況が再発しない（改善される）行動をみんなで考える

コードレビュー（例えば Pull Request 方式）
「何をレビューしたら良いかわからねーっす」ってなる
:interrobang: ［何を参考］に［どう］レビューすれば良いかわからないのかも？
:interrobang: 何のための PR なのかわからないのかも？
:bulb: ［クラス設計］、［入出力設計］、［エラー設計］、［言語仕様］、［システム知識］、［仕様］とかでレビュー観点を整理してみる
:bulb: ［コンパイルエラー］や［コンフリクト］、［フォーマット］や［リント］などの人間が見なくても良い部分は自動化する
:white_check_mark: ［目的］や［レビューポイント］をちゃんと整える
:white_check_mark: ［レビュー観点］と［レビューのしかた］がまとまっている

B さんのレビューで「これ前に A さんにも言ったんだけど、〜〜」ってのが多い
:interrobang: ［レビューする人］対［レビューされる人］みたいな構図になっちゃってるかも？
:interrobang: 実装した人以外は関係ないみたいな空気になっちゃってるかも？
:bulb: レビュー［する］のも［される］のも、みんなでやっているという空気にする
:bulb: モブプログラミングとかをやってみる
:white_check_mark: 同じ指摘が減り、チームが成長していく
:white_check_mark: A さんが B さんに指摘できたり、B さんが A さんのやりとりを見て自分で気づいたりする

バグ対応
「出たぞー！直せ！直った！おしまい！」って感じで、分析をしていない
:interrobang: どの工程で検出するべきバグなのか分析していないかも？
:interrobang: 自動テストが役に立っていないかも？
:bomb: 分析をしないと頻発する
:bomb: 頻発すると分析をする時間がなくなる
:bulb: 前工程のどこかに問題があるかもしれない
:bulb: ［ぬるぽは自動テスト］、［機能バグはシナリオテスト］みたいに、［何］を［いつ］検出するかを考えておく
:white_check_mark: 期待したバグが期待した工程で発生している
:white_check_mark: 前工程にフィードバックできている

働き方
「とりあえず開催ね」って感じで会議をしている
:interrobang: ［アジェンダ］や［目的］がないのかも？
:interrobang: そもそも会議が必要だって思っていないのかも？
:bulb: 不要ならきっぱりやめる、必要なら有効に使う
:bulb: 決定に自分が関わってるという実感と関係をみんなが作る
:white_check_mark: ［アジェンダ］と［決めること］が事前に周知してあり、必要なら［準備］も促す
:white_check_mark: 簡易で良いので決まったことはまとめて、残す

デイリースクラムや会議中に pc を触ってる人がいっぱいいる
:interrobang: 作業と会議の優先順位が決まっていないのかも？
:interrobang: 全員で決めている感じがないのかも？
:no_entry_sign: デイリースクラムくらいなら pc を持ってこない
:bulb: 聞いてないなら出ない、聞いてるなら対話する
:white_check_mark: ［アジェンダ］と［目的］を整理して、みんなでやるべきことをやる

朝会で「やる」って宣言したことが、何時に終わるか考えてない
:interrobang: 1 日の予定を立てていないのかも？
:interrobang: 18 時か 22 時かわからないけど、逆算で「今日中」って言っているだけかも？
:bomb: 1 日の見積もり精度が悪いのに 1 週間の見積もりができてるわけがない
:bulb: 1 日の過ごし方を見える化してみる
:bulb: ポモドーロタイマーとかを使ってみる
:white_check_mark: 何時までに終わらせるつもりかも宣言する
:white_check_mark: ［決まった時間に朝会］をして、宣言通り［狙った時間に終わらせて帰る］

「なぜ？」が詰問になっている
:interrobang: 一緒に考える感じがないのかも？
:interrobang: なんでもかんでもとりあえず「なぜ？」って言ってるのかも？
:no_entry_sign: 「なぜ〜〜をやらなかったんだ」って言われると答えに窮しやすい
:bomb: これが辛いと隠蔽したくなってしまう
:bulb: 「どうしたら〜〜をやれなかったんだろう？」って一緒に考える空気にする
:bulb: ［事実］ではなく［背景］にフォーカスする
:white_check_mark: 「なぜ？」は考えを引き出したり、内省を促すために使う
:white_check_mark: 失敗を［責める］のではなく［繰り返さない］という風に考える

何をやっても「どうせ否定される」って感じがある
:interrobang: 成果だけしか評価の対象になってないのかも？
:interrobang: 足りないという事実だけしか話していないのかも？
:no_entry_sign: 第一声で否定しない
:bulb: 足りないことがどうすれば埋まるのかを一緒に考える
:bulb: ［行動］と［評価］は別で評価する
:white_check_mark: ［行動は続くように］、［成果は大きくなるように］する

慢性的に残業をしている
:interrobang: 稼働の上げ方が下手かも？
:interrobang: 寝坊したり、日中に意識が飛んだりしているかも？
:bomb: 帰る時間を決めていないと、1 日をちゃんと終わらせるサイクルができない
:bulb: ［緊急時や割り込み］による残業と、単純な［進捗リカバリ］の残業はわけて考える
:bulb: 残業によって本当に状況が挽回されているかを考える
:white_check_mark: 残業しないつもりで計画して、慢性的な残業をしない

あいさつや労いがない
:interrobang: まず自分がしてないのかも？
:interrobang: 効果を軽視しているのかも？
:bomb: 労わないと、労ってもらえない
:bulb: 誰にでもできるしすごい効果があるので、まず自分からやり始める
:bulb: 言いづらいならサンクスボードとかを使ってみる
:white_check_mark: 相互に良い空気を出せている
:white_check_mark: みんながやってくれていることによく気づき、良い関係が循環している

おわりに
今見返すと「やべぇこれできてない」「あ、これ忘れてた」「これは当然だな、よし腹落ちしてる」ってのいずれもあって面白かった
タスク消化に必死だったり普段気にしている事が違ったりするから、スクラムマスターをやらないと気づけないことがいっぱいあった様に思う
コーディングしたい
気になり出してからは、まわりの人の何気ない発言で「確かに！」「と、言うことは...！」って学びがあった
スクラムって「自由！楽しい！」みたいなイメージあるけど、実際は「自分たちで決めないと！その分責任もある！」って感じで相当の覚悟が要る
コーディングしたい
アジャイル勢もウォーターフォール勢も互いに訝しんだり敵視したりしてないで、良いところはどんどん反映したら良いのに
コーディングしたい
一昨日から珍しく風邪をひいていて、間に合わないかと思った。
こんなスケジュール管理とかの話をしておいて間に合わなかったらアホすぎる。

一番大事なのは［体調］ってことだったな。おしまい。


エンジニアリングマネージャーがエンジニアのキャリアに責任を持つためのスタンス
11

Shintaro Kaneko

2018/12/14 23:22
この記事は Engineering Manager vol.2 Advent Calendar 2018 14日目の記事です。

はじめに
こんにちは、こんばんは。恋愛・婚活マッチングサービスのPairsを運営している株式会社エウレカでCTOをしている @kaneshinです。
エウレカのエンジニアトップとして、Pairsの事業戦略を踏まえてプロダクトがビジネスで結果を出し続けるための技術面や蓄積されているデータをどのように活用していくかの長期的な視点と広い視野で戦略を考えています。

日本のスタートアップではCTOがVP of Engineering（以後、VPoE）のような、エンジニア組織の組成やマネジメントを職責として持っている人は多いです。私もそのように幅広くCTOとVPoEの職責を持っていますが、会社のカルチャーをより良いものにしていくためにやれることは尽くしていきたいです。

Defining roles: CTO and/or VP Engineering – Engineering Leadership – Medium
When technical titles get overloaded
medium.com
VPoE不在で夜も眠れない問題？
昨今、日本のスタートアップでも会社のサイズがエンジニア以外も含めて３０人ほどの規模でもCTOとVPoEの二頭体制も珍しくなくなってきた印象があります。このように早いサイズのときから二頭体制で権限も明確になっていれば、非常に良いと思います。ただ、それが難しいのも現実問題として存在しています。

だからといって悲観的に捉えず、より強固な組織をまずはひとりで作り上げるということも重要です。

自論ですが、会社に在籍する全エンジニアが６０人までなら、CTO、もしくはVPoE単体であってもエンジニアリングマネージャーと連携を取れば回せると思います。しかし、これを超えてくると物理的に不可能だなと感じています。

不在だと何が問題なのか？
端的に言ってしまえば、技術戦略とエンジニア組織戦略（マネジメント）のトレードオフとなる事象が発生したときの意思決定が鈍ることです。今後の技術戦略を考え続けることは非常に重要です。しかし、それを執行するためには必ずエンジニア組織のことを考えなければならないということは、本来できたであろう技術戦略を策定できな可能性を秘めています。

眠るために、自身のキャリア／マネジメントのスタンスを知る
不在であるからトレードオフの中で「事業に振るべきか」、「人に振るべきか」というのを、自身の中である程度の道筋を立てておくことが大事です。ただし、その中で重要なことはマネジメントには正解がないことです。十人十色、人にはそれぞれ違った価値観があり正解なんてありません。それを踏まえて、自分が正しいと思ったことを相手の価値観を尊重して伝えることです。

さて、本題になります。今回は、マネジメントをする中で参考になるような法則やスタンスをご紹介します。

注：本記事は個人の見解であり、所属する組織の公式見解ではありません

ダニング＝クルーガー効果


エンジニアに顕著に見られる自信と知識を踏まえた学習段階には
　・(C++) 完全に理解した💪（SDKで開発できる）
　・(C++) わからない😖（SDKを熟知した）
　・(C++) ちょっとできる😣（SDKを開発できる）
のような理解曲線があるのは知られたことだと思います。こちら、実はしっかりとした名前が存在しています。

ダニング＝クルーガー効果 - Wikipedia
ja.wikipedia.org
少しでも開発ができるようになると、アプリをひとつ作るのも容易になってきます。そうなってくると自分ひとりで開発ができるので、もう学ぶことがないと思うようになってしまいます。無論、それでいい人もいますが、これからのエンジニアキャリアを進む上で、RASISのようなコンピュータシステムの指標を求められることや、それこそ品質上での非機能要件を求めるためにSDKやフレームワークの内部を知らなければならない場面が出てきます。

最初からそれを学ぶことも時間対効果を踏まえるといいものとは思えませんが、いつかは必ずぶち当たる壁になるはずです。そのときまでに必要な勉強や周辺領域の知識を深めておくなどのティーチングを行うべきです。

RASIS
　・Reliability（信頼性）
　・Availability（可用性）
　・Serviceability（保守性）
　・Integrity（保全性）
　・Security（機密性）

１万時間の訓練
1万時間の訓練 | プログラマが知るべき97のこと
xn--97-273ae6a4irb6e2hsoiozc2g4b8082p.com
先ほど、の学習曲線の中で「完全に理解した」から「ちょっとわかる」というところになるまでに、ひたすらコードを書き続けることも重要です。ときには車輪の再発明を恐れずに写経も兼ねて質の高いコードを模倣することで相手の思考やスキルを奪い取ること。また、寝食を忘れるくらいコードを書くことが好きなエンジニアは多いと思います。そのような人をどのようにサポートしていくかもエンジニアリングマネージャーのひとつの仕事だと思います。

開発エコシステム整備され過ぎ問題



さて、１万時間を費やすにあたって、昨今は初期開発のエコシステムが整備されていることがメリットを多く享受するも、デメリットも発生していると感じます。ただ、デメリットの中には初学者にはまだまだ必要のないトラブルシューティングの解決から学べる周辺知識もありますが、GitHubを活用することで多くの知識を手に入れることができます。それこそ、READMEをしっかりと作り込むのは当たり前で、ソースコードをチェックアウトしてきたら即時に使えることも当たり前要件として存在します。

柱となるスキルを深くするために、知識を広くする
広い知識を手に入れることができるGitHubには感謝しかありません。しかし、初学者の人は深くスキルを身につける前に違うことへ興味が移ってしまうデメリットが生じている可能性もあります。

自身の柱となるスキルを深くするために、知識を拡げていくことには賛成します。しかし、知識を拡げたいために、さまざまな技術領域に触れることは、自身のキャリアに対して集中と選択ができていません。それを止めてあげるのもエンジニアリングマネージャーの仕事のひとつです。

ティーチングとコーチング
それでは、毎回の1on1や定期面談において指摘をし続けたら、相手は常にあなたの回答を待ち続けてしまいます。これでは、相手のキャリアをあなた自身がないがしろにしてしまう可能性があるので、タイミングを見計らって相手に思考を促すこともしなければなりません。

そのスタンスを持つために、ティーチングとコーチングを切り替えて接していくことをオススメします。

ティーチングとは、何かを実施するにあたり習得すべきスキルや知識を教えてあげることです。勉強会を開催して、自分が持っている知識を伝えていくこともこれに当たります。
では、コーチングとは、何かを実施するにあたり、どのようにやるべきなのかといったプロセスに対して質問をしてあげることにより、相手に気づかせることです。

思考力とは、まず「認識すること」からはじまり、次に「気づくこと」で徐々に意識が変わってきます。そして、気づいてから「行動に起こすこと」で自身の思考力が向上していきます。

今回、お伝えしているマネジメントのスタンスも同じで、まずは知ること。知った後に気づいて行動に起こすこと。これらを忘れずにいることがエンジニアリングマネージャーにとって重要なスタンスになります。

おわりに
途中でもお伝えしましたが、マネジメントには正解がありません。ここで紹介したことはほんの一握りのスタンスと捉えて参考程度に留めてください。このようなことを相手の価値観を考えずに伝えることは、価値観の押し付けでしかありません。

しかし、本当に相手のことを常に考え続け、いまこそ伝えるべきだと思ったときが来たときは自分の言葉＝本心で伝えていきましょう。

ボロボロのチームを立て直したエンジニアリングマネージャーのお話
エンジニアリングマネジメント 心理的安全性 チームマネジメント ピープルマネジメント
久津（@Nunerm）です。リクルートでPM/EMをやってます。



この記事はEngineering Manager vol.2 Advent Calendar 2018の15日目の記事です。



普段このブログではプロダクトマネージャーに関する記事を書いていますが、エンジニアリングマネージャーも担っているので、この記事ではEM人格で語ります。





さて、エンジニアリングマネジメントにまつわるエピソードには様々なものがあります。ゼロからチームを作り上げた話、初めてEMになって試行錯誤した話、新しいやり方を装着しようとして失敗した話などなど…



今回は私は「ボロボロのチームを立て直した話」を書きます。このシチュエーションと似た経験をされた方がどれくらいいるのかわからないですが、何かしらヒントを得ていただけたら幸いです。



※なおこの話はリクルートの話ではありません。とある別の企業での話ですのあしからず。



序章：ボロボロのチームにジョイン
第一章：外部環境を整える
1-1.改革の宣言・ブランディング
1-2.意思決定プロセスの整備
1-3.技術的負債の可視化と解消によるメリットの説明
第二章：内部環境を整える
2-1.メンバーへの信頼を示す
2-2.チームビジョンの再定義
2-3.多様な内発的動機と向き合ってくすぐる
2-4.心理的安全性の担保
第三章：自ら成長できるチームへの変貌
3-1.チームのカオスエンジニアリング
3-2.階段を刻み、踊り場で遊ばせる
終章：１年後…




序章：ボロボロのチームにジョイン
とある事情で「チームとして機能していないスマホアプリ開発チーム」の立て直しをすることになりました。まずはどれくらいボロボロだったのかを説明します。



客観的事実を列挙します。

バグ・障害の発生頻度が多すぎる
テストフェーズで機能不備が多発しリリース延期が続出
仕様がブラックボックスすぎる
iOSとAndroidの意図しない機能差が多い
エンジニア間のコミュニケーションが皆無
エンジニア間のスキル差が大きすぎて権威勾配が大きい
エンジニアがすぐ辞めてしまうのでナレッジが貯まらない
特に１つ目が深刻で、バグFIXのためのリリースを１つすると、新しいバグが２つ増えていつまでたっても障害対応から逃げられないような状況でした。にも関わらず次から次へと企画部門から開発案件が降って来て、それを無理やり対応するからまたバグが混入する…といった負のスパイラルが発生していました。それを繰り返していたためエンジニアのモチベーションもどん底状態でした。まさにボロボロです。





とにかく問題点が多すぎて「どこから手をつければいいんだ…？」と途方に暮れながらも１〜２ヶ月とりあえずもがいてみました。すると少しずつボロボロになってしまった原因と打ち手が見つかってきました。



そして１年以上にも渡る「立て直しプロジェクト」の幕が開いたのです…！





第一章：外部環境を整える
1-1.改革の宣言・ブランディング
まず外部環境の整備から始めました。外部環境というのは、開発チームのステークホルダーである営業部門や企画部門、コーポレート部門などの組織との関係性です。



チーム改革の実行中は周りにそれなりに迷惑をかけます。ただでさえバグ対応で手一杯で依頼された案件をまともに受けられていなかったのに、今まで以上に案件を受けられなくなります。よって事前にそのことを伝える必要があります。「改革に伴いご迷惑をおかけするかもしれませんがご協力くださいm(_ _)m」的な。



またその際に同時に「どういう開発チームを目指すのか」を言語化してブランディングしました。

自分の場合は「継続的進化をするチーム」という目標を掲げました。要はステークホルダーの方々に「今後はどんどんアプリもチームも良くなって案件をたくさん受けられます」と、改革による直接的なメリットを訴えて協力を仰ぎました。



1-2.意思決定プロセスの整備
開発チームがボロボロだったのは紛れもない事実ですが、同時に組織全体の案件や戦略の意思決定プロセスにも大きな問題がありました。



開発チームに案件依頼として降りてきても、途中で何度も仕様変更が発生したりリリース直前で急遽延期になったりしていました。それが市場変化にスピーディに対応するような「ポジティブな仕様変更」であればよいのですが、ただの検討漏れだったり調整不足に起因する「ネガティブな仕様変更」だったため、エンジニアのモチベーションを大きく下げる一要因となっていました。



これではせっかく開発チームの改革を行っても決して良い開発はできません。なのでこちらにもテコ入れし、開発チームに依頼が来る前の企画部門の意思決定プロセスの可視化とシンプル化を行うことで、無駄な仕様変更や方針変更を最小限にすることができました。



詳細は長くなるので割愛しますが、別記事でまとめているのでよろしければご参照ください。


productmanager55.hatenablog.com



1-3.技術的負債の可視化と解消によるメリットの説明
バグ地獄から抜けられない最大の原因が「技術的負債の肥大化＋ブラックボックス化」でした。ソースコードが汚すぎる上に誰も作りや仕様を把握していないので、何をするにも調査から始めないといけません。これが丸１日かかったり、調査が不十分で結局また新たなバグを埋め込んでしまって再びバグ地獄に突き落とされたり…ここに関しては1~2ヶ月もがいてみても光明が差す気配が感じられませんでした。



これはリファクタリングというレベルではどうしようもなさそうなので、フルリニューアルすることを決めました。

となると、より一層長い期間新しい案件は受けられなくなります。営業がせっかく受注を取ってきても企画部門が新しい戦略を立ててもアプリでは何もできない。これはビジネスにとっては一大事です。



なので「技術的負債の可視化と解消によるメリットの説明」を丁寧に行いました。



可視化といっても、コードの品質を計測するツールを使って数値化したりはしていません。度重なる障害のおかげで品質が悪いことは全員わかっていたので、ここの可視化にはそれほどパワーをかけずにすみました。過去の障害の原因を深掘りして、技術的負債が起因しているものを列挙したぐらいです。



メリットの説明は、中長期的に見てこのタイミングでのリニューアルが後の事業成長の最大化につながることを訴えました。つまり「大きくジャンプする前にはしゃがみ込みが必要なんだ」ということです。これはただのハッタリではなく、その時点で既に大きなプロジェクトの予定が決まっており、それを迎える前にリニューアルしない限りそのプロジェクトが失敗する確信がありました。 なので熱量を持って説明することができ、おかげで周りを納得させることができました。





これらの「外部環境の整備」を事前にやっておくことで、改革に集中することができ、かつ周りの協力を得ることも可能になりました。





第二章：内部環境を整える
2-1.メンバーへの信頼を示す
兎にも角にもエンジニアのモチベーションを上げることを最優先としました。モチベーションが低い状態では改革は進まないと思ったためです。



私の前任マネージャーが強権政治・マイクロマネジメント・エンジニアに意思決定をさせないタイプのマネージメントを行なっていました。実装方法までエンジニアに指示をして、気に入らない書き方だと叱責をするようなタイプでした。

それによってエンジニアが萎縮してしまっていたため「エンジニアに意思決定をさせる」ことを目指しました。「組織に使われている」という意識から「自分で決めている」という意識へのシフトチェンジです。

そのためにマネージャーである私からメンバーへの「信頼」を示し、メンバーの意思決定を尊重する姿勢を全面に出しました。



信頼を示すために実施したことは２つ。

具体的に信頼していることを相手に伝える
メンバーの仕事に極力口を出さない
信頼は形として見えないものです。いくら内心で信頼していたってそれが相手に伝わるとは限りません。逆に「信頼してるよ〜」と調子いい感じで伝えるだけだと、口だけであることが必ずバレます。

なので各メンバーの仕事のうち、具体的に「何を信頼しているのか」と「何には期待していないか」を伝えました。例えば「○○さんはドキュメント作成は苦手だから期待しないけど、コーディングは信頼しているよ」みたいな感じです。もちろん自尊心を傷つけない範囲でです。



信頼していると宣言した後に、その仕事に対して細かくチェックしていたら言行不一致になってしまいます。よってその仕事には極力口を出しません。元々私もエンジニアなので、ソースコードレビューとかしたいタイプなんですが我慢しました。もちろん質問や不安ごとの相談には乗りますが、こちらから細かいチェックや小言は言いません。

それによって最初は問題も起こります。メンバー個人のスキルへの依存度が高くなるため、凡ミスによる障害も多々発生しました。ただこれも「産みの苦しみ」として耐えました。これには時間と勇気と我慢が必要です。



2-2.チームビジョンの再定義
1-1.で行なったブランディングをチーム内部に向けても行いました。

「継続的進化をするチーム」を目指すこと、逆に推奨されないこと、そのチームになるためのアイディアをいつでも受け付けることなどをキックオフで高らかに宣言しました。



2-3.多様な内発的動機と向き合ってくすぐる
1on1を繰り返して、各メンバーの内発的動機を確認しました。

内発的動機とは、給料や地位などではなく、自主性ややりがい、成長などを仕事の動機にすることを言います。



ダニエル・ピンクの著書「モチベーション3.0」という本では＜モチベーション3.0＞という言葉で内発的動機を定義しています。

＜モチベーション3.0＞には三つの重要な要素がある。一つは＜自律性＞。自分の人生を自ら導きたいという欲求のこと。二番目は＜マスタリー（熟達）＞。自分にとって意味のあることを上達させたいという衝動のこと。三番目は＜目的＞。自分よりも大きいこと、自分の利益を超えたことのために活動したい、という切なる思いのことだ。

1on1で各メンバーの内発的動機が「自分の意思で仕事を決めたい」（＝自律性）なのか、「技術力を高めたい」（＝マスタリー）なのか、「意味のある仕事をしたい」（＝目的） なのかを見極めました。



それに応じてインプットの仕方を変えました。



自律性タイプのメンバーには"Why"をインプットして"What/When"に関してはある程度幅を持たせてメンバーが決められるようにする。

マスタリータイプのメンバーには"Why/What/When"をインプットして極上の"How"をアウトプットすることを期待する。

目的タイプのメンバーには"Why"を丁寧にインプットして"What"を一緒に考えてもらう。



※私はPMも担っているので"Why"の定義をメンバーに委ねることは絶対にしません。それはPMの責務として明確に区別しました。



このような感じで、各メンバーの多様な内発的動機をくすぐりながらモチベーションを上げ、最終的にはパフォーマンスを上げることに成功しました。



2-4.心理的安全性の担保
心理的安全性はGoogleのre:Workというサイトで以下のように説明されています。

心理的安全性とは、対人関係においてリスクある行動を取ったときの結果に対する個人の認知の仕方、つまり、「無知、無能、ネガティブ、邪魔だと思われる可能性のある行動をしても、このチームなら大丈夫だ」と信じられるかどうかを意味します。

（引用元：re:Work - ガイド: 「効果的なチームとは何か」を知る）

効果的なチームを作る５つの要素で最も根幹となる重要な要素です。



心理的安全性の担保に関するアプローチに関しては広木さん（@hiroki_daichi）の神記事が最近世に放たれたので、そちらに丸投げしますw


qiita.com



ここでは具体的に実施した小さい取り組みの積み重ねを箇条書きで列挙するに留めます。

ミーティングではとにかく明るく振る舞う
メンバーの話を聞くときは顔を見て聞く（キーボード打ちながらは絶対NG）
問題をチームで解決する場を作り「もしこれでも解決しなかったら○○さんに声かけて」「○○さんはその時こう助けてあげて」と、具体的な解決方法まで提示してあげる
メールやチャットでは即レス
もし本当に忙しくて質問を受ける余裕がない場合は、その状態を正直に言う
メンバーから出てきた意見はしっかり拾って、必ず何かしらの答え（採用するか見送るか）とその理由を伝える
定期的にライトな1on1を行う（大々的に「不満を言え」と仕立てると、他のメンバーがどういう不満を言ったのかも気になってしまうので、こっそり聞くのが良い）




第三章：自ら成長できるチームへの変貌
3-1.チームのカオスエンジニアリング
この言葉はEMFMのep7の中で出てきました。


anchor.fm



一度あまりにも忙しくて、申し訳ないなと思いながら普段自分がやっている仕事をメンバーに丸投げしてみたら、あっという間にメンバーができるようになりました。全然自分がその仕事を持つ必要がなく、メンバーがやってくれた方が圧倒的にスピードが早かったことがわかりました。

このように「役割と仕事分担」や「会議やミーティング設計」を一度意図的に壊してみると、無駄が除去されてパフォーマンスが上がったりします。断片化したハードディスクのデフラグみたいなイメージですね。これを定期的に行うと、メンバーからも無駄の指摘が出やすくなります。



EMFMの中でも「会議を一切やらない週を作る」とか「マネージャーが定期的に長期休暇に入る」とか具体的な方法が出てきました。これは一度聴くことをオススメします。



3-2.階段を刻み、踊り場で遊ばせる
この言葉は「無理・無意味から職場を救うマネジメントの基礎理論」という書籍からの引用です。

これはメンバーを成長させるための機会の与え方を表しています。



まず「階段を刻む」。

メンバーを１階から２階に上げる為に、どのくらいの高さ（＝難易度）と歩幅（＝導き方の丁寧さ）の階段を用意するかが重要です。難易度が高すぎたり導き方が雑すぎる最初から諦めてしまうし、逆に難易度が低すぎたり無駄に導き方が細かすぎたりすると意義を感じられなくなります。

適切な高さと歩幅の階段を、各メンバーのスキルや特性、内発的動機に合わせて作って上げる必要があります。



次に「踊り場で遊ばせる」。

メンバーが階段を順調に上ったら、すぐに次の階段を上らせるのではなく、達成したレベルの範囲内で遊ばせる、つまり自由にやらせます。前の階段で得られたスキルを応用することでスキルの装着度が高まります。マネージャーの責任の範囲内で周りやユーザーに影響の出ない範囲の「踊り場」を用意し、その中では自由に遊ばせることでモチベーションの向上とスキルアップの両方を実現することができます。





終章：１年後…
このような様々な取り組みを約１年続けた結果、今は大変いいチームになっています。

朝会ではメンバーが積極的に意見を言い合い、そこで出た意見は[Try]というタグをつけてチケット起票され、メンバーが自発的に改善活動をし、週一回の振り返りでは「もっとこうしてほしい」といった文句も出る。

しかもこのミーティングは私はファシリテートしていません。ただコーヒーを飲みながら眺めてニヤニヤしているだけです。



まさに「継続的進化をするチーム」ができてきました。



そして結果も出てきています。

まずプロダクト（アプリ）が大きく改善されました。リニューアルは成功しブラックボックスは解消、その後の大きなプロジェクトも先日リリースされました。今は２週間に一度のペースでリリースを行うことができているし、ステークホルダからの開発依頼にもスピーディに応えられています。



もちろんまだまだ改善点はあります。もっと開発スピードは上げないといけないし、もっとメンバーから出たアイディアを実現する流れを作らないといけません。が、１年前と比べると見違えるような変化です。



実際にはこの改革が合わなくて辞めたエンジニアも数人います。改革の途中ではメンバー同士の喧嘩が怒って空気が最悪になったりもしました。ただそういう辛さも乗り越えて作り上げたこのチームに誇りを感じています。





今はメンバーが楽しそうに仕事をしている姿を遠くからニヤニヤして見ている時間が楽しくて仕方がありません。そんな時「エンジニアリングマネージャーって面白いなあ」と思います。









気づけば6千字を超える長文になってしまいました…！

読んでいただいた方には感謝申し上げます。



多くの方からフィードバックをいただきたいので、もし少しでも面白いと思っていただいたらSNSでシェアして頂けると助かります。そして何かご意見なども頂けると嬉しいです。TwitterでのDMもお待ちしております。



明日はnaosim_さんの記事です！お楽しみに！
ドメイン駆動設計なエンジニアの育成プログラムを作った
ddd ドメイン駆動設計
この記事は Engineering Manager vol.2 Advent Calendar 2018 - Qiita の16日目の記事です。

今の会社にはチームにジョインした方に対してドメイン駆動設計での開発ができるように育成するプログラムがあります。
「プログラムがある」と言っても有志で持ち回りでやってるちょっと真面目な勉強会のようなものです。
それを私がやることになったので、今日はその時に考えたことを書きます。
身の回りに勉強会等開いてくれる人がいたら「あの人はこんな感じのことを考えてるのかー」と思ってもらえたら幸いです。

誰？
名前: なおしむ
某ISPでエンジニアをしている
最近は新しく来た人の育成もしている
背景
現在のプロジェクトはビジネスの特性上、市場変化に対応しつつバグのない開発が求められている
そのために内製 + ドメイン駆動設計(DDD)で開発している
リンクいろいろ
IPAアジャイルのリンク
DDD Alliance レガシーなコードにドメイン駆動設計で立ち向かった5年間の軌跡
DDDを実践できるエンジニアを育成するための取り組みについて
ドメイン駆動設計 失敗したことと成功したこと
「内製xDDD」の規模は5人x10チームで50人くらい
エンジニアは随時募集しているがDDDを経験済みのエンジニアは少ないため、メンバーがジョインしてから育成している
メンバーがジョインしたときにやる育成プログラムが本題の「DDDスタート塾」です
DDDスタート塾とは？
新しく来た人が最初に入る塾
塾の講師は「塾長」と呼ばれる
チャットルームのアイコンはこれ
f:id:naosim:20181215011116p:plain
塾の期間はだいたい4週間
塾の受講者はだいたい4人くらい
塾自体はずっと前からあったが、私は塾長をやったことがなかったので今回引き受けてみた
計画
塾名の改名
過去の塾は塾長から名前をとって、例えば「鈴木塾」とか「佐藤塾」とか呼ばれてました。
塾に名前が入ってると属人化しそうだったので(してたので)今回「DDDスタート塾」に改名しました。

ゴールの定義「DDDスタート塾のゴールはなんだろう？」
まずはチームメンバーに相談しつつ塾のゴールを定義しました。
塾の期間だけでドメイン駆動設計がカンペキにわかるわけがないので、塾のゴールを「チームに入ってDDDなコードを読み、理解し、書くことができる」としました。

育成コンセプト「箸の持ち方から教える」
ジョインされる方はだいたい事前に面談をしています。そこでjava経験アリ・Spring経験アリと言ってても、実際はできない方もいます。
たとえばjavaはできるが設計はできないとか。
ただ面談時に「この人はいける！」と思って採用した方なので「できないのは経験がないだけ、教えればできるようになる」と考えています。 なので必要なスキルがすべて身につくようにプログラムを設計しました。

ゴールに対して必要なスキルに細分化する
DDDは色々は技術を積み上げたようなものなので、DDDを細分化しました。

DDD
オニオンアーキテクチャ
オブジェクト指向
SpringBoot
SQL
java
PlantUML
余談ですがPlantUMLがあるのはExcelじゃない感を出したいだけです。

ざっくりスケジュールと学ぶこと
オニオンアーキテクチャな構造を作るお題
期間: 2週間
学ぶこと
java
オニオンアーキテクチャ
オブジェクト指向
仕様書からDDDなプログラムを作成するお題: 2週間
期間: 2週間
学ぶこと
SQL
SpringBoot
DDD
PlantUML
全体の進め方
毎日1時間は勉強会形式の集合研修をやり、そのほかの時間は研修で出た宿題をやってもらいました。
集合研修の内容はメンバーの進捗に各種説明、ハンズオン、宿題のレビューです。

計画を練りすぎてもしょうがない
ここから先は、行き当たりばったりです。都度メンバーの状態を見ながら説明したりハンズオンをしたりして進めました。

塾を2回やった結果
上記の計画でプログラムを2回やりました。
期間でいうと4週間x2回で約2ヶ月です。 FAN DONE LEARNでまとめてみます。(←最近流行ってる)

DONE
4週間になんとか収まった
ギリギリ間に合った感が否めない。 SQL文とか細かいところが伝えきれてない。

LEARN
2ヶ月間、毎日勉強会をやり続けるのは大変
毎日どんな質問がくるかわからない中で塾を進めるのは大変でした。質問内容とかは形式知にしないとなーと思った。(やってない)
とりあえず説明するときに使った資料はこちらです。
www.itsenka.com


オブジェクト指向できていますか？ from Moriharu Ohzu
www.slideshare.net

naosim.hatenablog.jp

イベント・ソーシングを知る from Shuhei Fujita
www.slideshare.net
「なぜDDDをやるのか」をうまく伝えることができない
オブジェクト指向とかイベントソーシングとかいろんな要素から生まれていたり、そもそもDDDを実験的にやってみてるところもあるので、DDDをやる理由をシンプルに説明するのが難しかった。

ハンズオンをたくさんやるべき
HelloWorldでも意外にみんなハマる。原因は、サイトの内容を理解せずにコピペしてたり、3ステップくらい必要な機能を一気に実装しようとしてわけわかんなくなったりいろいろ。そうゆうのをひとつひとつ指摘していくことに意義があるとおもった。

FAN
中間テストをやると緊張感と達成感があって良い
オニオンアーキテクチャのお題が終わったタイミングで中間テストをやってみました。
もちろん事前に告知して。
そしたら程よい緊張感で結構楽しかったです。
ちなみに問題はこん感じ。

intelljでプロジェクトを作ってspockでテストを動かすまでをググらずにやりなさい ※ただしdependencesに書く内容とか暗記できないようなものは提示する
真っ白な紙にオニオンアーキテクチャの図を書きなさい
既に業務をやってる人が「入門したい！」と言ってきた
既に案件をガッツリやってる方なので「チームで時間が取れるように調整できるならイイよー」ってことにした。 私としてもある程度知識がある人がいた方が質問が活発になってやりやすかった。
こうゆう広がりすごく嬉しい。

今後のトライ
形式知化する
行き当たりばったりで資料を作成したりネットの資料を使ったりしてたので、そうゆうのはまとめようと思う。最悪資料読めば講師がいなくてもメンバーが進めれるようにしたい。(緊急の用事が入ったりもするし)

講師役を増やす
形式知を増やせばある程度誰でも講師役ができるようになると思う。講師役をやることで理解が深まることもあるので、入門→業務遂行→講師→より深い知識って感じのパスを作りたい。

まとめ
ダラダラとたくさん書きましたが、講師をすることでみんながつまずくポイントが分かって勉強になった。課題はたくさんあるけど、いろんなやり方を試しつつ続けていきたいと思いました。


エンジニアリングマネージャーの成長と育成
エンジニアリングマネージャー
こんにちは！チームボックスのヤスニシです。

この記事は、Engineering Manager vol.2 Advent Calendar 2018 の17日目の記事です。


qiita.com

「成長＝スキル習得」だけではない
エンジニアリングマネージャーが最近熱く、勉強会や記事が増えてきていて個人的にはとても嬉しいです。今回は、その中でもあまり触れられていないエンジニアリングマネージャーの成長と育成について考えてみようと思います。これは私的になかなかチャレンジング。

「成長＝スキル習得」というようなイメージが強いのですが、実は同じくらい大事なことがあり、そこができるかどうかが成長し続けられるかどうかの鍵を握っています。スキルややり方については、このような最近多くの本や記事も出てきてますので、ちょっと違う観点で書いてみます。

エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング
エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング

作者: 広木大地
出版社/メーカー: 技術評論社
発売日: 2018/02/22
メディア: 単行本（ソフトカバー）
この商品を含むブログ (2件) を見る

まず、EMはどういう人がやれば良いんだろう？
エンジニアはものづくりをしたくてやっているからか、エンジニアリングマネージャーをやりたがらない人が多いです。とはいえ、開発現場の課題というのはプログラミングだけで解決できるものだけではないので、肩書がついてなくてもどうしても現場でEM的な動きが必要になります。

優秀なエンジニアは知的好奇心が高く、目の前の課題が大きいと学ぶ方が多いので、解決策がプログラミングじゃなかった場合でも触手を伸ばす方がいます。そうするとEMの仕事をやってもうまくいくことがあります。そういう「何に対しても学べる方」方がEMには向いているのではないでしょうか。

逆に単にマネージャー（という役職）になりたいという方は、目的が課題解決ではなく役職になることである場合もあるので、そこは見極める必要がありそうです。

問題解決のために「人間の適応」に目を向ける
EMをやってみると、これまで見たことが無いような課題にぶち当たったり、唯一正しい答えを決められずに悩み、決定によってさらに問題が起こり悩む、ということが増えます。

f:id:tsuyok:20181217105806p:plain

課題解決方法の分類
何か問題が起こると、原因を探り対策を練り、技術的手段を探します。もちろんそれで解決することもあるわけですが、「人間の適応」が必要な場合があります。

リーダーが犯す最も大きな過ちは、適応を要する課題を解決したいときに技術的手段を用いてしまうことだ

というのは、↓の本の一節です。問題を見極め「人間が適応」に対しても対策をすることが必要です。そしてEMが対峙している問題は、人間の適応が必要な問題が多く、まず自分自身が適応しない限り、一緒のチームのメンバーも適応することができません。そのためには、私はEMがメンバーよりも自分を変え「学び続ける」ことができる、ということが大切なのではないでしょうか。

なぜ人と組織は変われないのか――ハーバード流 自己変革の理論と実践
なぜ人と組織は変われないのか――ハーバード流 自己変革の理論と実践

作者: ロバート・キーガン,リサ・ラスコウ・レイヒー,池村千秋
出版社/メーカー: 英治出版
発売日: 2013/10/24
メディア: 単行本
この商品を含むブログ (6件) を見る

我々はどのように学び続ければよいのか
では、どのように学べば良いのか。チームボックスでのリーダー育成の考え方を元に、EMの仕事を想定して4つのポイントに整理してみました。このような構造になっています。

f:id:tsuyok:20181218084410p:plain



①弱みや失敗をなんでも言い、さらけ出す
失敗をしたときに、プライドが邪魔をして、失敗を認められないことはあるのではないでしょうか。そうすると「自分で認められない→学び変わる必要がない→学べない」ということになってしまいます。

そのために、まずは他人に言ってみることです。勇気がいりますが、弱みや失敗を言うことによって、自分自身もそれを受け容れることができるようになります。自分が受け入られると、何かやったときの結果や、他人からのフィードバックも受け入れられ、どんな機会からも学べるようになります。

本当の勇気は「弱さ」を認めること
本当の勇気は「弱さ」を認めること

作者: ブレネーブラウン
出版社/メーカー: サンマーク出版
発売日: 2013/11/29
メディア: Kindle版
この商品を含むブログ (4件) を見る

②過去の学びを捨て、Unlearnする
学んできて、成功した実績があることは素晴らしいことです。でも、それがどんな場合でも役に立つわけではありません。ときには、その学びをあえて捨てて、別の学びを得る必要があります。

ただ、それにはどうしても痛みが伴います。今までの自分を一部否定するような感覚にもなるので。ただそこに向き合い、純粋な好奇心で新しいことから学ぶことができると、自分を成長させることができます。


mirai.doda.jp

③自分と向き合い、自分を知る
自分は今どういう状態なのか、何を学ばなければならないのか、何をUnlearnしなければならないのか、というのは、自分自身を知らないわかりません。わからないと、その後のアクションにつなげることができず、学ぶのが難しくなります。

その根源の多くは感情からやってくるのですが、感情は自分で認識するのは難しく、何もしないと目の前を通過していきます。つまり、努力をしないとできません。普段の仕事の中で自分へのセンサーを働かせ、自分の感情や無意識を知るようにします。

自分の感情を知るためには、気がついた時にノートにメモし、言語化すると良いです。毎日続けていくと、だんだん自分が何を感じているかが理解でき、次にどんな行動を変えるべきかが見えてきます。

④行動を変え、ふりかえる
何を変えるべきかわかったら、行動を変えます。行動を変えると、結果が出ます。結果をそのままにしておくと、学ぶことができません。しっかりとふりかえりを行い、何が良くて何が悪かったのか、次何を変えるべきかの結論を出すことで、学びが習慣化します。

エンジニアチームは、スクラムなどを導入することにより、チームでふりかえりをすることは多いと思いますが、自分自身のことについてふりかえる人は少ないと思います。チームと同様、個人で振り返ることで、改善プロセスが回るようになっていきます。


corp.netprotections.com

EMの育成ではこの4つのポイントもフォローする
EMを育成する場合に、チームビルディングやプロジェクトマネジメント、スクラムなどの知識やスキルを習得すること（主に技術的手段）と同時に、これらの適応に関してもフォローをしていくことが大切です。

そのために1on1やEMでのミーティングなどで、①〜④の学びについても一緒に考え、何か新しいアクションを行い、自分自身の成長に向き合い続ける環境を作り続けると、個人だけでなくEMを中心として全体で学び続ける組織を作ることができると思います。

やるのは難しいけど、学びには喜びがある
私自身、適応問題で悩み続けました。何か課題があるときに、自分自身が変われず、なかなか前に進めないという苦しいことが多くありました。ただ、このような考え方に出会った時に、少しずつ自分自身が成長するということの意味がわかってきました。

特にマネージャーの仕事は明確な答えが見えないことが多く、どの選択肢を意思決定してもどうなるかわからない、というようなことが多くなります。そうなると、わからないという事実や失敗に向き合わなければならなくなります。

そういう意味で、EMは人間の適応という意味での「学び」を意識する必要が多くなると考えています。ただこれが結構難しい。でも、やれたとしたら問題解決とともに自分が成長できるので、喜びが多くあります。

是非チャレンジしましょう！私もがんばります。
凝り固まった組織をゼロから改善する5つのステップ
ProductManager
EngineeringManager
VPoE
こんにちは。

Engineering Manager vol.2 Advent Calendar 2018の12/18を担当する、里山と申します。

5月から株式会社ビデオマーケットというVODの会社で、プロダクトマネージャとVP of Engineeringをやっています。

近年プロダクトマネージャとVP of Engineeringは共にとても注目度の上がっている領域ですが、エンジニア出身のプロダクトマネージャなら、組織文化の改革と効率的なプロダクト開発進行は事業責任を負う上で、当たり前に改善していかないといけない部分だと認識できると思います。そういう意味では、責任範囲も広いですが、うまく使い分けながらどちらも前向きに遂行出来ています。

私は半年前に現在の会社に入社し、現在までのあいだに、事業成果を最大化するために、組織文化をアグレッシブにアップデートしていきました。そのときに行った凝り固まった組織文化改革への5つのアプローチをお伝えします。

現場の意見の吸い上げ
入社したとき、最初に気になったのが、メンバーの「諦めムード」。案件一個一個に対して、「自分が考えたことではないが言われたからやった」みたいな言葉を何度も聞きました。

おそらく絶対的に足りないのは「自分ごと化」の考えであろう事はすぐにわかりました。

まずは、経営層から現場への直接の指示を禁止し、展開した上で部門全員に対して「1on1」を実施し、以下のような事を聞きました。

自分の今やっている事
3年後のキャリア
そのために1年後すべき事
やりづらい事
結果、以下のような事が共通する話題でした

メンバーのキャリア感は高い
現場自体は現在のシステムやプロダクトをよりよく改善していきたいと思っている
経営層へ思っている事を言えない
案件優先順位や内容の説明が薄く、納得性が低い案件が多い
実際に離職率も高く、毎月誰がが入り、誰かが辞めていました。

トップダウンに対抗でき得るための「ボトムアップの仕組み作り」が最優先であると認識しました。
（トップダウンを否定するものではありません。バランスの問題です。）

案件の流れを整理する
上記、実際の業務を見てみると、メンバーのマイナス意識を促す制度が、「プロジェクト制度」でした。入社当時弊社では、開発に関わるほぼ全ての施策が、プロジェクトベースで行われていました。プロジェクトには、プロジェクトマネージャが立てられて強力に推進するものの、同じプロダクトに複数のプロジェクトが並行し、それらの情報共有が甘いので、画面UIひとつとっても統一感のない、いびつなものとなっていました。当然莫大な数のバグを抱えていました。

また、プロジェクトはリリースがゴールとされ、解散するとメンバーは別のプロジェクトへアサインされていくため、プロダクトのバグが見つかっても、誰も責任持って対応出来ない、悪夢のようなことも起きていました。

これらはメンバーの「自分ごと化」を欠落させる要因のひとつとなっており、そこを整理する必要がありました。

そこで始めたのがプロダクトへ意識を持てる制度作りです。経営層とプロジェクト制を廃止することを握り、プロダクトに対して人をアサインするように変えました。

スクラムを導入し、全ての案件をバックログにまとめ、プロジェクトに関わらず優先度に応じて改善していくのも、プロダクト基準での進め方の浸透のため改革したことのひとつです。

現在は1番大きな規模で、20名以上でひとつのスクラムで回していますが、今後はラージスケール化も必要となりそうです。

根拠を集める
BtoCの自社サービスをやっている中で、数値によるDailyの意志決定をしていない、すなわちサービスグロースに対する考え方の弱さもまた、現場がボトムアップで戦えないことのひとつです。

ざっくりとでも、メンバーレベルが現状のアクティブユーザ数や、売上に関する知識を持ち、他社比較出来るくらいの考え方があれば、ボトムアップする際の武器となるはずです。現場で数字が取れていないのだから、トップから降りてくる施策もそのレベルの数字が追えていないわけなので、当然案件の納得度に対して議論が起こるようになります。それがボトムアップへの第一歩になりうるわけです。

まだまだ数値の精度を細かくしていく必要がありますが、取れる数字はダッシュボード化し、毎朝スタンドアップMTGで共有するような運用を始めました。

マーケ施策や改善などで数値が変動することをメンバー自身が理解できるようになり、特にクラッシュ率などは、毎日見ることで課題感があらわになり、アプリ自体の品質は半年前とは大きく異なる改善を遂げています。

未来像をすり合わせる
メンバーの目線を上げるために、未来に向かって約束をする事は何よりも大事です。

私はメンバーと3つの約束をしました。
・メンバーの未来の姿を握る（行動指針）
・プロダクトの未来を握る（コアバリュー）
・未来のプロダクトを自分のものにする（リニューアル）

行動指針(ビジョンやミッション)は、メンバーへの信頼と承認を伝えることに主眼を置きました。「プロダクトの未来は我々の手で作る」というような文脈です。

また、本来コアバリューは定性・定量調査の上でユーザに対して与える価値を定義するものですが、今回はその数値やデータを取れる状況になかったため、今プロダクトに不満を持っているメンバーの目線で作りました。具体的なものは今回は伏せますが、ユーザに対する安定的なサービス提供がメインの、現状のフェーズとしては地に足がついたものになっていると思います。

また、最後に、それを絵に描いた餅にしないために、サービスのフルリニューアルを経営層と握りました。過去のしがらみをひきずりながら無理するより、未来に向いて進むほうが目線は上がります。現在はサービス開発の真っ只中ですが、メンバーのモチベーションは総じて高いです。

モチベーションの高い人を集めるために
これはまだ成果としてこれから出したいところですが、技術選択において「くせ」をつけるというのが大事なのではないかと考えています。

今まで弊社の採用サイトでの募集職種は、LAMPエンジニア（PHP）、Android、iOSでした。採用も担当している私個人としては、これだけだと、ピンからキリまで広すぎる範囲の人が来てしまう懸念を感じていました。

直近、前段のようにリニューアルを選択することで2点の大きな選択が出来ました。

ひとつが、アプリ側でクロスプラットフォーム技術のFlutterを採用するという事です。これは、Androidエンジニアの離職によりピンチになったことで私が決断したのですが、今年のGoogleI/Oに行った時の現場での盛り上がりを知っていたことも、個人的な意志決定を後押ししました。

もうひとつが、GCP✖️マイクロサービスアーキテクチャ✖️サーバサイドKotlinの採用です。これは現場からどうしても採用してきたいと強く言ってきたもので、現場のボトムアップを承認する機会が作られた事は私自身もさらに前向きになるきっかけをもらいました。

また、同時期に、私が兼務している他部門でも現場主導でGCP✖️マイクロサービスアーキテクチャ✖️Goの構成の新システム開発が動き出しました。会社自身が前向きに変わりつつあるきっかけのような出来事です。

しっかりとモダンなノウハウを積み上げられれば、採用文脈での会社の特徴も変わってくると思っています。結果、感度の高い人を効率的に採用出来るように、TechBlogの運用も準備しています。

結果会社は変わったのか
私個人の評価としては、「変わっている（ところ）」という認識です。私の考え方に賛同してくれる沢山の仲間が増えました。ただ道半ばです。

まだまだ私自身、社員全員に信用されているわけではないですし、私が関わる部門とそれ以外の部門での軋轢を感じることもあります。（陰口を叩かれることも沢山あります）

「それでも」やっていかないといけません。

個人としては、仕事が仕事である以上、また会社が利益を追求する団体である以上、後ろ向きな仕事や、安定し続ける仕事はないと考えているので、「課題を課題と認識」し「泥臭くても面倒くさがらずに一歩前に進める」事がボトムアップの文化の本質だと考えていますし、そこにしか未来がないと思います。

ちょっとエモくなりましたが、私は基本的には、エンジニアの質の差は意識の差以外にないと思っているので、ベンチャーであろうが、カチカチに固まっている会社であろうが、仕組みとやる気次第で変わると考えています。

参考になるかどうかはわかりませんが、ちょっとでも今回の話が意識のどこかに引っかかってもらえるとありがたいです。

組織のベースラインを引く
元エンジニアリングマネージャで、今は人事をやっています。

この記事は、Engineering Manager vol.2 Advent Calendar 2018 の19日目です。

もはや関係ないのに未だにエンジニアの1on1を何人かの人とやっているのですが、そこで、同じことを何人かの人に説明することが続いたので、きっと同じようなことで詰まってるんだろうなと思い、久しぶりに書いてみることにしました。*1

前提
僕が1on1をやっている人は、チームのリーダーもしくはリーダー的な動きを期待されている人
それぞれのチームは古い人もいれば、新しい人も入ってきて、割とカオス。
それぞれのリーダーは、なんとかチームを良くしたいと思ってがんばっている。
1on1での話
とあるAさんの1on1から
チームのみんなが技術的に向上したいって思ってくれない

という悩み。聞いてみるとチームとしては業務はそれなりにこなせているが、Aさんとしては、技術的に分かっていればもっといろいろできるはずという思いがある。 日々の業務は、前の仕事のちょっとした改修だったり、似たような機能の追加が多いので、なんとかなってしまうようだ。 ただ、前の仕事の内容を完璧に理解しているわけではない状態で対応しているので、本来は、もっと違う設計だったり、違う対応方法ができるはずなのに、なかなかそういう発想にならないのである。仕様的には動いているし、納期も守っているので、そのAさん以外は、あんまり課題意識がないようである。

とあるBさんとの1on1から
チームで開発に関するレビューをする時にレビューアの指摘が常にネガティブな言い方になってしまうのでチームの空気が悪くなってしまう

という悩み。聞いてみると指摘事項の中にはレベルの高いことから低いことまでいろいろあるけど、レビューアの個人的な観点で目に付く事を指摘してしまっている模様。本来ならここまでできてたらまずは及第点みたいな事でも、レビューアから見るとアラが見えてしまうので指摘してしまう。また、レビューアの中にもいろんなレベルの人がいるので、指摘している内容がレビューイのレベルに合っていないような指摘になることも。

とあるCさんとの1on1から
チームで勉強会をやる時に、初心者のレベルに合わせてしまう

チームの中で、業務で必要なスキルを習得するために勉強会をしようという話になったときに、チームの中の初心者のレベルに合わせて、勉強を始めてしまうそうです。それ自体は別に悪いことではないのですが、「知らなくて当然」「みんなで覚えていこう」みたいな空気になってしまい、当然身につけておくべきスキルでさえも、「誰かが教えてくれる」という空気が出てきてしまいます。そうなってくると、なかなか勉強会も進まないし、 自分たちのスキルとしても、そのレベルでいいんだなという空気になってしまいます。

みんなで勉強しようというところまでは良かったのですが。

1on1でみんなに伝えたこと
Aさん、Bさん、Cさんのケースに共通なことは、その組織やチームでの基準がないことによる弊害が出ているんじゃないかと思いました。*2

そこで、

組織として最低限満たすべき基準を、みんなで意識をあわすために「組織のベースライン」を引こう

という話をしました。

f:id:sugimori:20181219222343j:plain
1on1で実際に書いた付箋
Aさんのケース
Aさんは、チームのみんなに技術的にもっと上を目指してほしいし、その方がもっと業務を効率的にできると思っています。 しかし、他のチームメンバーは、現状でも業務は回っているし、なぜそんなことをしないといけないのか伝わっていないのでしょう。 特にAさんは、技術的にもできる人なので、他のメンバーからは、Aさんが言っていることはだいぶレベルの高い理想論のように聞こえているかもしれません。 Aさんとしては、そんなにレベルの高いことを要求しているつもりもなく、チームとして「こうなって欲しい」ということを言っているだけなのですが、伝わりません。チームとしての最低限満たすべき基準（ベースライン）の認識が、みんなであっていないことから発生していると思いました。

Bさんのケース
Bさんのケースでは、いろんなレビューアが、それぞれの視点で指摘をしています。 レビューする時って、絶対的な正解があるというよりは、このケースでは、どのレベルまで引き上げるのかということが大事だと思っています。*3 しかし、このチームのレビューアたちは、指摘する際の基準である「どのレベルまで」ということが揃っていないので、「あれができていない」「これができていない」という指摘になってしまっているのかなと思いました。*4 つまり、このチームは、チームとして最低限満たすべき基準である「どのレベルまで」というところが、認識があっていないことから発生していると思いました。

Cさんのケース
Cさんのケースでは、チームでわからないことを自発的に勉強会で教え合う姿勢は、とても良いです。 しかし、チームとして、最低限満たすべき基準として、「最低限このくらいのスキルがないとこのチームではだめだよね。」というラインがないので、 初心者レベルから、「みんなでがんばろう」という感じの空気になってしまいます。それでみんががんばれば、まだいいのですが、 現状の自分のレベルと目標のレベルのギャップがないと、「がんばろう」という気にもならないかもしれません。 このケースも、やっぱり、最低限満たすべき基準である「このレベルのスキル」がないことから発生していると思いました。

どうやって組織のベースラインを引くのか
さて、組織として基準となるべきベースラインがないことからいろんな問題が発生していることがわかりました。 では、どうやってそのベースラインを作ったらいいのでしょうか。

結論から言うと「組織やチームによる」です。*5

自立意識の強いチームに対して、頭ごなしに押し付けても反発するでしょうし、逆に、まだまだジュニアなチームであれば、 自分たちからそのベースラインを作り出すことは難しいかもしれません。 だからこそ、その組織やチームをよく見ているエンジニアリングマネージャの力の見せ所なのです。 その組織やチームにあったやり方で、「組織のベースライン」を自分たちのものになるようにしていかなければいけません。

そういう自律的な基準を作れるようになることが、自己組織化の第一歩かもしれませんね。

まとめ
組織やチームが最低限満たすべきベースラインが決まっていないと、チームがバラバラになって弊害がおきてしまう
そうならないために、 「組織のベースライン」を引こう。
ただし、「組織のベースライン」が自分たちのものと思えないと、すぐ形骸化するよ。
おまけ
「組織のベースライン」という話をしていたのですが、スクラムの「Doneの定義」もある意味ではベースラインなのかなと思いました。 「Doneの定義」が、チームの成熟度に合わせて見直すように、「組織のベースライン」も組織の成熟度に合わせて、見直していかないといけませんね。

*1:1on1やってるエンジニアにはアウトプットしろと散々言ってるのに自分は何もしてないのでその贖罪というのは内緒です。

*2:ちなみに、Aさん、Bさん、Cさんは、だいたい事実ですが、もう記憶があいまいなので、いろんなものが混ざっているかもしれないですし、創作も入っています。 弊社の人は、Aさんは、誰だ？とか、変な詮索はしないようにお願いします。

*3:いや、まあ、勝手な想像なんですけど。

*4:それ以外にも、いろいろ課題はありそうですが。

*5:あー。やっぱりって感じですよね。

1 on 1をベースとした組織構造の提案
こんにちは！id:unlearned です。

今年は寒いですね。 暖冬説はなんだったのかと思っているのですが、四季があるのは好きです。

さて、この記事は、Engineering Manager vol.2 Advent Calendar 2018 の20日目の記事です。

1 on 1っていいよね。
ドラッカー曰く、

マネージャーを見分ける基準は命令するする権限ではない。貢献する責任である。
権限ではなく、責任がマネージャーを見分ける基準である。
さて、僕は1 on 1好きです。 1 on 1をやることで、信頼感を醸成できますし、みんなとキャリアについて相談できます。 また、ボトムアップのアイディアも吸い上げできますし、本当に良い。

すべての仕事は人間がやっています。 僕は、1 on 1が仕事に人間性を取り戻し、職場が活気づくなんともROI(Return On Investment:投資利益率)が良い施策だと考えています。

僕の職場でも、「1 on 1はチームに週一で1人30分程度でお願いします」という形にしています。

「1 on 1いいよね」だけじゃ収まらない問題
1 on 1はチームに変化がある時に効果を実感できると思います。 特にチームの人数が爆増してたりとかすると、チームビルディングの一環としてもとても良い。

一方で、1 on 1対象者が増えてくると、時間的な負担が出て来ます。 1 on 1のメンバーが10人ほどに増えると、1週間に5時間ほど、時間の確保が必要なります。これは週全体の労働時間の1/8に当たります。

1 on 1はROIが良いと思う反面、「人は1 on 1だけに生きるにあらず」です。

また、10人ものメンバーの話を聞くのは、実際にはかなりのエネルギーを消耗します。少なくとも僕は頭がパンパンになりますし、早く帰って眠りたい気分にはなります。

その上、10人もの人間を、人間は理解したり、そのために何かアクションが取ることができるでしょうか？ 時に、「俺は何人の人間をマネジメントしてるぜ」と、担当する人間の数が多い自慢をするする方がいますが、現実には、1人あたりのメンバーのために費やす時間を薄く分配しているだけです。

機械的に問題解決もなく1 on 1することが、貢献と言えるでしょうか？

こいつは大変だ！

解決策
組織を考える時に、1 on 1対象メンバーが5人程度になるように、うまく配置/分割していくのが良いと思います。

なんで5人かというと、1日に1人と1 on 1をやるような感じです。

1日に1人と1 on 1ができるなら、1 on 1に全力で望めます。 加えて、一週間に1 on 1に使う基本的な時間も、2.5時間に抑えられます。 空いた時間で、ガンガン問題解決作業を行いましょう。

とはいえ問題
とはいえ、1 on 1を構造的に組織的に行うには、思いの外、問題がつきまといます。

まず第一に、今後1 on 1を他の人に任せることを、ちゃんとメンバーに伝えなければいけません。 また、そのことについて、納得してもらう必要があります。場合によっては、ひきつづき1 on 1を行い続ける誠実さも必要です。

二番目に、今後誰に1 on 1を任せていくのかは非常に重要な問題になります。しかしすでに、適切な1 on 1をされているのであれば、比較的スムーズに1 on 1を行うメンバーが見つけられるかもしれません。そういったメンバーがいた場合、しばらく、2 on 1形式を行うことで、スムーズに1 on 1に移行していくことができるでしょう。

三つ目として、組織が階層的になる可能性があります。 5人に絞るということは、5人のエンジニアリングマネージャーをさらに上位のエンジニアリングマネージャーがその5人と1on1を行うという形式になってしまいます。個人的に、これは非常に痛い。 対策としては、エンジニアリングマネージャーというのはあくまでも役割なのであって、偉さの階層ではないという認識を開発文化として浸透させる必要があるかと思います。

まとめ
1 on 1ができる限界の人数をベースに組織を考えてみたよ
1人のエンジニアリングマネージャーが1 on 1を行う人数って限界があるよね
分割しましょう
1 on 1の担当を引き継ぐ時には、ちゃんとみんなの納得感を得よう
1 on 1を適切に行うことで、1 on 1を引き継ぐことが容易になります
組織が階層化しないように気をつけよう
以上です。 わかりづらいので、あとで図を加えるかもしれません。

楽しく行こう！

小さく失敗しませんか？
マネジメント エンジニアリングマネージャー
こんにちは！！つよぽそです。

※この記事はEngineering Manager vol.2 Advent Calendar 2018 21日目の記事です。

今日は僕の所属している開発チームで意識していることを紹介します。

小さく失敗する？
さて、いきなり失敗するって書いてあって驚きましたか？そもそも失敗なんてしたくないわって思う人がほとんどだと思います。実際僕もそうです。失敗なんてしたくない。失敗をゼロにすることこそが本質だろうと。

だが、人間は失敗する
そうなんです。いくら失敗したくないと思って注意したところで、僕らが人間である限りは必ず失敗します。悲しい事実として人間は決して完璧な生き物ではないのです。恥ずかしながら僕はありとあらゆる失敗を経験してきました。辛いですね。

当然ながら完璧な物を作りたい。失敗なんてゼロにしたい。バグゼロだ！！と思って日々開発を進めるわけですが、こう思って寝る間を惜しんで開発に着手してありとあらゆるテストをして不安に押し潰されそうになりながら日々を生きたところで、いざリリースをしてみると残念ながらバグは発生します。ちょっとしたバグからクリティカルで死にたくなるようなバグまで。

失敗の影響をコントロールする
バグを出さないように努力することは当然の義務ではあるんですが、少し視点を変えてみます。そもそもバグは必ず起こる。だったらそのバグで発生する影響を最小限にできるようコントロールすることで安心を得ることができるのではないかと。バグは不確実性だと思っているんですが、バグの影響を最小限に留めつつリリースを行う環境を整備し、チームに浸透させていくこと、つまり不確実性をコントロール出来るようにすることもエンジニアリングマネージャーとしての仕事なのではないかと思っています。以下、弊チームで推進している小さく失敗するための施策を紹介します。

小さく失敗するための工夫
小さくリリース
リリースするうえで、如何に必要最低限の機能をリリースするのかを意識して動きます。一つの機能を考える時、全てを同時に出すことに拘りがちですが、一度立ち止まってもっと小さく機能を分解してリリースしていけるのではないかと考えてみます。最小限の機能で小さくリリースすることで以下のメリットを享受することができます。

最小限の工数でリリースしていくためスピードが早い
リリースしていく中で新たな課題が見つかり方向転換しやすい
プルリクを小さく
小さくリリースにも関連しますが、プルリクを出来る限り小さい単位に区切ります。例えばですが、modelの実装のみ先にプルリクを出す等です。プルリクを小さくすることで下記のメリットを享受できます。

レビューしやすい
差分が少ないため当然レビューに対する労力は減ります。変更点に焦点を絞れるためレビューの見逃しも減ります。

バグの影響範囲を絞りやすい
差分が少ないため、どこの変更が影響しているのか調査が容易になる

バグが出た時にロールバックしやすい
コードに差分が少ないため、リリース後バグを検知したあとに一旦releaseのバージョンを下げてデプロイする際の影響範囲が少ない。
※リリースされる機能が絞られているため他の機能までロールバックしなければいけないみたいな状況が少なくなる。
※エラーの検知をしっかり整備しておくとより安心した開発が可能になります。

feature togglesとcanary release
特定の機能やrubyのバージョンアップ等の段階的なリリースを可能にしてくれます。例えばですが全体の1%にのみ機能をリリースしてエラーが発生するかどうかを確認しつつ、徐々に公開率をあげて確かめて行くことができます。特に複雑な作りになっている箇所だったり支払い周りといったクリティカルな箇所に修正を加えたりといった場合に圧倒的な安心感を与えてくれます。メリットは下記です。

user単位であったり公開比率といった段階的リリースが可能
ごく一部のユーザーにのみ公開し挙動をチェックすることが可能
仮にバグを発見した場合、一旦公開率を0%に戻す事で落ち着いてバグの修正に取り組める
公開比率を調整できるため、A/Bテストも気軽に行う事ができる
※feature togglesとcanary releaseの考え方はujihisa氏がfablic時代に持ち込んでくれました。感謝

まとめ
失敗は必ず起こるもの
失敗の影響範囲をコントロールできるようにすれば開発に圧倒的な安心感が生まれる
安全にリリースするための手法を導入・展開していくこともエンジニアリングマネージャーの役割だと思う
※当然の事ですが、バグ自体は起こさないように全力を尽くしましょうね！！

では、楽しんで開発していきましょう！！

カスタマーサクセスの原則に学ぶエンジニアリングマネジメントの心構え
エンジニアリングマネージャー
カスタマーサクセス
はじめに
長いタイトルですみません :bow:
さてみなさん、カスタマーサクセスとは何かご存知でしょうか？カスタマーサクセスとは、自社の製品を利用する顧客を成功に導くことによって、製品の利用継続率を高め、自社と製品のファンになってもらう取り組みのことです。特にサブスクリプション型のサービスでは極めて重要で、ここを怠っているとサービスの解約が続いてなかなか成長できない :arrow_heading_down: なんてことに繋がってしまいます。

ちなみに2018年は日本で多くのサブスクリプション型のサービスが広まってきており、「SaaS元年」と呼ばれるほどでした。

※日経の記事 からの引用

ソフトウエアをクラウド上で利用する「SaaS（ソフトウエア・アズ・ア・サービス）」が急速に広がってきた。導入の黒子役はスタートアップ企業だ。

カスタマーサクセスの解説をするととんでもないボリュームになるので、ここでは紹介に留めておきます。

※以下は詳しく知りたい方向け

カスタマーサクセス青本
Takaaki Umadaさんのスライド
SmartHRさんがちょうど記事あげてた :stuck_out_tongue_closed_eyes:
ここからが本題です。エンジニアリングマネジメント(EM)を経験していた私が、カスタマーサクセス(CS)について学んでいると、EMとCSの間にとてもよく似た関係性があることがわかりました。この記事ではCSの原則と、EMとの相似関係についていくつか紹介したいと思います。

CSの原則：正しい顧客に販売しよう
顧客が成功するためには、正しい顧客に販売する、ということがとても重要です。自社の製品に合っていない顧客に販売してしまうと、顧客の課題は解決されず、不満をもってしまいます。結果的に、オンボーディングのコスト増、製品サポートに対するクレーム、ネガティブな風評が広まる、などの悲しい結果に繋がりますし、なにより顧客が幸せになっていません :cry:

:arrow_up_down: EMとの関係性：会社にマッチする人を採用する
この原則に対応するのが採用です。EM.FM podcast でも「会社に合わない人はとにかく採用しないことが大事」という趣旨のことをおっしゃっていました。もし採用しちゃった場合、その人と粘り強く会話し続けなければなりません。どんなに優れた技術力を持った人でも、会社のミッションや行動指針と合わない人を採用するとお互い幸せになれないよ、ということに似ていますね。

CSの原則: 顧客とベンダーは何もしなければ離れる
顧客が契約を開始してからCSの出番です。定期的に顧客とのタッチポイントを作ることで顧客を成功に導けているかを確認します。逆に契約開始後にほったらかしにされてしまうと、製品の価値を感じることができず、解約につながる可能性が高くなってしまいます。

:arrow_up_down: EMとの関係性： 効果的な1on1の実施
どんなに優秀な人が採用できたとしても、ほったらかしの状態では期待する成果を出す可能性は低くなってしまうでしょう。また、評価において上司と部下のギャップが大きくなりがちです。1on1を開催することで、定期的に会話する時間を確保し、メンバーが成功できているか確認しましょう。

CSの原則: タイムトゥバリューの向上にとことん取り組もう
タイムトゥバリュー(TTV)とは、製品の価値を実感してもらうまでにかかる時間のことです。これが長いと、製品導入の初期段階で価値を感じることができず、早期の解約に繋がってしまいます。TTVを短くするための施策が オンボーディング です。製品の価値をいち早く感じてもらうために、製品の使い方のレクチャーを行います。CSが作業を代行するのではなく、顧客が製品を理解し活用するための手ほどきをします。

:arrow_up_down: EMとの関係性： 入社した人のオンボーディング
オンボーディングは、入社直後の社員に対しても適用できる考え方です。
入社直後は、どうしても不安を感じ、心理的安全性が低い状態からスタートします。
早く会社に慣れて、最速で成果を出してもらうためのプログラムを考えてみましょう。お互いを紹介し合い、オンボーディングプログラムを共に考えてみると良さそうです。

例） Kaizen Platformで行っているOnboardingプロセス

おわりに
他にも原則はあるのですが、特に関連が深いと感じたものを紹介してみました。いかがだったでしょうか。なぜこのような相似形が生まれるかというと、顧客と製品の関係性が、社員と会社のそれに似ているからなのだと思います。

顧客はお金を支払って製品を利用する。成功できれば継続、アップセル（別の機能の購入）するし、さもなければ解約する。
社員は自分の時間を投資して会社で働く。成功できれば定着、成長するし、さもなければ離職する。
最近のエンジニア採用は激化する一方です。だからこそ今、会社で働いてくれているメンバーが成功するためにエンジニアリングマネージャーとして何ができるのか、考えてみると良いのではないでしょうか。

Engineering Manager vol.2 Advent Calendar 2018 の 23日目の記事。

現場のエンジニアとしてのリーダー、および研修講師としてのフィードバックを与えたり、受けたりする経験から、より、成長につながるようなフィードバックについて、つらつら書いていく。

ビジネスにおけるフィードバック
フィードバックという言葉は欧米のビジネスにおいては一般的な言葉として昔から使われていて、ずいぶん前から日本でも広まってきているように思う。限定的な意味としては、「業績評価」などを伝える評価面談などをフィードバックと呼ぶことがあり、よりカジュアルな意味としては仕事上の様々な局面での他者（上司含む）からの評価を伝えることをいう。
「ちょっとフィードバックするね。昨日のプレゼン、あれは少しユーザ相手には細かなこと言いすぎたんじゃないかな」とか

360°フィードバック、という人事制度を採用しているところもあるだろう。

フィードバックとは
フィードバックのもともとの意味は、あるシステムの出力の一部を入力に変換し、自動制御に役立てるメカニズムのこと。 よく言及される古典的な例として、機関車の調速機がある。スピードが上がるとその分スピードを下げるように働き、スピードを一定に保つ仕組みだ。調速機は、スピードが上がれば上がるほど、それとは逆向き（負）の入力に繋がるから「負のフィードバック」と呼ばれる。

f:id:masatsugumatsus:20181223004126j:plain

IT業界では、Scrumなどが広まっていることもあり、工学的な意味のフィードバックの方が馴染みのある人も多いかもしれない。（大学で制御工学などをやってきた人もいるだろう。）

ビジネスにおけるフィードバックの定義
G.M ワインバーグは著書『ワインバーグのシステム行動法』の中で、マネジメントに関わるフィードバック（効果的なものもそうでないものも）は次のように言えるという

過去の行動についての情報が

現在発せられ、

将来の行動に影響を与えたり、与えられなかったりする

フィードバックの重要性
人によるフィードバックは重要だと昔から言われている。古いマネジメントの文脈では、上位者が適切なフィードバック/評価によって、組織を統制し、部下をコントロールするために不可欠だ、と捉えられてきた面もあると思われる。

現代においては、

個々人の仕事能力の成長に不可欠であること

組織やチームの一員として存在を承認され、動機付けられること

などが挙げられるだろう。今回の記事は主にマネージャーやリーダー向け。

フィードバックの難しさ
フィードバックは難しい。
人は自分を客観的にみることは本質的にできないので、大抵の場合、他人からどう見えるか、ということを知らされると、自己認識と異なる事実に直面する。フィードバックに慣れていない、かなりの人は心理的なショックを受ける。

また、与える方もつらい。どんな強面で通っている人間も、実は目の前で人にショックを与えるということは非常に大きな心理的なストレスなのだ。だから、実社会では、あまり率直なフィードバックは好まれない。

さらに、与えられたフィードバックはあくまで、その発信者の主観的な情報であり、完全に客観的なものではない。フィードバックの発信者と受信者では、見解の相違の可能性は常にあり、これが効果的なフィードバックを難しくする。

次から自分が考える効果的なフィードバックを可能にするアイデアをつらつら書いていく。必ず常にこれをやったほうがいい、というわけではなく、ツールセットとして持っておくといいと思うもの。

明確なゴール/期待値の共有
フィードバックを与える前提として、明確なゴール/期待値の共有が相手と共有されているかを確認する。

フィードバックは、もともと、自律制御のためのもの。そもそもその人がゴールや期待値を知りえない場合は、どのように自律的に行動していいか分かるわけがない。必然、自己評価とフィードバックとの乖離は大きくなる。

もし誰かに時間をかけてタフなフィードバックをしなければならない、と感じたとしたら、フィードバックの前にそもそも「ゴール/期待値」が共有されているのか、ということを確認したほうがよい。

客観的なフィードバックシステム
フィードバックを与える前提として、客観的なフィードバックシステムを構築する。

自分がうまくやれているのか、ということを組織内の上司や同僚が教えるのではなく、客観的な情報から判断できるのであれば、本人にとっては、それがより行動を制御する正確な情報源となる。完了したタスク/バックログ、成果物の品質、各種のメトリクスなど。こうした客観的な情報が妥当で、分かりやすくなっているならば、人の解釈に基づくフィードバックをした場合も乖離は小さくなるし、フィードバックした意見の食い違いに対しても、客観的な情報を土台に議論できる。

注意するべきは、対面フィードバックでの心理的ストレスを避けようとして、「数字」に責任を押し付けること。個々人のスキルや行動特性の評価は複雑で、最終的には人の判断によってしか妥当な評価は不可能である。評価する責任からは逃げてはいけない。

フィードバックシステムが機能しているかどうかは、One On Oneなどの場で、どんな情報をもとに、仕事の出来を評価し、行動を調整をしているかを確認してみればよい。

いわゆるKPIは、本来は、こうした仕事の仕方を調整するのに役立つ情報を明確化するものでもあったはずだが、単に成績をつけるためのものになっている場合もある。

正確で客観的な事実に基づいたフィードバック
フィードバックの時に限らないが、言葉は正確に使う。

「スキルが低い」といった抽象的なおおざっぱな評価ではなく、合意可能な事実を土台に、自分の評価を伝える。また、追従的お世辞なども不要。フィードバックを与える前に、自分の評価や印象が、どのような観測事実からどのような推測を経て生み出されたのかを振り返るといいと思う。

小さく、早めのフィードバック
特に組織への新規参入者やスキルが未熟なメンバーに対するフィードバックはよく観察して、認識齟齬やスキル不足があれば、早めにフィードバックしたほうが良い。

ポジティブフィードバック
ポジティブなフィードバックを与える。

仕事している普通の状態は組織に貢献している状態。そのため、貢献できなくなった異常事態の方が目立つし、我々は本能的にそれに注目する。しかし、当然日々の仕事の過程のなかで個々人なりの強みの発揮も、工夫も、努力も、成長もある。これらを達成することは、トラブルを復旧するのと同等のエネルギーを注いでいる。また、こうした細かな改善やエネルギーの投入が現実のビジネスを支えている。こうした目立たない行動に対してもポジティブフィードバックを与えると、その行動を強化することになる。

まずは、こうした目立たない努力や成果とその重要性に気づくことが大切と思う。それに気づければ、自然とポジティブフィードバックは多くなると思う。とはいえ、どうしても見落としがちではあるので、意識的にフィードバックを大目にした方がよいと思う。自戒も込めて

観察をじっくりできない場合などは、面談のときなどに自己評価してもらって、ポイントを教えてもらうといいと思う。どんな小さなことでもよいから、と。教えてもらえるとそれを見つけるのは、比較的楽になる。見つけたら、それを伝えるとポジティブフィードバックになる。

注意点として、ポジティブフィードバックも当然、事実に基づいたものであるべき。抽象的な称賛は自尊心を満足させはするけど、行動への影響は小さい。また、単に頑張っていることを評価するのではなく、目立たないけど実際に貢献している、ということを評価するべき。

大きな貢献に対しても、しっかりとポジティブにフィードバックすべき。照れてフィードバックしない場合もあるが、有能な人材のモチベーションをそぐことになる。

フィードバックとは関係ないが、予想外に大きな成果を誰かが挙げた場合、しっかりとその要因を探ってチームに還元しよう。自然にチーム内に還元できる文化があるのが理想だが、できてない場合はマネージャーがそれをやる、もしくはやる文化を作る。

Ｉメッセージとしてのフィードバック
フィードバックは「Ｉメッセージ」として与える。

「自分にはこう見える、こう受け取った。こう思った」ということ。フィードバックはあくまで「情報提供」であり、それをどう受け取るか、は本人が決めるしかない。その選択の自由を明示的に与えること。ただし「Ｉメッセージ」は事実である、ということはしっかりと合意したほうがいい。

また、可能なら、フィードバックをどう受け取ったか、については確認してもいい。感情的に受け取れないときは、その状況を受け入れて時間を与えることも有効。

繰り返すが、フィードバックをどう受け取るか、は強制できない。人は本質的に自律的に行動する。指示待ち人間と周囲から見えても、彼にとってそうすることが合理的に思えたから、それを意識/無意識に選択している。だから、フィードバックを受け取ることを強制しようとすれば、必ずその場では受け取ったふりをするし、受け取ったように見られるための見せかけの行動をせっせと行うようになる。フィードバックする目的は現実の行動変容やスキルの向上を実現し、ビジネスの成果に結びつけること。うわべの追従を生み出すことはそれに結びつかず、その場でのマネージャーの自尊心を満足させるだけ。

個人的な経験では、目的も共有され、事実に基づいたフィードバックがされているのに、それに抵抗する場合は、スキルに不安があり、失敗を恐れていることが多い。支援することを提案したり、失敗も許容するなり、時間を与えるなりをすると、客観的な議論が可能になる。

できないものはできないし、誰もできない状態のままでいたいわけはないので、さぼっているわけでもない。客観的に、事実に即してスキルを向上させるなり、やり方を変えるなりするしかない。

自尊心に配慮する
ネガティブフィードバックのときには自尊心に配慮する。

だれも面子ををつぶされたくはない。状況にもよるが、もし、人にネガティブなフィードバックを聞かれるのを嫌がるようなら、人の見えないところに移動するなどしてもよい。

人格否定をしないことは当然だが、人はやはり、人格と仕事の評価を結び付けてうけとってしまうことも多い。そのため、明示的に本人の人格評価はしていない、と伝えることが有効なこともあると思う。おそらく、最も有効なのは、フィードバックを与える人自身が、仕事の成功失敗を人格評価と結びつけるという考え方を一切やめることだと思う。

否定的な評価や失敗について指摘されることを過度に恐れているようなら、「失敗は誰にでもある」、「経験がないことには誰でもスキルが未熟」、「人はだれしも得手不得手がある」、「パフォーマンスは状況に左右される」、「現実と向き合うことが重要」などの一般的な認識（経験も含めて）を共有するのが、個人的には有効と感じている。こうしたとき、自尊心に結びついた過度な完璧主義が成長を阻害している。失敗を自分自身に許容する態度が可能だということを理解できると、上手く成長軌道に乗る場合も多い。

暗黙のフィードバックに注意
フィードバックは、必ずしも意図したものだけが受け取られるとは限らない。仕事のアサイン、ポジティブフィードバックの不在、など意図しない行為が暗黙のフィードバックになって影響を与える。

心配しても仕方ない面もあるが、細かなコミュニケーションからどのようなフィードバックがチームや組織に「実際に」機能しているのかを把握することが大切。

自分からフィードバックをうけとる
自分からフィードバックを受け取りにいく。

自分のマネジメントの改善になるため非常に有効。効果的なマネジメントの下ではフィードバックも効果的になる。フィードバックを受け取るときも、自分が与えるときのポイントをそのまま適用する。

組織の目標や期待値（マネジメントの責務）を共有する（マネジメントの責務の定義は自己防衛に走らないように気を付ける。完璧には決して出来ない。組織/チームの長期的な成果に貢献できる責務を定義する。）

自分のマネジメントについての客観的なフィードバックシステムを用意する

正確で客観的な事実に基づいたフィードバックを求める。（抽象的だったりしたら、具体例を聞くなど）

特にマネジメント初心者の場合は、小さく、早めのフィードバックを求める

ポジティブフィードバックも求める

フィードバックは、Ｉメッセージに過ぎないので、どう受け取るか、は自分で決めることができる

自分の自尊心に配慮していい。非難されても、完璧主義に毒されないこと。

無言のフィードバックに、時には注意してみる。また、勘違いして受け取っている場合もある。

個人的なおすすめ本
リーダーが育つ変革プロジェクトの教科書
リーダーが育つ変革プロジェクトの教科書

作者: 白川克
出版社/メーカー: 日経BP社
発売日: 2018/12/13
メディア: 単行本
この商品を含むブログを見る
第９章がフィードバックに割かれている。 カジュアルにポイントが書かれている。
ワインバーグのシステム行動法 ソフトウェア文化を創る (3)
ワインバーグのシステム行動法 ソフトウェア文化を創る (3)

作者: G.M.ワインバーグ,大野[とし]郎
出版社/メーカー: 共立出版
発売日: 1996/06/05
メディア: 単行本
クリック: 6回
この商品を含むブログ (2件) を見る
ソフトウェアエンジニアリングマネージャーとしての効果的な対人コミュニケーション全般について書かれた名著。 フィードバックについては１７章。
ワインバーグのシステム思考法 ソフトウェア文化を創る〈1〉
ワインバーグのシステム思考法 ソフトウェア文化を創る〈1〉

作者: G.M.ワインバーグ,大野徇郎
出版社/メーカー: 共立出版
発売日: 1994/07/01
メディア: 単行本
購入: 2人 クリック: 7回
この商品を含むブログ (12件) を見る
フィードバックシステムのマネジメントへの応用について。ちと例が古いので、今時の若者は読み解くのが難しいかも。
スーパーエンジニアへの道―技術リーダーシップの人間学
スーパーエンジニアへの道―技術リーダーシップの人間学

作者: G.M.ワインバーグ,木村泉
出版社/メーカー: 共立出版
発売日: 1991/10/01
メディア: 単行本
購入: 22人 クリック: 382回
この商品を含むブログ (87件) を見る
自尊心の扱い方について参考になる。
What Did You Say? The Art of Giving and Receiving Feedback (English Edition)
What Did You Say? The Art of Giving and Receiving Feedback (English Edition)

作者: Charles N Seashore,Gerald M. Weinberg,Edith W. Seashore
出版社/メーカー: Weinberg & Weinberg
発売日: 2013/04/03
メディア: Kindle版
この商品を含むブログを見る
かなりがっつりフィードバックについて。面白い。
The Managerial Moment of Truth: The Essential Step in Helping People Improve Performance (English Edition)
The Managerial Moment of Truth: The Essential Step in Helping People Improve Performance (English Edition)

作者: Bruce Bodaken,Robert Fritz
出版社/メーカー: Free Press
発売日: 2006/04/25
メディア: Kindle版
この商品を含むブログを見る
フィードバックそのものではないけど、部下育成の効果的な面談法について。 日本語に昔訳されているけど、到底おすすめできる翻訳になっていないので割愛。
HIGH OUTPUT MANAGEMENT(ハイアウトプット マネジメント) 人を育て、成果を最大にするマネジメント
HIGH OUTPUT MANAGEMENT(ハイアウトプット マネジメント) 人を育て、成果を最大にするマネジメント

作者: アンドリュー・S・グローブ,ベン・ホロウィッツ,小林薫
出版社/メーカー: 日経BP社
発売日: 2017/01/11
メディア: 単行本
この商品を含むブログ (3件) を見る
定番。
補足：管理しないについて
ソニックガーデンのように、「管理しない」を採用している事例もあるが、実際にどのようなフィードバックシステムが存在するか、をみてみると、実は不思議でもなんでもない。

成果に直結するソースコードはチームでレビューされている。

顧客ビジネスに役立っているかはプログラマが直接顧客と相対しているのでそこからフィードバックを得られる。

アジャイルで小さく開発しているので、フィードバックが小まめで小さい。

スキル評価は、実は一人前になるかならないか、というポイントでキチンと行っている。

要するに、細かな「評価」はしないけど、組織のビジネス成果につながる効果的なフィードバックがデザインされている。

開発責任者として中途入社した時にやったこと
Management
マネージメント
この記事は、Engineering Manager vol.2 Advent Calendar 2018 24日目向けに書きました。

去年10月に現職に開発責任者として入社しました。最近、周りでも開発責任者として転職する人がちらほらいて、入社時にどんなことを考えて何をしたのか聞かれることがあり、会社の規模、事業、メンバーや抱えている課題によって実践する内容は異なると思いますが、私がやったことをまとめました。

責任者として入社するということ
エンジニアに限った話ではないですが、責任者として採用されるケースは

事業や組織をスケールさせる
組織や仕組みの抜本的な改善
など会社が変化していくタイミングで経験値を期待され採用されることが多いかと思います。

個人の成果ではなく組織の成果として評価されるレイヤーで、事業や既存組織にあるルール、メンバーの特性など本来であれば時間をかけて理解し成果に繋げる必要がありますが、早急な成果が求められます。短期間である程度見える形で成果を出すことが重要だと考えています。
それだけではなく、出来上がった組織の長になるので、期待値も高く、常に評価され、時には変化への反発の可能性もあり、難易度としては非常に高いと考えています。

入社を決める前に確認したこと
難しいポジションかつ自分のやれることは限られているので、具体的にどんな成果を求めているかなどを確認しました。ポジンションに関わらずこのミスマッチがあるとお互い辛いです。
具体的な話を進める上で、Mission、Visionに共感し、事業へ貢献したいことは大前提でお話をさせて頂きましたし、幸いにもオフィスでの面談・面接だけでなく、何度か飲みながら意見交換し入社後の具体的なイメージが出来たことがよかったと思います。
この経験から、現在は採用の際には可能な限りオフサイトの場でお互いの話をするようにしています。

内定前なので可能な範囲ですが、以下のことを確認しました。

会社・事業の現状と今後
組織の状態と課題
各メンバの特性
システム概要、技術的な課題
利用技術、開発手法、プロセス
自分に期待している成果
任せたい/任せる範囲(権限的なこと)
解決が求められていた課題に関しては、実際自分ならどうするとか、経験的にこういうやり方をしてました、という具合なディスカッション出来たため、受け入れ側としても入社後想定外の人だったというリスクは軽減出来たかなと思います。

入社してからやったこと
理解する
当然ながら、配下のメンバがどんな人なのかを知ることが第一歩です。

担当業務について
これまで経験、経歴
これからやっていきたいこと
不満や課題、改善したいこと
会社にいるモチベーション
自分に期待したいこと
と言ったことを聞きながら、組織の現状を把握しつつ、関係部署の方にもお話を伺い、外からの見え方も確認した上で、何から着手するかを検討しました。
外から来ると、特に課題が目がつきます。これは、既存の人が習慣化されているもの、他の優先度が高くそのままにしていること、リソースがなく手がつけられないなど事情があります。
理解してもらうには、まず理解していくことなので、協力して抱えている課題を一緒に解決していく姿勢を見せ、現状を受け入れ次に何をするのかを大事にし、次のアクションへと繋げることを意識しました。

理解してもらう
タイミング的に下半期の開始とともに入社でしたので、通期の戦略、上期の流れを汲むつつ、今後の方針を作りました。そこには施策だけでなく、組織の存在意義、どういう組織にしたいか、そして自分がどういう貢献をしていきたいかも明言しました。

経験値を期待されて入社していますので、自分の持つ経験、スキルは出し惜しみしないことも大事です。勉強会やレビューなどを通じて、経験・スキルを伝えています。

やったこと
既存の仕組みでうまく行っていること事はいじらずそのままに、すぐに解決できる課題から着手しつつ、大きめの課題のプランニングを並行して行いました。技術的なことは、コーディング含めて自分が出来ることは何でもやりました。自身の組織として安定するまでは、とにかくやれることはすべてやるスタンスでいました。
前述の内容を含めて、やってきたことは以下になります。

1on1の実施
情報収集
下期の方針策定
情報共有改善
開発レビュー/プロセスの見直し
開発環境の抜本的改善
リファクタリングの推進
新技術導入
既存システムパフォーマンス改善
上記に加え、採用活動がうまく行ってなかったので、人事と共に採用方法、採用プロセスの見直しも行いました。

募集要項の更新
採用ポジションの整理
欲しいエンジニア像の明確化
採用媒体の選定
エージェントへの説明
エンジニア向け会社説明資料も作成した
採用プロセスの短縮 など
あと、当然と言えば当然ですが、忘れていけないのは、情報システム運用規程やセキュリティルールなど現在回っているルールを理解した上で、業務遂行して行く必要があります。自身が見る組織、システムの理解も重要ですが、会社としての定められている仕組みをまずは確認しましょう。

一年経ってどうか
まだ入社時から抱えている大きい課題はあり発展途上ではありますが、開発環境も変わり、新規事業立ち上げもあり、また採用もうまく回り始め新しいメンバの参画もあり、一年前とは全く違う組織になりつつあると思います。
私が考えた方向性と既存メンバの期待値にズレが少なかったため、協力体制が築けたのが大きな要因だったと思います。それだけでなく、経営層の理解とバックアップは非常に助かりました。

とはいえ、幸い致命的なものはありませんでしたが、失敗したこともたくさんあります。

特に、うまく行っていない見直しする必要な施策がありました。入社間もないこともあり、なかなか決断が出来ず、時間をかけ遠回りしてしまいました。管理職ともなれば入社歴は関係なく、費用対効果の観点で冷静な判断をするべきことを改めて認識しました。

最後に
状況、条件によって、同じやり方でも結果は変わりますが、開発責任者として中途入社した時の一つのナレッジとして、一人でも参考になった方がいればうれしいです。

私が考えるエンジニアリングマネージャー
EngineeringManager
自己紹介

この記事はEngineering Manager vol.2 Advent Calendar 2018 25日目の記事です。

株式会社レアジョブ　でエンジニアリングマネージャーをしていました。
去年の11月に1年のフィリピン出張を経て帰国し、今年春から新プロダクト開発のエンジニアチームのリーダーとして奮闘してきました。@yashioです。チームギークが好きです。

今年の締めくくりとしてマネージャーの役割ってこういうことかなあ、ということを書いてみたいと思います。簡単に概要を紹介します。

チームとプロジェクトの背景
5-6名程度のチーム（多少の変動あり）
サーバーサイドのAPI開発 サービス連携を伴う
新規プロダクト開発
メンバー編成は過去にお仕事をしたことがあったりなかったり
連携調整する部署やチームが多いのが特徴（基盤、フロント、運用、協力会社、フィリピン子会社　などなど）
プロダクトのゴールはあるが、仕様的なものはプロジェクト開始時に詰めていくスタイル
その１調整し、俯瞰するひと


つまり、、「調整（おば/おじ）さん」！
エンジニアリングマネージャーとは
チーム内に発生する「障害となる、なり得るもの」を見つけ解消していく、そこに尽きるのではないかと思います。具体的には以下のような役割の人かなと思います。:relaxed:ちょっとお節介？なニュアンスなのかもしれません。

人と人とで連絡をとりキャッチボールしないといけない問題を拾い停滞している問題を率先して消化
技術要件で手をさしのべる、あるいは助けてくれる（人/糸口/技術）を知っており解決策を教えてくれ
（エンジニア的には生産的だと思えない）一部のタスクを率先して消化
「あれ、どしたの元気ないね」と声をかける
もう少し見栄えを良くすると・・・

1.チーム内の課題/相談に対して解決手段を講じる
2.チーム内で収束しない議論や方針で答えが見出せない時の先導
3.やるべきことを見える化
4.関係部署と連携・調整していく（粒度が荒いフェーズの仕様詰め、実装/テスト/本番構築のスケジュール、テストデータ/テスト仕様書整備/実施など）

その2「意思決定」を早める


不確定要素が高い課題についてを相談された場合はできるだけ早めの判断をします。誰がきめてもいいのだけど、決めかねてる時には自分が決断する。「メンバーを迷わせない」というのは重要な役割です。それと・・・信頼関係がチーム内に醸造されていないフェーズでマネージャーがいつまでもその課題を抱えているとメンバーは何度も状況を確認しにくいです。

その3「心理的安全」の維持


チーム内ではメンバーそれぞれ得意な領域がありアウトプットが出やすいところや挑戦してみたいところを尋ねてそれらをお任せするようにしていました。
正直にいうとこの規模でも開発の初期段階だと決めないといけない事が多く、この方法しか取れなかったという事実もあります。ただ結果的にチームの中でも「これを聞くのはXX さんだね」ということでお互いを尊敬する文化が醸造できたなと感じてます。対リーダーや対メンバーに限らずお互いを尊重し、意見を聞くという姿勢がチーム内にあることで「こんなこといってもいいのかな」という心理的要素をできるだけ排除することができたと感じられるようになりました。

あとがき
昨今エンジニアリングマネージャーというワードがホットですが本当に役割の一つだと感じています。
が、一点。「調整さん」の役割は一部エンジニアにむいてないところもあると感じています。私自身もサーバサイドエンジニアである経験から、開発業務とやプロダクト開発と、調整業務というのは全く別の能力であるからと考えるからです。
自身の書くコードで戦える「開発業務」とチーム全体を一つの生き物ととしてとらえ、価値を最大化させることを常に念頭において立ち回る調整や「連携業務」は視点や注ぐ能力が異なるからです。

最後に
マネージャーをしていた、と過去形になってしまいましたが、年内でレアジョブを卒業し新しいチャレンジにむかいたいと思います！最後までよんでいただきありがとうございました。
チームのみんな！わたしは今でも一緒にお仕事できたことをとっても嬉しく思ってるし、いつかまた一緒に仕事ができるとおもっているよー！！またチャーハンたべよう！
